/*
 * Requisition
 * Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.APIPayCycleViewPagedResponse;
import com.konfigthis.client.model.APIPayRegisterViewPagedResponse;
import com.konfigthis.client.model.BatchPagedResponse;
import com.konfigthis.client.model.BooleanResponse;
import com.konfigthis.client.model.EmployeePaymentPagedResponse;
import com.konfigthis.client.model.PaymentTransaction;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PayCyclesApi
 */
@Disabled
public class PayCyclesApiTest {

    private static PayCyclesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PayCyclesApi(apiClient);
    }

    /**
     * Get all Pay Cycles
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllTest() throws ApiException {
        String payGroupId = null;
        String runStatus = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        APIPayCycleViewPagedResponse response = api.getAll(payGroupId)
                .runStatus(runStatus)
                .pageNumber(pageNumber)
                .pageSize(pageSize)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all Batch Payments
     *
     * Gets all payments for the specified pay group Id and pay cycle Id and pay batch Id / specified pay group id and pay cycle Id and pay batch Id and payment status filter
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBatchPaymentsTest() throws ApiException {
        String payGroupId = null;
        String payCycleId = null;
        String payBatchId = null;
        String status = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        EmployeePaymentPagedResponse response = api.getBatchPayments(payGroupId, payCycleId, payBatchId)
                .status(status)
                .pageNumber(pageNumber)
                .pageSize(pageSize)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all Pay Batches
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayBatchesTest() throws ApiException {
        String payGroupId = null;
        String payCycleId = null;
        String status = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        BatchPagedResponse response = api.getPayBatches(payGroupId, payCycleId)
                .status(status)
                .pageNumber(pageNumber)
                .pageSize(pageSize)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Pay Register
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayRegisterTest() throws ApiException {
        String payGroupId = null;
        String payCycleId = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        APIPayRegisterViewPagedResponse response = api.getPayRegister(payGroupId, payCycleId)
                .pageNumber(pageNumber)
                .pageSize(pageSize)
                .execute();
        // TODO: test validations
    }

    /**
     * Update the Payments status
     *
     * Update the Payments status.It will allow only 100 bulk transactions from that particular batch.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePaymentsStatusTest() throws ApiException {
        String payGroupId = null;
        String payCycleId = null;
        String payBatchId = null;
        BooleanResponse response = api.updatePaymentsStatus(payGroupId, payCycleId, payBatchId)
                .execute();
        // TODO: test validations
    }

}
