/*
 * Requisition
 * Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.APIProjectTaskPagedResponse;
import com.konfigthis.client.model.APITimesheetEntryPagedResponse;
import com.konfigthis.client.model.BooleanResponse;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.ProjectTask;
import com.konfigthis.client.model.StringResponse;
import com.konfigthis.client.model.TaskBillingType;
import com.konfigthis.client.model.UpdateProjectTask;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TasksApi
 */
@Disabled
public class TasksApiTest {

    private static TasksApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TasksApi(apiClient);
    }

    /**
     * Create a task
     *
     * Create project task and returns created task identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTaskIdentifierTest() throws ApiException {
        String projectId = null;
        String name = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String projectId = null;
        String description = null;
        TaskBillingType taskBillingType = null;
        List<String> assignedTo = null;
        Double estimatedHours = null;
        String phaseId = null;
        StringResponse response = api.createTaskIdentifier(projectId, name, startDate, endDate, projectId)
                .description(description)
                .taskBillingType(taskBillingType)
                .assignedTo(assignedTo)
                .estimatedHours(estimatedHours)
                .phaseId(phaseId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get project tasks.
     *
     * Gets the project tasks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllTest() throws ApiException {
        String projectId = null;
        OffsetDateTime lastModified = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        APIProjectTaskPagedResponse response = api.getAll(projectId)
                .lastModified(lastModified)
                .pageNumber(pageNumber)
                .pageSize(pageSize)
                .execute();
        // TODO: test validations
    }

    /**
     * Get project task time entries.
     *
     * Gets the project task time entries between selected from and to date range.If both &#x60;from&#x60; and &#x60;to&#x60; are not specified, last 30 days records are returned.From &#x60;date&#x60; should be before &#x60;to&#x60; date.The difference between &#x60;from&#x60; and &#x60;to&#x60; date cannot be more than **90** days.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTimeEntriesBetweenDatesTest() throws ApiException {
        String projectId = null;
        String taskId = null;
        OffsetDateTime from = null;
        OffsetDateTime to = null;
        String employeeIds = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        APITimesheetEntryPagedResponse response = api.listTimeEntriesBetweenDates(projectId, taskId)
                .from(from)
                .to(to)
                .employeeIds(employeeIds)
                .pageNumber(pageNumber)
                .pageSize(pageSize)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a task
     *
     * Update project task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTaskTest() throws ApiException {
        String projectId = null;
        String taskId = null;
        String description = null;
        String name = null;
        TaskBillingType taskBillingType = null;
        List<String> assignedTo = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        Double estimatedHours = null;
        String phaseId = null;
        BooleanResponse response = api.updateTask(projectId, taskId)
                .description(description)
                .name(name)
                .taskBillingType(taskBillingType)
                .assignedTo(assignedTo)
                .startDate(startDate)
                .endDate(endDate)
                .estimatedHours(estimatedHours)
                .phaseId(phaseId)
                .execute();
        // TODO: test validations
    }

}
