/*
 * Requisition
 * Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.APIProjectAllocationPagedResponse;
import com.konfigthis.client.model.APIProjectPagedResponse;
import com.konfigthis.client.model.APIProjectResponse;
import com.konfigthis.client.model.APITimesheetEntryPagedResponse;
import com.konfigthis.client.model.BooleanResponse;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.Project;
import com.konfigthis.client.model.ProjectStatus;
import com.konfigthis.client.model.StringResponse;
import com.konfigthis.client.model.UpdateProject;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private static ProjectsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ProjectsApi(apiClient);
    }

    /**
     * Create a Project
     *
     * Create an Project and returns created project identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProjectIdentifierTest() throws ApiException {
        String clientId = null;
        String name = null;
        String code = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String description = null;
        ProjectStatus status = null;
        Boolean isBillable = null;
        StringResponse response = api.createProjectIdentifier(clientId, name, code, startDate, endDate)
                .description(description)
                .status(status)
                .isBillable(isBillable)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all projects.
     *
     * Get all projects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllTest() throws ApiException {
        String clientIds = null;
        OffsetDateTime lastModified = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        APIProjectPagedResponse response = api.getAll()
                .clientIds(clientIds)
                .lastModified(lastModified)
                .pageNumber(pageNumber)
                .pageSize(pageSize)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a project allocations
     *
     * Gets the specified project allocations based on identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllocationsTest() throws ApiException {
        String id = null;
        OffsetDateTime lastModified = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        APIProjectAllocationPagedResponse response = api.getAllocations(id)
                .lastModified(lastModified)
                .pageNumber(pageNumber)
                .pageSize(pageSize)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a project
     *
     * Gets the specified project based on identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String id = null;
        APIProjectResponse response = api.getById(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get project timesheet entries.
     *
     * Gets the project time entries between selected from and to date range.If both &#x60;from&#x60; and &#x60;to&#x60; are not specified, last 30 days records are returned.From &#x60;date&#x60; should be before &#x60;to&#x60; date.The difference between &#x60;from&#x60; and &#x60;to&#x60; date cannot be more than **90** days.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimesheetEntriesBetweenDatesTest() throws ApiException {
        String id = null;
        OffsetDateTime from = null;
        OffsetDateTime to = null;
        String employeeIds = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        APITimesheetEntryPagedResponse response = api.getTimesheetEntriesBetweenDates(id)
                .from(from)
                .to(to)
                .employeeIds(employeeIds)
                .pageNumber(pageNumber)
                .pageSize(pageSize)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a Project
     *
     * Update Project Details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDetailsTest() throws ApiException {
        String id = null;
        String description = null;
        String name = null;
        String code = null;
        ProjectStatus status = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        Boolean isBillable = null;
        BooleanResponse response = api.updateDetails(id)
                .description(description)
                .name(name)
                .code(code)
                .status(status)
                .startDate(startDate)
                .endDate(endDate)
                .isBillable(isBillable)
                .execute();
        // TODO: test validations
    }

}
