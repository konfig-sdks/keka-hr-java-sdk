/*
 * Requisition
 * Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Address;
import com.konfigthis.client.model.BloodGroup;
import com.konfigthis.client.model.BooleanResponse;
import com.konfigthis.client.model.Employee;
import com.konfigthis.client.model.EmployeeFieldResponse;
import com.konfigthis.client.model.EmployeeProfilePagedResponse;
import com.konfigthis.client.model.EmployeeProfileResponse;
import com.konfigthis.client.model.Gender;
import com.konfigthis.client.model.JobDetailsUpdateRequest;
import com.konfigthis.client.model.MaritalStatus;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.PersonalDetailsUpdateRequest;
import com.konfigthis.client.model.Relation;
import com.konfigthis.client.model.StringResponse;
import com.konfigthis.client.model.TimeType;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EmployeesApi
 */
@Disabled
public class EmployeesApiTest {

    private static EmployeesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new EmployeesApi(apiClient);
    }

    /**
     * Create an Employee
     *
     * Create an Employee and returns created employee identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEmployeeTest() throws ApiException {
        String displayName = null;
        String firstName = null;
        String lastName = null;
        String email = null;
        Gender gender = null;
        OffsetDateTime dateOfBirth = null;
        OffsetDateTime dateJoined = null;
        String department = null;
        String businessUnit = null;
        String jobTitle = null;
        String location = null;
        String employeeNumber = null;
        String middleName = null;
        String mobileNumber = null;
        String secondaryJobTitle = null;
        StringResponse response = api.createEmployee(displayName, firstName, lastName, email, gender, dateOfBirth, dateJoined, department, businessUnit, jobTitle, location)
                .employeeNumber(employeeNumber)
                .middleName(middleName)
                .mobileNumber(mobileNumber)
                .secondaryJobTitle(secondaryJobTitle)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all Employees
     *
     * Gets all employees / the specified employees based on employee search parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllTest() throws ApiException {
        String employeeIds = null;
        String employeeNumbers = null;
        String employmentStatus = null;
        Boolean inProbation = null;
        Boolean inNoticePeriod = null;
        OffsetDateTime lastModified = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        EmployeeProfilePagedResponse response = api.getAll()
                .employeeIds(employeeIds)
                .employeeNumbers(employeeNumbers)
                .employmentStatus(employmentStatus)
                .inProbation(inProbation)
                .inNoticePeriod(inNoticePeriod)
                .lastModified(lastModified)
                .pageNumber(pageNumber)
                .pageSize(pageSize)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all update fields
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllUpdateFieldsTest() throws ApiException {
        Integer pageNumber = null;
        Integer pageSize = null;
        EmployeeFieldResponse response = api.getAllUpdateFields()
                .pageNumber(pageNumber)
                .pageSize(pageSize)
                .execute();
        // TODO: test validations
    }

    /**
     * Get an Employee
     *
     * Get an employee with specified identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String id = null;
        EmployeeProfileResponse response = api.getById(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Update employee job details
     *
     * Update employee job details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateJobDetailsTest() throws ApiException {
        String id = null;
        String employeeNumber = null;
        String location = null;
        String businessUnit = null;
        String department = null;
        String jobTitle = null;
        String reportingManager = null;
        String attendanceNumber = null;
        TimeType timeType = null;
        String attendanceCaptureScheme = null;
        String expensePolicy = null;
        String noticePeriod = null;
        String holidayList = null;
        String costCenter = null;
        String payBand = null;
        String payGrade = null;
        Map<String, Object> customFields = null;
        BooleanResponse response = api.updateJobDetails(id)
                .employeeNumber(employeeNumber)
                .location(location)
                .businessUnit(businessUnit)
                .department(department)
                .jobTitle(jobTitle)
                .reportingManager(reportingManager)
                .attendanceNumber(attendanceNumber)
                .timeType(timeType)
                .attendanceCaptureScheme(attendanceCaptureScheme)
                .expensePolicy(expensePolicy)
                .noticePeriod(noticePeriod)
                .holidayList(holidayList)
                .costCenter(costCenter)
                .payBand(payBand)
                .payGrade(payGrade)
                .customFields(customFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Employee personal details
     *
     * Update Employee personal details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePersonalDetailsTest() throws ApiException {
        String id = null;
        String displayName = null;
        String firstName = null;
        String middleName = null;
        String lastName = null;
        Gender gender = null;
        OffsetDateTime dateOfBirth = null;
        String workPhone = null;
        String homePhone = null;
        String personalEmail = null;
        String skypeId = null;
        MaritalStatus maritalStatus = null;
        OffsetDateTime marriageDate = null;
        List<Relation> relations = null;
        BloodGroup bloodGroup = null;
        Address currentAddress = null;
        Address permanentAddress = null;
        String professionalSummary = null;
        Map<String, Object> customFields = null;
        BooleanResponse response = api.updatePersonalDetails(id)
                .displayName(displayName)
                .firstName(firstName)
                .middleName(middleName)
                .lastName(lastName)
                .gender(gender)
                .dateOfBirth(dateOfBirth)
                .workPhone(workPhone)
                .homePhone(homePhone)
                .personalEmail(personalEmail)
                .skypeId(skypeId)
                .maritalStatus(maritalStatus)
                .marriageDate(marriageDate)
                .relations(relations)
                .bloodGroup(bloodGroup)
                .currentAddress(currentAddress)
                .permanentAddress(permanentAddress)
                .professionalSummary(professionalSummary)
                .customFields(customFields)
                .execute();
        // TODO: test validations
    }

}
