/*
 * Requisition
 * Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Expense;
import com.konfigthis.client.model.ExpenseClaimApprovalStatus;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ExpenseClaim
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ExpenseClaim {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_EMPLOYEE_IDENTIFIER = "employeeIdentifier";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_IDENTIFIER)
  private UUID employeeIdentifier;

  public static final String SERIALIZED_NAME_EMPLOYEE_NAME = "employeeName";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_NAME)
  private String employeeName;

  public static final String SERIALIZED_NAME_CLAIM_NUMBER = "claimNumber";
  @SerializedName(SERIALIZED_NAME_CLAIM_NUMBER)
  private String claimNumber;

  public static final String SERIALIZED_NAME_SUBMITTED_ON = "submittedOn";
  @SerializedName(SERIALIZED_NAME_SUBMITTED_ON)
  private OffsetDateTime submittedOn;

  public static final String SERIALIZED_NAME_APPROVAL_STATUS = "approvalStatus";
  @SerializedName(SERIALIZED_NAME_APPROVAL_STATUS)
  private ExpenseClaimApprovalStatus approvalStatus;

  public static final String SERIALIZED_NAME_EXPENSES = "expenses";
  @SerializedName(SERIALIZED_NAME_EXPENSES)
  private List<Expense> expenses = null;

  public ExpenseClaim() {
  }

  public ExpenseClaim title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public ExpenseClaim id(UUID id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    
    
    
    this.id = id;
  }


  public ExpenseClaim employeeIdentifier(UUID employeeIdentifier) {
    
    
    
    
    this.employeeIdentifier = employeeIdentifier;
    return this;
  }

   /**
   * Get employeeIdentifier
   * @return employeeIdentifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UUID getEmployeeIdentifier() {
    return employeeIdentifier;
  }


  public void setEmployeeIdentifier(UUID employeeIdentifier) {
    
    
    
    this.employeeIdentifier = employeeIdentifier;
  }


  public ExpenseClaim employeeName(String employeeName) {
    
    
    
    
    this.employeeName = employeeName;
    return this;
  }

   /**
   * Get employeeName
   * @return employeeName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployeeName() {
    return employeeName;
  }


  public void setEmployeeName(String employeeName) {
    
    
    
    this.employeeName = employeeName;
  }


  public ExpenseClaim claimNumber(String claimNumber) {
    
    
    
    
    this.claimNumber = claimNumber;
    return this;
  }

   /**
   * Get claimNumber
   * @return claimNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getClaimNumber() {
    return claimNumber;
  }


  public void setClaimNumber(String claimNumber) {
    
    
    
    this.claimNumber = claimNumber;
  }


  public ExpenseClaim submittedOn(OffsetDateTime submittedOn) {
    
    
    
    
    this.submittedOn = submittedOn;
    return this;
  }

   /**
   * Get submittedOn
   * @return submittedOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getSubmittedOn() {
    return submittedOn;
  }


  public void setSubmittedOn(OffsetDateTime submittedOn) {
    
    
    
    this.submittedOn = submittedOn;
  }


  public ExpenseClaim approvalStatus(ExpenseClaimApprovalStatus approvalStatus) {
    
    
    
    
    this.approvalStatus = approvalStatus;
    return this;
  }

   /**
   * Get approvalStatus
   * @return approvalStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ExpenseClaimApprovalStatus getApprovalStatus() {
    return approvalStatus;
  }


  public void setApprovalStatus(ExpenseClaimApprovalStatus approvalStatus) {
    
    
    
    this.approvalStatus = approvalStatus;
  }


  public ExpenseClaim expenses(List<Expense> expenses) {
    
    
    
    
    this.expenses = expenses;
    return this;
  }

  public ExpenseClaim addExpensesItem(Expense expensesItem) {
    if (this.expenses == null) {
      this.expenses = new ArrayList<>();
    }
    this.expenses.add(expensesItem);
    return this;
  }

   /**
   * Get expenses
   * @return expenses
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Expense> getExpenses() {
    return expenses;
  }


  public void setExpenses(List<Expense> expenses) {
    
    
    
    this.expenses = expenses;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ExpenseClaim instance itself
   */
  public ExpenseClaim putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExpenseClaim expenseClaim = (ExpenseClaim) o;
    return Objects.equals(this.title, expenseClaim.title) &&
        Objects.equals(this.id, expenseClaim.id) &&
        Objects.equals(this.employeeIdentifier, expenseClaim.employeeIdentifier) &&
        Objects.equals(this.employeeName, expenseClaim.employeeName) &&
        Objects.equals(this.claimNumber, expenseClaim.claimNumber) &&
        Objects.equals(this.submittedOn, expenseClaim.submittedOn) &&
        Objects.equals(this.approvalStatus, expenseClaim.approvalStatus) &&
        Objects.equals(this.expenses, expenseClaim.expenses)&&
        Objects.equals(this.additionalProperties, expenseClaim.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, id, employeeIdentifier, employeeName, claimNumber, submittedOn, approvalStatus, expenses, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExpenseClaim {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    employeeIdentifier: ").append(toIndentedString(employeeIdentifier)).append("\n");
    sb.append("    employeeName: ").append(toIndentedString(employeeName)).append("\n");
    sb.append("    claimNumber: ").append(toIndentedString(claimNumber)).append("\n");
    sb.append("    submittedOn: ").append(toIndentedString(submittedOn)).append("\n");
    sb.append("    approvalStatus: ").append(toIndentedString(approvalStatus)).append("\n");
    sb.append("    expenses: ").append(toIndentedString(expenses)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("id");
    openapiFields.add("employeeIdentifier");
    openapiFields.add("employeeName");
    openapiFields.add("claimNumber");
    openapiFields.add("submittedOn");
    openapiFields.add("approvalStatus");
    openapiFields.add("expenses");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ExpenseClaim
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ExpenseClaim.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExpenseClaim is not found in the empty JSON string", ExpenseClaim.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("title").isJsonNull() && (jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("employeeIdentifier") != null && !jsonObj.get("employeeIdentifier").isJsonNull()) && !jsonObj.get("employeeIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeIdentifier").toString()));
      }
      if (!jsonObj.get("employeeName").isJsonNull() && (jsonObj.get("employeeName") != null && !jsonObj.get("employeeName").isJsonNull()) && !jsonObj.get("employeeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeName").toString()));
      }
      if (!jsonObj.get("claimNumber").isJsonNull() && (jsonObj.get("claimNumber") != null && !jsonObj.get("claimNumber").isJsonNull()) && !jsonObj.get("claimNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `claimNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("claimNumber").toString()));
      }
      if (jsonObj.get("expenses") != null && !jsonObj.get("expenses").isJsonNull()) {
        JsonArray jsonArrayexpenses = jsonObj.getAsJsonArray("expenses");
        if (jsonArrayexpenses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("expenses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `expenses` to be an array in the JSON string but got `%s`", jsonObj.get("expenses").toString()));
          }

          // validate the optional field `expenses` (array)
          for (int i = 0; i < jsonArrayexpenses.size(); i++) {
            Expense.validateJsonObject(jsonArrayexpenses.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExpenseClaim.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExpenseClaim' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExpenseClaim> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExpenseClaim.class));

       return (TypeAdapter<T>) new TypeAdapter<ExpenseClaim>() {
           @Override
           public void write(JsonWriter out, ExpenseClaim value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ExpenseClaim read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ExpenseClaim instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExpenseClaim given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExpenseClaim
  * @throws IOException if the JSON string is invalid with respect to ExpenseClaim
  */
  public static ExpenseClaim fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExpenseClaim.class);
  }

 /**
  * Convert an instance of ExpenseClaim to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

