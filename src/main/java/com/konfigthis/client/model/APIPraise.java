/*
 * Requisition
 * Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.APIBadgeLookup;
import com.konfigthis.client.model.APIEmployeeLookup;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * APIPraise
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class APIPraise {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_FEEDBACK = "feedback";
  @SerializedName(SERIALIZED_NAME_FEEDBACK)
  private String feedback;

  public static final String SERIALIZED_NAME_BADGE = "badge";
  @SerializedName(SERIALIZED_NAME_BADGE)
  private APIBadgeLookup badge;

  public static final String SERIALIZED_NAME_EMPLOYEES = "employees";
  @SerializedName(SERIALIZED_NAME_EMPLOYEES)
  private List<APIEmployeeLookup> employees = null;

  public static final String SERIALIZED_NAME_GIVEN_BY = "givenBy";
  @SerializedName(SERIALIZED_NAME_GIVEN_BY)
  private APIEmployeeLookup givenBy;

  public static final String SERIALIZED_NAME_GIVEN_ON = "givenOn";
  @SerializedName(SERIALIZED_NAME_GIVEN_ON)
  private OffsetDateTime givenOn;

  public APIPraise() {
  }

  
  public APIPraise(
     String id
  ) {
    this();
    this.id = id;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getId() {
    return id;
  }




  public APIPraise feedback(String feedback) {
    
    
    
    
    this.feedback = feedback;
    return this;
  }

   /**
   * Get feedback
   * @return feedback
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFeedback() {
    return feedback;
  }


  public void setFeedback(String feedback) {
    
    
    
    this.feedback = feedback;
  }


  public APIPraise badge(APIBadgeLookup badge) {
    
    
    
    
    this.badge = badge;
    return this;
  }

   /**
   * Get badge
   * @return badge
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public APIBadgeLookup getBadge() {
    return badge;
  }


  public void setBadge(APIBadgeLookup badge) {
    
    
    
    this.badge = badge;
  }


  public APIPraise employees(List<APIEmployeeLookup> employees) {
    
    
    
    
    this.employees = employees;
    return this;
  }

  public APIPraise addEmployeesItem(APIEmployeeLookup employeesItem) {
    if (this.employees == null) {
      this.employees = new ArrayList<>();
    }
    this.employees.add(employeesItem);
    return this;
  }

   /**
   * Get employees
   * @return employees
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<APIEmployeeLookup> getEmployees() {
    return employees;
  }


  public void setEmployees(List<APIEmployeeLookup> employees) {
    
    
    
    this.employees = employees;
  }


  public APIPraise givenBy(APIEmployeeLookup givenBy) {
    
    
    
    
    this.givenBy = givenBy;
    return this;
  }

   /**
   * Get givenBy
   * @return givenBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public APIEmployeeLookup getGivenBy() {
    return givenBy;
  }


  public void setGivenBy(APIEmployeeLookup givenBy) {
    
    
    
    this.givenBy = givenBy;
  }


  public APIPraise givenOn(OffsetDateTime givenOn) {
    
    
    
    
    this.givenOn = givenOn;
    return this;
  }

   /**
   * Get givenOn
   * @return givenOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getGivenOn() {
    return givenOn;
  }


  public void setGivenOn(OffsetDateTime givenOn) {
    
    
    
    this.givenOn = givenOn;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the APIPraise instance itself
   */
  public APIPraise putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIPraise apIPraise = (APIPraise) o;
    return Objects.equals(this.id, apIPraise.id) &&
        Objects.equals(this.feedback, apIPraise.feedback) &&
        Objects.equals(this.badge, apIPraise.badge) &&
        Objects.equals(this.employees, apIPraise.employees) &&
        Objects.equals(this.givenBy, apIPraise.givenBy) &&
        Objects.equals(this.givenOn, apIPraise.givenOn)&&
        Objects.equals(this.additionalProperties, apIPraise.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, feedback, badge, employees, givenBy, givenOn, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIPraise {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    feedback: ").append(toIndentedString(feedback)).append("\n");
    sb.append("    badge: ").append(toIndentedString(badge)).append("\n");
    sb.append("    employees: ").append(toIndentedString(employees)).append("\n");
    sb.append("    givenBy: ").append(toIndentedString(givenBy)).append("\n");
    sb.append("    givenOn: ").append(toIndentedString(givenOn)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("feedback");
    openapiFields.add("badge");
    openapiFields.add("employees");
    openapiFields.add("givenBy");
    openapiFields.add("givenOn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to APIPraise
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!APIPraise.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APIPraise is not found in the empty JSON string", APIPraise.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonNull() && (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("feedback").isJsonNull() && (jsonObj.get("feedback") != null && !jsonObj.get("feedback").isJsonNull()) && !jsonObj.get("feedback").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feedback` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feedback").toString()));
      }
      // validate the optional field `badge`
      if (jsonObj.get("badge") != null && !jsonObj.get("badge").isJsonNull()) {
        APIBadgeLookup.validateJsonObject(jsonObj.getAsJsonObject("badge"));
      }
      if (jsonObj.get("employees") != null && !jsonObj.get("employees").isJsonNull()) {
        JsonArray jsonArrayemployees = jsonObj.getAsJsonArray("employees");
        if (jsonArrayemployees != null) {
          // ensure the json data is an array
          if (!jsonObj.get("employees").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `employees` to be an array in the JSON string but got `%s`", jsonObj.get("employees").toString()));
          }

          // validate the optional field `employees` (array)
          for (int i = 0; i < jsonArrayemployees.size(); i++) {
            APIEmployeeLookup.validateJsonObject(jsonArrayemployees.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `givenBy`
      if (jsonObj.get("givenBy") != null && !jsonObj.get("givenBy").isJsonNull()) {
        APIEmployeeLookup.validateJsonObject(jsonObj.getAsJsonObject("givenBy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APIPraise.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APIPraise' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APIPraise> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APIPraise.class));

       return (TypeAdapter<T>) new TypeAdapter<APIPraise>() {
           @Override
           public void write(JsonWriter out, APIPraise value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public APIPraise read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             APIPraise instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of APIPraise given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of APIPraise
  * @throws IOException if the JSON string is invalid with respect to APIPraise
  */
  public static APIPraise fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APIPraise.class);
  }

 /**
  * Convert an instance of APIPraise to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

