/*
 * Requisition
 * Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CustomField;
import com.konfigthis.client.model.JobType;
import com.konfigthis.client.model.ReplacementEmployee;
import com.konfigthis.client.model.RequisitionRequestStatus;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * RequisitionRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class RequisitionRequest {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_REQUISITION_FOR = "requisitionFor";
  @SerializedName(SERIALIZED_NAME_REQUISITION_FOR)
  private String requisitionFor;

  public static final String SERIALIZED_NAME_JOB_NUMBER = "jobNumber";
  @SerializedName(SERIALIZED_NAME_JOB_NUMBER)
  private String jobNumber;

  public static final String SERIALIZED_NAME_DEPARTMENT = "department";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT)
  private String department;

  public static final String SERIALIZED_NAME_SUB_DEPARTMENT = "subDepartment";
  @SerializedName(SERIALIZED_NAME_SUB_DEPARTMENT)
  private String subDepartment;

  public static final String SERIALIZED_NAME_REQUESTED_BY = "requestedBy";
  @SerializedName(SERIALIZED_NAME_REQUESTED_BY)
  private String requestedBy;

  public static final String SERIALIZED_NAME_REQUESTED_ON = "requestedOn";
  @SerializedName(SERIALIZED_NAME_REQUESTED_ON)
  private OffsetDateTime requestedOn;

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private List<String> locations = null;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private RequisitionRequestStatus status;

  public static final String SERIALIZED_NAME_IS_PRIORITY = "isPriority";
  @SerializedName(SERIALIZED_NAME_IS_PRIORITY)
  private Boolean isPriority;

  public static final String SERIALIZED_NAME_BUDGET = "budget";
  @SerializedName(SERIALIZED_NAME_BUDGET)
  private String budget;

  public static final String SERIALIZED_NAME_OPEN_POSITIONS = "openPositions";
  @SerializedName(SERIALIZED_NAME_OPEN_POSITIONS)
  private Integer openPositions;

  public static final String SERIALIZED_NAME_HIRED = "hired";
  @SerializedName(SERIALIZED_NAME_HIRED)
  private Integer hired;

  public static final String SERIALIZED_NAME_REQUISITION_TYPES = "requisitionTypes";
  @SerializedName(SERIALIZED_NAME_REQUISITION_TYPES)
  private List<Integer> requisitionTypes = null;

  public static final String SERIALIZED_NAME_TO_BE_REPLACED = "toBeReplaced";
  @SerializedName(SERIALIZED_NAME_TO_BE_REPLACED)
  private List<ReplacementEmployee> toBeReplaced = null;

  public static final String SERIALIZED_NAME_JOB_TYPE = "jobType";
  @SerializedName(SERIALIZED_NAME_JOB_TYPE)
  private JobType jobType;

  public static final String SERIALIZED_NAME_TARGET_HIRING_DATE = "targetHiringDate";
  @SerializedName(SERIALIZED_NAME_TARGET_HIRING_DATE)
  private OffsetDateTime targetHiringDate;

  public static final String SERIALIZED_NAME_IS_ARCHIVED = "isArchived";
  @SerializedName(SERIALIZED_NAME_IS_ARCHIVED)
  private Boolean isArchived;

  public static final String SERIALIZED_NAME_ADDITIONAL_COMMENTS = "additionalComments";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_COMMENTS)
  private String additionalComments;

  public static final String SERIALIZED_NAME_ADDITIONAL_FIELDS = "additionalFields";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_FIELDS)
  private List<CustomField> additionalFields = null;

  public RequisitionRequest() {
  }

  public RequisitionRequest id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public RequisitionRequest requisitionFor(String requisitionFor) {
    
    
    
    
    this.requisitionFor = requisitionFor;
    return this;
  }

   /**
   * Get requisitionFor
   * @return requisitionFor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRequisitionFor() {
    return requisitionFor;
  }


  public void setRequisitionFor(String requisitionFor) {
    
    
    
    this.requisitionFor = requisitionFor;
  }


  public RequisitionRequest jobNumber(String jobNumber) {
    
    
    
    
    this.jobNumber = jobNumber;
    return this;
  }

   /**
   * Get jobNumber
   * @return jobNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getJobNumber() {
    return jobNumber;
  }


  public void setJobNumber(String jobNumber) {
    
    
    
    this.jobNumber = jobNumber;
  }


  public RequisitionRequest department(String department) {
    
    
    
    
    this.department = department;
    return this;
  }

   /**
   * Get department
   * @return department
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDepartment() {
    return department;
  }


  public void setDepartment(String department) {
    
    
    
    this.department = department;
  }


  public RequisitionRequest subDepartment(String subDepartment) {
    
    
    
    
    this.subDepartment = subDepartment;
    return this;
  }

   /**
   * Get subDepartment
   * @return subDepartment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSubDepartment() {
    return subDepartment;
  }


  public void setSubDepartment(String subDepartment) {
    
    
    
    this.subDepartment = subDepartment;
  }


  public RequisitionRequest requestedBy(String requestedBy) {
    
    
    
    
    this.requestedBy = requestedBy;
    return this;
  }

   /**
   * Get requestedBy
   * @return requestedBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRequestedBy() {
    return requestedBy;
  }


  public void setRequestedBy(String requestedBy) {
    
    
    
    this.requestedBy = requestedBy;
  }


  public RequisitionRequest requestedOn(OffsetDateTime requestedOn) {
    
    
    
    
    this.requestedOn = requestedOn;
    return this;
  }

   /**
   * Get requestedOn
   * @return requestedOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getRequestedOn() {
    return requestedOn;
  }


  public void setRequestedOn(OffsetDateTime requestedOn) {
    
    
    
    this.requestedOn = requestedOn;
  }


  public RequisitionRequest locations(List<String> locations) {
    
    
    
    
    this.locations = locations;
    return this;
  }

  public RequisitionRequest addLocationsItem(String locationsItem) {
    if (this.locations == null) {
      this.locations = new ArrayList<>();
    }
    this.locations.add(locationsItem);
    return this;
  }

   /**
   * Get locations
   * @return locations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getLocations() {
    return locations;
  }


  public void setLocations(List<String> locations) {
    
    
    
    this.locations = locations;
  }


  public RequisitionRequest status(RequisitionRequestStatus status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RequisitionRequestStatus getStatus() {
    return status;
  }


  public void setStatus(RequisitionRequestStatus status) {
    
    
    
    this.status = status;
  }


  public RequisitionRequest isPriority(Boolean isPriority) {
    
    
    
    
    this.isPriority = isPriority;
    return this;
  }

   /**
   * Get isPriority
   * @return isPriority
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsPriority() {
    return isPriority;
  }


  public void setIsPriority(Boolean isPriority) {
    
    
    
    this.isPriority = isPriority;
  }


  public RequisitionRequest budget(String budget) {
    
    
    
    
    this.budget = budget;
    return this;
  }

   /**
   * Get budget
   * @return budget
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBudget() {
    return budget;
  }


  public void setBudget(String budget) {
    
    
    
    this.budget = budget;
  }


  public RequisitionRequest openPositions(Integer openPositions) {
    
    
    
    
    this.openPositions = openPositions;
    return this;
  }

   /**
   * Get openPositions
   * @return openPositions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getOpenPositions() {
    return openPositions;
  }


  public void setOpenPositions(Integer openPositions) {
    
    
    
    this.openPositions = openPositions;
  }


  public RequisitionRequest hired(Integer hired) {
    
    
    
    
    this.hired = hired;
    return this;
  }

   /**
   * Get hired
   * @return hired
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getHired() {
    return hired;
  }


  public void setHired(Integer hired) {
    
    
    
    this.hired = hired;
  }


  public RequisitionRequest requisitionTypes(List<Integer> requisitionTypes) {
    
    
    
    
    this.requisitionTypes = requisitionTypes;
    return this;
  }

  public RequisitionRequest addRequisitionTypesItem(Integer requisitionTypesItem) {
    if (this.requisitionTypes == null) {
      this.requisitionTypes = new ArrayList<>();
    }
    this.requisitionTypes.add(requisitionTypesItem);
    return this;
  }

   /**
   * Get requisitionTypes
   * @return requisitionTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Integer> getRequisitionTypes() {
    return requisitionTypes;
  }


  public void setRequisitionTypes(List<Integer> requisitionTypes) {
    
    
    
    this.requisitionTypes = requisitionTypes;
  }


  public RequisitionRequest toBeReplaced(List<ReplacementEmployee> toBeReplaced) {
    
    
    
    
    this.toBeReplaced = toBeReplaced;
    return this;
  }

  public RequisitionRequest addToBeReplacedItem(ReplacementEmployee toBeReplacedItem) {
    if (this.toBeReplaced == null) {
      this.toBeReplaced = new ArrayList<>();
    }
    this.toBeReplaced.add(toBeReplacedItem);
    return this;
  }

   /**
   * Get toBeReplaced
   * @return toBeReplaced
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ReplacementEmployee> getToBeReplaced() {
    return toBeReplaced;
  }


  public void setToBeReplaced(List<ReplacementEmployee> toBeReplaced) {
    
    
    
    this.toBeReplaced = toBeReplaced;
  }


  public RequisitionRequest jobType(JobType jobType) {
    
    
    
    
    this.jobType = jobType;
    return this;
  }

   /**
   * Get jobType
   * @return jobType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobType getJobType() {
    return jobType;
  }


  public void setJobType(JobType jobType) {
    
    
    
    this.jobType = jobType;
  }


  public RequisitionRequest targetHiringDate(OffsetDateTime targetHiringDate) {
    
    
    
    
    this.targetHiringDate = targetHiringDate;
    return this;
  }

   /**
   * Get targetHiringDate
   * @return targetHiringDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getTargetHiringDate() {
    return targetHiringDate;
  }


  public void setTargetHiringDate(OffsetDateTime targetHiringDate) {
    
    
    
    this.targetHiringDate = targetHiringDate;
  }


  public RequisitionRequest isArchived(Boolean isArchived) {
    
    
    
    
    this.isArchived = isArchived;
    return this;
  }

   /**
   * Get isArchived
   * @return isArchived
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsArchived() {
    return isArchived;
  }


  public void setIsArchived(Boolean isArchived) {
    
    
    
    this.isArchived = isArchived;
  }


  public RequisitionRequest additionalComments(String additionalComments) {
    
    
    
    
    this.additionalComments = additionalComments;
    return this;
  }

   /**
   * Get additionalComments
   * @return additionalComments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAdditionalComments() {
    return additionalComments;
  }


  public void setAdditionalComments(String additionalComments) {
    
    
    
    this.additionalComments = additionalComments;
  }


  public RequisitionRequest additionalFields(List<CustomField> additionalFields) {
    
    
    
    
    this.additionalFields = additionalFields;
    return this;
  }

  public RequisitionRequest addAdditionalFieldsItem(CustomField additionalFieldsItem) {
    if (this.additionalFields == null) {
      this.additionalFields = new ArrayList<>();
    }
    this.additionalFields.add(additionalFieldsItem);
    return this;
  }

   /**
   * Get additionalFields
   * @return additionalFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CustomField> getAdditionalFields() {
    return additionalFields;
  }


  public void setAdditionalFields(List<CustomField> additionalFields) {
    
    
    
    this.additionalFields = additionalFields;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the RequisitionRequest instance itself
   */
  public RequisitionRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequisitionRequest requisitionRequest = (RequisitionRequest) o;
    return Objects.equals(this.id, requisitionRequest.id) &&
        Objects.equals(this.requisitionFor, requisitionRequest.requisitionFor) &&
        Objects.equals(this.jobNumber, requisitionRequest.jobNumber) &&
        Objects.equals(this.department, requisitionRequest.department) &&
        Objects.equals(this.subDepartment, requisitionRequest.subDepartment) &&
        Objects.equals(this.requestedBy, requisitionRequest.requestedBy) &&
        Objects.equals(this.requestedOn, requisitionRequest.requestedOn) &&
        Objects.equals(this.locations, requisitionRequest.locations) &&
        Objects.equals(this.status, requisitionRequest.status) &&
        Objects.equals(this.isPriority, requisitionRequest.isPriority) &&
        Objects.equals(this.budget, requisitionRequest.budget) &&
        Objects.equals(this.openPositions, requisitionRequest.openPositions) &&
        Objects.equals(this.hired, requisitionRequest.hired) &&
        Objects.equals(this.requisitionTypes, requisitionRequest.requisitionTypes) &&
        Objects.equals(this.toBeReplaced, requisitionRequest.toBeReplaced) &&
        Objects.equals(this.jobType, requisitionRequest.jobType) &&
        Objects.equals(this.targetHiringDate, requisitionRequest.targetHiringDate) &&
        Objects.equals(this.isArchived, requisitionRequest.isArchived) &&
        Objects.equals(this.additionalComments, requisitionRequest.additionalComments) &&
        Objects.equals(this.additionalFields, requisitionRequest.additionalFields)&&
        Objects.equals(this.additionalProperties, requisitionRequest.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, requisitionFor, jobNumber, department, subDepartment, requestedBy, requestedOn, locations, status, isPriority, budget, openPositions, hired, requisitionTypes, toBeReplaced, jobType, targetHiringDate, isArchived, additionalComments, additionalFields, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequisitionRequest {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    requisitionFor: ").append(toIndentedString(requisitionFor)).append("\n");
    sb.append("    jobNumber: ").append(toIndentedString(jobNumber)).append("\n");
    sb.append("    department: ").append(toIndentedString(department)).append("\n");
    sb.append("    subDepartment: ").append(toIndentedString(subDepartment)).append("\n");
    sb.append("    requestedBy: ").append(toIndentedString(requestedBy)).append("\n");
    sb.append("    requestedOn: ").append(toIndentedString(requestedOn)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    isPriority: ").append(toIndentedString(isPriority)).append("\n");
    sb.append("    budget: ").append(toIndentedString(budget)).append("\n");
    sb.append("    openPositions: ").append(toIndentedString(openPositions)).append("\n");
    sb.append("    hired: ").append(toIndentedString(hired)).append("\n");
    sb.append("    requisitionTypes: ").append(toIndentedString(requisitionTypes)).append("\n");
    sb.append("    toBeReplaced: ").append(toIndentedString(toBeReplaced)).append("\n");
    sb.append("    jobType: ").append(toIndentedString(jobType)).append("\n");
    sb.append("    targetHiringDate: ").append(toIndentedString(targetHiringDate)).append("\n");
    sb.append("    isArchived: ").append(toIndentedString(isArchived)).append("\n");
    sb.append("    additionalComments: ").append(toIndentedString(additionalComments)).append("\n");
    sb.append("    additionalFields: ").append(toIndentedString(additionalFields)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("requisitionFor");
    openapiFields.add("jobNumber");
    openapiFields.add("department");
    openapiFields.add("subDepartment");
    openapiFields.add("requestedBy");
    openapiFields.add("requestedOn");
    openapiFields.add("locations");
    openapiFields.add("status");
    openapiFields.add("isPriority");
    openapiFields.add("budget");
    openapiFields.add("openPositions");
    openapiFields.add("hired");
    openapiFields.add("requisitionTypes");
    openapiFields.add("toBeReplaced");
    openapiFields.add("jobType");
    openapiFields.add("targetHiringDate");
    openapiFields.add("isArchived");
    openapiFields.add("additionalComments");
    openapiFields.add("additionalFields");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RequisitionRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RequisitionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RequisitionRequest is not found in the empty JSON string", RequisitionRequest.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonNull() && (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("requisitionFor").isJsonNull() && (jsonObj.get("requisitionFor") != null && !jsonObj.get("requisitionFor").isJsonNull()) && !jsonObj.get("requisitionFor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requisitionFor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requisitionFor").toString()));
      }
      if (!jsonObj.get("jobNumber").isJsonNull() && (jsonObj.get("jobNumber") != null && !jsonObj.get("jobNumber").isJsonNull()) && !jsonObj.get("jobNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobNumber").toString()));
      }
      if (!jsonObj.get("department").isJsonNull() && (jsonObj.get("department") != null && !jsonObj.get("department").isJsonNull()) && !jsonObj.get("department").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `department` to be a primitive type in the JSON string but got `%s`", jsonObj.get("department").toString()));
      }
      if (!jsonObj.get("subDepartment").isJsonNull() && (jsonObj.get("subDepartment") != null && !jsonObj.get("subDepartment").isJsonNull()) && !jsonObj.get("subDepartment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subDepartment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subDepartment").toString()));
      }
      if (!jsonObj.get("requestedBy").isJsonNull() && (jsonObj.get("requestedBy") != null && !jsonObj.get("requestedBy").isJsonNull()) && !jsonObj.get("requestedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestedBy").toString()));
      }
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("locations") != null && !jsonObj.get("locations").isJsonNull() && !jsonObj.get("locations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `locations` to be an array in the JSON string or null but got `%s`", jsonObj.get("locations").toString()));
      }
      if (!jsonObj.get("budget").isJsonNull() && (jsonObj.get("budget") != null && !jsonObj.get("budget").isJsonNull()) && !jsonObj.get("budget").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `budget` to be a primitive type in the JSON string but got `%s`", jsonObj.get("budget").toString()));
      }
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("requisitionTypes") != null && !jsonObj.get("requisitionTypes").isJsonNull() && !jsonObj.get("requisitionTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `requisitionTypes` to be an array in the JSON string or null but got `%s`", jsonObj.get("requisitionTypes").toString()));
      }
      if (jsonObj.get("toBeReplaced") != null && !jsonObj.get("toBeReplaced").isJsonNull()) {
        JsonArray jsonArraytoBeReplaced = jsonObj.getAsJsonArray("toBeReplaced");
        if (jsonArraytoBeReplaced != null) {
          // ensure the json data is an array
          if (!jsonObj.get("toBeReplaced").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `toBeReplaced` to be an array in the JSON string but got `%s`", jsonObj.get("toBeReplaced").toString()));
          }

          // validate the optional field `toBeReplaced` (array)
          for (int i = 0; i < jsonArraytoBeReplaced.size(); i++) {
            ReplacementEmployee.validateJsonObject(jsonArraytoBeReplaced.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("additionalComments").isJsonNull() && (jsonObj.get("additionalComments") != null && !jsonObj.get("additionalComments").isJsonNull()) && !jsonObj.get("additionalComments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalComments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalComments").toString()));
      }
      if (jsonObj.get("additionalFields") != null && !jsonObj.get("additionalFields").isJsonNull()) {
        JsonArray jsonArrayadditionalFields = jsonObj.getAsJsonArray("additionalFields");
        if (jsonArrayadditionalFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalFields` to be an array in the JSON string but got `%s`", jsonObj.get("additionalFields").toString()));
          }

          // validate the optional field `additionalFields` (array)
          for (int i = 0; i < jsonArrayadditionalFields.size(); i++) {
            CustomField.validateJsonObject(jsonArrayadditionalFields.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RequisitionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RequisitionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RequisitionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RequisitionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RequisitionRequest>() {
           @Override
           public void write(JsonWriter out, RequisitionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public RequisitionRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             RequisitionRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RequisitionRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RequisitionRequest
  * @throws IOException if the JSON string is invalid with respect to RequisitionRequest
  */
  public static RequisitionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RequisitionRequest.class);
  }

 /**
  * Convert an instance of RequisitionRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

