/*
 * Requisition
 * Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ExperienceDTO
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ExperienceDTO {
  public static final String SERIALIZED_NAME_COMPANY_NAME = "companyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_DESIGNATION = "designation";
  @SerializedName(SERIALIZED_NAME_DESIGNATION)
  private String designation;

  public static final String SERIALIZED_NAME_IS_CURRENTLY_WORKING = "isCurrentlyWorking";
  @SerializedName(SERIALIZED_NAME_IS_CURRENTLY_WORKING)
  private Boolean isCurrentlyWorking;

  public static final String SERIALIZED_NAME_DATE_OF_JOINING = "dateOfJoining";
  @SerializedName(SERIALIZED_NAME_DATE_OF_JOINING)
  private String dateOfJoining;

  public static final String SERIALIZED_NAME_DATE_OF_RELIEVING = "dateOfRelieving";
  @SerializedName(SERIALIZED_NAME_DATE_OF_RELIEVING)
  private String dateOfRelieving;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public ExperienceDTO() {
  }

  public ExperienceDTO companyName(String companyName) {
    
    
    
    
    this.companyName = companyName;
    return this;
  }

   /**
   * Gets or sets the company name.
   * @return companyName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Gets or sets the company name.")

  public String getCompanyName() {
    return companyName;
  }


  public void setCompanyName(String companyName) {
    
    
    
    this.companyName = companyName;
  }


  public ExperienceDTO designation(String designation) {
    
    
    
    
    this.designation = designation;
    return this;
  }

   /**
   * Gets or sets the designation.
   * @return designation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Gets or sets the designation.")

  public String getDesignation() {
    return designation;
  }


  public void setDesignation(String designation) {
    
    
    
    this.designation = designation;
  }


  public ExperienceDTO isCurrentlyWorking(Boolean isCurrentlyWorking) {
    
    
    
    
    this.isCurrentlyWorking = isCurrentlyWorking;
    return this;
  }

   /**
   * Gets or sets a value indicating whether this instance is currently working.
   * @return isCurrentlyWorking
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Gets or sets a value indicating whether this instance is currently working.")

  public Boolean getIsCurrentlyWorking() {
    return isCurrentlyWorking;
  }


  public void setIsCurrentlyWorking(Boolean isCurrentlyWorking) {
    
    
    
    this.isCurrentlyWorking = isCurrentlyWorking;
  }


  public ExperienceDTO dateOfJoining(String dateOfJoining) {
    
    
    
    
    this.dateOfJoining = dateOfJoining;
    return this;
  }

   /**
   * Gets or sets the date of joining.
   * @return dateOfJoining
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Gets or sets the date of joining.")

  public String getDateOfJoining() {
    return dateOfJoining;
  }


  public void setDateOfJoining(String dateOfJoining) {
    
    
    
    this.dateOfJoining = dateOfJoining;
  }


  public ExperienceDTO dateOfRelieving(String dateOfRelieving) {
    
    
    
    
    this.dateOfRelieving = dateOfRelieving;
    return this;
  }

   /**
   * Gets or sets the date of relieving.
   * @return dateOfRelieving
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Gets or sets the date of relieving.")

  public String getDateOfRelieving() {
    return dateOfRelieving;
  }


  public void setDateOfRelieving(String dateOfRelieving) {
    
    
    
    this.dateOfRelieving = dateOfRelieving;
  }


  public ExperienceDTO location(String location) {
    
    
    
    
    this.location = location;
    return this;
  }

   /**
   * Gets or sets the location.
   * @return location
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Gets or sets the location.")

  public String getLocation() {
    return location;
  }


  public void setLocation(String location) {
    
    
    
    this.location = location;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ExperienceDTO instance itself
   */
  public ExperienceDTO putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExperienceDTO experienceDTO = (ExperienceDTO) o;
    return Objects.equals(this.companyName, experienceDTO.companyName) &&
        Objects.equals(this.designation, experienceDTO.designation) &&
        Objects.equals(this.isCurrentlyWorking, experienceDTO.isCurrentlyWorking) &&
        Objects.equals(this.dateOfJoining, experienceDTO.dateOfJoining) &&
        Objects.equals(this.dateOfRelieving, experienceDTO.dateOfRelieving) &&
        Objects.equals(this.location, experienceDTO.location)&&
        Objects.equals(this.additionalProperties, experienceDTO.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(companyName, designation, isCurrentlyWorking, dateOfJoining, dateOfRelieving, location, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExperienceDTO {\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    designation: ").append(toIndentedString(designation)).append("\n");
    sb.append("    isCurrentlyWorking: ").append(toIndentedString(isCurrentlyWorking)).append("\n");
    sb.append("    dateOfJoining: ").append(toIndentedString(dateOfJoining)).append("\n");
    sb.append("    dateOfRelieving: ").append(toIndentedString(dateOfRelieving)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("companyName");
    openapiFields.add("designation");
    openapiFields.add("isCurrentlyWorking");
    openapiFields.add("dateOfJoining");
    openapiFields.add("dateOfRelieving");
    openapiFields.add("location");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ExperienceDTO
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ExperienceDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExperienceDTO is not found in the empty JSON string", ExperienceDTO.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("companyName").isJsonNull() && (jsonObj.get("companyName") != null && !jsonObj.get("companyName").isJsonNull()) && !jsonObj.get("companyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyName").toString()));
      }
      if (!jsonObj.get("designation").isJsonNull() && (jsonObj.get("designation") != null && !jsonObj.get("designation").isJsonNull()) && !jsonObj.get("designation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `designation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("designation").toString()));
      }
      if (!jsonObj.get("dateOfJoining").isJsonNull() && (jsonObj.get("dateOfJoining") != null && !jsonObj.get("dateOfJoining").isJsonNull()) && !jsonObj.get("dateOfJoining").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateOfJoining` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateOfJoining").toString()));
      }
      if (!jsonObj.get("dateOfRelieving").isJsonNull() && (jsonObj.get("dateOfRelieving") != null && !jsonObj.get("dateOfRelieving").isJsonNull()) && !jsonObj.get("dateOfRelieving").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateOfRelieving` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateOfRelieving").toString()));
      }
      if (!jsonObj.get("location").isJsonNull() && (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExperienceDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExperienceDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExperienceDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExperienceDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<ExperienceDTO>() {
           @Override
           public void write(JsonWriter out, ExperienceDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ExperienceDTO read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ExperienceDTO instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExperienceDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExperienceDTO
  * @throws IOException if the JSON string is invalid with respect to ExperienceDTO
  */
  public static ExperienceDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExperienceDTO.class);
  }

 /**
  * Convert an instance of ExperienceDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

