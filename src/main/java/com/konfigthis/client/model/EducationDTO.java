/*
 * Requisition
 * Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EducationDTO
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EducationDTO {
  public static final String SERIALIZED_NAME_DEGREE = "degree";
  @SerializedName(SERIALIZED_NAME_DEGREE)
  private String degree;

  public static final String SERIALIZED_NAME_BRANCH = "branch";
  @SerializedName(SERIALIZED_NAME_BRANCH)
  private String branch;

  public static final String SERIALIZED_NAME_DATE_OF_JOINING = "dateOfJoining";
  @SerializedName(SERIALIZED_NAME_DATE_OF_JOINING)
  private String dateOfJoining;

  public static final String SERIALIZED_NAME_DATE_OF_COMPLETION = "dateOfCompletion";
  @SerializedName(SERIALIZED_NAME_DATE_OF_COMPLETION)
  private String dateOfCompletion;

  public static final String SERIALIZED_NAME_UNIVERSITY = "university";
  @SerializedName(SERIALIZED_NAME_UNIVERSITY)
  private String university;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public EducationDTO() {
  }

  public EducationDTO degree(String degree) {
    
    
    
    
    this.degree = degree;
    return this;
  }

   /**
   * Gets or sets the degree.
   * @return degree
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Gets or sets the degree.")

  public String getDegree() {
    return degree;
  }


  public void setDegree(String degree) {
    
    
    
    this.degree = degree;
  }


  public EducationDTO branch(String branch) {
    
    
    
    
    this.branch = branch;
    return this;
  }

   /**
   * Gets or sets the branch.
   * @return branch
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Gets or sets the branch.")

  public String getBranch() {
    return branch;
  }


  public void setBranch(String branch) {
    
    
    
    this.branch = branch;
  }


  public EducationDTO dateOfJoining(String dateOfJoining) {
    
    
    
    
    this.dateOfJoining = dateOfJoining;
    return this;
  }

   /**
   * Gets or sets the date of joining.
   * @return dateOfJoining
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Gets or sets the date of joining.")

  public String getDateOfJoining() {
    return dateOfJoining;
  }


  public void setDateOfJoining(String dateOfJoining) {
    
    
    
    this.dateOfJoining = dateOfJoining;
  }


  public EducationDTO dateOfCompletion(String dateOfCompletion) {
    
    
    
    
    this.dateOfCompletion = dateOfCompletion;
    return this;
  }

   /**
   * Gets or sets the date of completion.
   * @return dateOfCompletion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Gets or sets the date of completion.")

  public String getDateOfCompletion() {
    return dateOfCompletion;
  }


  public void setDateOfCompletion(String dateOfCompletion) {
    
    
    
    this.dateOfCompletion = dateOfCompletion;
  }


  public EducationDTO university(String university) {
    
    
    
    
    this.university = university;
    return this;
  }

   /**
   * Gets or sets the university.
   * @return university
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Gets or sets the university.")

  public String getUniversity() {
    return university;
  }


  public void setUniversity(String university) {
    
    
    
    this.university = university;
  }


  public EducationDTO location(String location) {
    
    
    
    
    this.location = location;
    return this;
  }

   /**
   * Gets or sets the location.
   * @return location
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Gets or sets the location.")

  public String getLocation() {
    return location;
  }


  public void setLocation(String location) {
    
    
    
    this.location = location;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EducationDTO instance itself
   */
  public EducationDTO putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EducationDTO educationDTO = (EducationDTO) o;
    return Objects.equals(this.degree, educationDTO.degree) &&
        Objects.equals(this.branch, educationDTO.branch) &&
        Objects.equals(this.dateOfJoining, educationDTO.dateOfJoining) &&
        Objects.equals(this.dateOfCompletion, educationDTO.dateOfCompletion) &&
        Objects.equals(this.university, educationDTO.university) &&
        Objects.equals(this.location, educationDTO.location)&&
        Objects.equals(this.additionalProperties, educationDTO.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(degree, branch, dateOfJoining, dateOfCompletion, university, location, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EducationDTO {\n");
    sb.append("    degree: ").append(toIndentedString(degree)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    dateOfJoining: ").append(toIndentedString(dateOfJoining)).append("\n");
    sb.append("    dateOfCompletion: ").append(toIndentedString(dateOfCompletion)).append("\n");
    sb.append("    university: ").append(toIndentedString(university)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("degree");
    openapiFields.add("branch");
    openapiFields.add("dateOfJoining");
    openapiFields.add("dateOfCompletion");
    openapiFields.add("university");
    openapiFields.add("location");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EducationDTO
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EducationDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EducationDTO is not found in the empty JSON string", EducationDTO.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("degree").isJsonNull() && (jsonObj.get("degree") != null && !jsonObj.get("degree").isJsonNull()) && !jsonObj.get("degree").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `degree` to be a primitive type in the JSON string but got `%s`", jsonObj.get("degree").toString()));
      }
      if (!jsonObj.get("branch").isJsonNull() && (jsonObj.get("branch") != null && !jsonObj.get("branch").isJsonNull()) && !jsonObj.get("branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branch").toString()));
      }
      if (!jsonObj.get("dateOfJoining").isJsonNull() && (jsonObj.get("dateOfJoining") != null && !jsonObj.get("dateOfJoining").isJsonNull()) && !jsonObj.get("dateOfJoining").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateOfJoining` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateOfJoining").toString()));
      }
      if (!jsonObj.get("dateOfCompletion").isJsonNull() && (jsonObj.get("dateOfCompletion") != null && !jsonObj.get("dateOfCompletion").isJsonNull()) && !jsonObj.get("dateOfCompletion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateOfCompletion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateOfCompletion").toString()));
      }
      if (!jsonObj.get("university").isJsonNull() && (jsonObj.get("university") != null && !jsonObj.get("university").isJsonNull()) && !jsonObj.get("university").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `university` to be a primitive type in the JSON string but got `%s`", jsonObj.get("university").toString()));
      }
      if (!jsonObj.get("location").isJsonNull() && (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EducationDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EducationDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EducationDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EducationDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<EducationDTO>() {
           @Override
           public void write(JsonWriter out, EducationDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EducationDTO read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EducationDTO instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EducationDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EducationDTO
  * @throws IOException if the JSON string is invalid with respect to EducationDTO
  */
  public static EducationDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EducationDTO.class);
  }

 /**
  * Convert an instance of EducationDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

