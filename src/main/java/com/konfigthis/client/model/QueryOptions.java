/*
 * Requisition
 * Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.FilteringOptions;
import com.konfigthis.client.model.PagingOptions;
import com.konfigthis.client.model.SortingOptions;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Class query options. Used to pass database query options
 */
@ApiModel(description = "Class query options. Used to pass database query options")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class QueryOptions {
  public static final String SERIALIZED_NAME_PAGING_OPTIONS = "pagingOptions";
  @SerializedName(SERIALIZED_NAME_PAGING_OPTIONS)
  private PagingOptions pagingOptions;

  public static final String SERIALIZED_NAME_SORTING_OPTIONS = "sortingOptions";
  @SerializedName(SERIALIZED_NAME_SORTING_OPTIONS)
  private SortingOptions sortingOptions;

  public static final String SERIALIZED_NAME_FILTER_OPTIONS = "filterOptions";
  @SerializedName(SERIALIZED_NAME_FILTER_OPTIONS)
  private FilteringOptions filterOptions;

  public static final String SERIALIZED_NAME_SEARCHABLE_OPTIONS = "searchableOptions";
  @SerializedName(SERIALIZED_NAME_SEARCHABLE_OPTIONS)
  private List<String> searchableOptions = null;

  public static final String SERIALIZED_NAME_FIELDS_TO_RETURN = "fieldsToReturn";
  @SerializedName(SERIALIZED_NAME_FIELDS_TO_RETURN)
  private List<String> fieldsToReturn = null;

  public QueryOptions() {
  }

  public QueryOptions pagingOptions(PagingOptions pagingOptions) {
    
    
    
    
    this.pagingOptions = pagingOptions;
    return this;
  }

   /**
   * Get pagingOptions
   * @return pagingOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PagingOptions getPagingOptions() {
    return pagingOptions;
  }


  public void setPagingOptions(PagingOptions pagingOptions) {
    
    
    
    this.pagingOptions = pagingOptions;
  }


  public QueryOptions sortingOptions(SortingOptions sortingOptions) {
    
    
    
    
    this.sortingOptions = sortingOptions;
    return this;
  }

   /**
   * Get sortingOptions
   * @return sortingOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SortingOptions getSortingOptions() {
    return sortingOptions;
  }


  public void setSortingOptions(SortingOptions sortingOptions) {
    
    
    
    this.sortingOptions = sortingOptions;
  }


  public QueryOptions filterOptions(FilteringOptions filterOptions) {
    
    
    
    
    this.filterOptions = filterOptions;
    return this;
  }

   /**
   * Get filterOptions
   * @return filterOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FilteringOptions getFilterOptions() {
    return filterOptions;
  }


  public void setFilterOptions(FilteringOptions filterOptions) {
    
    
    
    this.filterOptions = filterOptions;
  }


  public QueryOptions searchableOptions(List<String> searchableOptions) {
    
    
    
    
    this.searchableOptions = searchableOptions;
    return this;
  }

  public QueryOptions addSearchableOptionsItem(String searchableOptionsItem) {
    if (this.searchableOptions == null) {
      this.searchableOptions = new ArrayList<>();
    }
    this.searchableOptions.add(searchableOptionsItem);
    return this;
  }

   /**
   * Get searchableOptions
   * @return searchableOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getSearchableOptions() {
    return searchableOptions;
  }


  public void setSearchableOptions(List<String> searchableOptions) {
    
    
    
    this.searchableOptions = searchableOptions;
  }


  public QueryOptions fieldsToReturn(List<String> fieldsToReturn) {
    
    
    
    
    this.fieldsToReturn = fieldsToReturn;
    return this;
  }

  public QueryOptions addFieldsToReturnItem(String fieldsToReturnItem) {
    if (this.fieldsToReturn == null) {
      this.fieldsToReturn = new ArrayList<>();
    }
    this.fieldsToReturn.add(fieldsToReturnItem);
    return this;
  }

   /**
   * Get fieldsToReturn
   * @return fieldsToReturn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getFieldsToReturn() {
    return fieldsToReturn;
  }


  public void setFieldsToReturn(List<String> fieldsToReturn) {
    
    
    
    this.fieldsToReturn = fieldsToReturn;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the QueryOptions instance itself
   */
  public QueryOptions putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryOptions queryOptions = (QueryOptions) o;
    return Objects.equals(this.pagingOptions, queryOptions.pagingOptions) &&
        Objects.equals(this.sortingOptions, queryOptions.sortingOptions) &&
        Objects.equals(this.filterOptions, queryOptions.filterOptions) &&
        Objects.equals(this.searchableOptions, queryOptions.searchableOptions) &&
        Objects.equals(this.fieldsToReturn, queryOptions.fieldsToReturn)&&
        Objects.equals(this.additionalProperties, queryOptions.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(pagingOptions, sortingOptions, filterOptions, searchableOptions, fieldsToReturn, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryOptions {\n");
    sb.append("    pagingOptions: ").append(toIndentedString(pagingOptions)).append("\n");
    sb.append("    sortingOptions: ").append(toIndentedString(sortingOptions)).append("\n");
    sb.append("    filterOptions: ").append(toIndentedString(filterOptions)).append("\n");
    sb.append("    searchableOptions: ").append(toIndentedString(searchableOptions)).append("\n");
    sb.append("    fieldsToReturn: ").append(toIndentedString(fieldsToReturn)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pagingOptions");
    openapiFields.add("sortingOptions");
    openapiFields.add("filterOptions");
    openapiFields.add("searchableOptions");
    openapiFields.add("fieldsToReturn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to QueryOptions
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!QueryOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryOptions is not found in the empty JSON string", QueryOptions.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `pagingOptions`
      if (jsonObj.get("pagingOptions") != null && !jsonObj.get("pagingOptions").isJsonNull()) {
        PagingOptions.validateJsonObject(jsonObj.getAsJsonObject("pagingOptions"));
      }
      // validate the optional field `sortingOptions`
      if (jsonObj.get("sortingOptions") != null && !jsonObj.get("sortingOptions").isJsonNull()) {
        SortingOptions.validateJsonObject(jsonObj.getAsJsonObject("sortingOptions"));
      }
      // validate the optional field `filterOptions`
      if (jsonObj.get("filterOptions") != null && !jsonObj.get("filterOptions").isJsonNull()) {
        FilteringOptions.validateJsonObject(jsonObj.getAsJsonObject("filterOptions"));
      }
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("searchableOptions") != null && !jsonObj.get("searchableOptions").isJsonNull() && !jsonObj.get("searchableOptions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchableOptions` to be an array in the JSON string or null but got `%s`", jsonObj.get("searchableOptions").toString()));
      }
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("fieldsToReturn") != null && !jsonObj.get("fieldsToReturn").isJsonNull() && !jsonObj.get("fieldsToReturn").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldsToReturn` to be an array in the JSON string or null but got `%s`", jsonObj.get("fieldsToReturn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryOptions>() {
           @Override
           public void write(JsonWriter out, QueryOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryOptions read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             QueryOptions instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of QueryOptions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of QueryOptions
  * @throws IOException if the JSON string is invalid with respect to QueryOptions
  */
  public static QueryOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryOptions.class);
  }

 /**
  * Convert an instance of QueryOptions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

