/*
 * Requisition
 * Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.TimePeriod;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * LeaveTypeSelection
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LeaveTypeSelection {
  public static final String SERIALIZED_NAME_LEAVE_TYPE_IDENTIFIER = "leaveTypeIdentifier";
  @SerializedName(SERIALIZED_NAME_LEAVE_TYPE_IDENTIFIER)
  private String leaveTypeIdentifier;

  public static final String SERIALIZED_NAME_LEAVE_TYPE_NAME = "leaveTypeName";
  @SerializedName(SERIALIZED_NAME_LEAVE_TYPE_NAME)
  private String leaveTypeName;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Float count;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private TimePeriod duration;

  public static final String SERIALIZED_NAME_LEAVE_TYPE_ID = "leaveTypeId";
  @SerializedName(SERIALIZED_NAME_LEAVE_TYPE_ID)
  private Integer leaveTypeId;

  public LeaveTypeSelection() {
  }

  public LeaveTypeSelection leaveTypeIdentifier(String leaveTypeIdentifier) {
    
    
    
    
    this.leaveTypeIdentifier = leaveTypeIdentifier;
    return this;
  }

   /**
   * Get leaveTypeIdentifier
   * @return leaveTypeIdentifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLeaveTypeIdentifier() {
    return leaveTypeIdentifier;
  }


  public void setLeaveTypeIdentifier(String leaveTypeIdentifier) {
    
    
    
    this.leaveTypeIdentifier = leaveTypeIdentifier;
  }


  public LeaveTypeSelection leaveTypeName(String leaveTypeName) {
    
    
    
    
    this.leaveTypeName = leaveTypeName;
    return this;
  }

   /**
   * Get leaveTypeName
   * @return leaveTypeName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLeaveTypeName() {
    return leaveTypeName;
  }


  public void setLeaveTypeName(String leaveTypeName) {
    
    
    
    this.leaveTypeName = leaveTypeName;
  }


  public LeaveTypeSelection count(Float count) {
    
    
    
    
    this.count = count;
    return this;
  }

   /**
   * Get count
   * @return count
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Float getCount() {
    return count;
  }


  public void setCount(Float count) {
    
    
    
    this.count = count;
  }


  public LeaveTypeSelection duration(TimePeriod duration) {
    
    
    
    
    this.duration = duration;
    return this;
  }

   /**
   * Get duration
   * @return duration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TimePeriod getDuration() {
    return duration;
  }


  public void setDuration(TimePeriod duration) {
    
    
    
    this.duration = duration;
  }


  public LeaveTypeSelection leaveTypeId(Integer leaveTypeId) {
    
    
    
    
    this.leaveTypeId = leaveTypeId;
    return this;
  }

   /**
   * Get leaveTypeId
   * @return leaveTypeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getLeaveTypeId() {
    return leaveTypeId;
  }


  public void setLeaveTypeId(Integer leaveTypeId) {
    
    
    
    this.leaveTypeId = leaveTypeId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LeaveTypeSelection instance itself
   */
  public LeaveTypeSelection putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LeaveTypeSelection leaveTypeSelection = (LeaveTypeSelection) o;
    return Objects.equals(this.leaveTypeIdentifier, leaveTypeSelection.leaveTypeIdentifier) &&
        Objects.equals(this.leaveTypeName, leaveTypeSelection.leaveTypeName) &&
        Objects.equals(this.count, leaveTypeSelection.count) &&
        Objects.equals(this.duration, leaveTypeSelection.duration) &&
        Objects.equals(this.leaveTypeId, leaveTypeSelection.leaveTypeId)&&
        Objects.equals(this.additionalProperties, leaveTypeSelection.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(leaveTypeIdentifier, leaveTypeName, count, duration, leaveTypeId, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LeaveTypeSelection {\n");
    sb.append("    leaveTypeIdentifier: ").append(toIndentedString(leaveTypeIdentifier)).append("\n");
    sb.append("    leaveTypeName: ").append(toIndentedString(leaveTypeName)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    leaveTypeId: ").append(toIndentedString(leaveTypeId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("leaveTypeIdentifier");
    openapiFields.add("leaveTypeName");
    openapiFields.add("count");
    openapiFields.add("duration");
    openapiFields.add("leaveTypeId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LeaveTypeSelection
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LeaveTypeSelection.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LeaveTypeSelection is not found in the empty JSON string", LeaveTypeSelection.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("leaveTypeIdentifier").isJsonNull() && (jsonObj.get("leaveTypeIdentifier") != null && !jsonObj.get("leaveTypeIdentifier").isJsonNull()) && !jsonObj.get("leaveTypeIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leaveTypeIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leaveTypeIdentifier").toString()));
      }
      if (!jsonObj.get("leaveTypeName").isJsonNull() && (jsonObj.get("leaveTypeName") != null && !jsonObj.get("leaveTypeName").isJsonNull()) && !jsonObj.get("leaveTypeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leaveTypeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leaveTypeName").toString()));
      }
      // validate the optional field `duration`
      if (jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) {
        TimePeriod.validateJsonObject(jsonObj.getAsJsonObject("duration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LeaveTypeSelection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LeaveTypeSelection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LeaveTypeSelection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LeaveTypeSelection.class));

       return (TypeAdapter<T>) new TypeAdapter<LeaveTypeSelection>() {
           @Override
           public void write(JsonWriter out, LeaveTypeSelection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LeaveTypeSelection read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LeaveTypeSelection instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LeaveTypeSelection given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LeaveTypeSelection
  * @throws IOException if the JSON string is invalid with respect to LeaveTypeSelection
  */
  public static LeaveTypeSelection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LeaveTypeSelection.class);
  }

 /**
  * Convert an instance of LeaveTypeSelection to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

