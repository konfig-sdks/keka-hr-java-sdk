/*
 * Requisition
 * Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AccountStatus;
import com.konfigthis.client.model.Address;
import com.konfigthis.client.model.BloodGroup;
import com.konfigthis.client.model.ContingentType;
import com.konfigthis.client.model.CustomField;
import com.konfigthis.client.model.Education;
import com.konfigthis.client.model.EmployeeLookup;
import com.konfigthis.client.model.EmploymentStatus;
import com.konfigthis.client.model.ExitStatus;
import com.konfigthis.client.model.ExitType;
import com.konfigthis.client.model.Experience;
import com.konfigthis.client.model.Gender;
import com.konfigthis.client.model.GroupLookup;
import com.konfigthis.client.model.Image;
import com.konfigthis.client.model.InvitationStatus;
import com.konfigthis.client.model.LookupInfo;
import com.konfigthis.client.model.MaritalStatus;
import com.konfigthis.client.model.Relation;
import com.konfigthis.client.model.TimeType;
import com.konfigthis.client.model.WorkerType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EmployeeProfile
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmployeeProfile {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_EMPLOYEE_NUMBER = "employeeNumber";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_NUMBER)
  private String employeeNumber;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_MIDDLE_NAME = "middleName";
  @SerializedName(SERIALIZED_NAME_MIDDLE_NAME)
  private String middleName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private Image image;

  public static final String SERIALIZED_NAME_JOB_TITLE = "jobTitle";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE)
  private LookupInfo jobTitle;

  public static final String SERIALIZED_NAME_SECONDARY_JOB_TITLE = "secondaryJobTitle";
  @SerializedName(SERIALIZED_NAME_SECONDARY_JOB_TITLE)
  private String secondaryJobTitle;

  public static final String SERIALIZED_NAME_REPORTS_TO = "reportsTo";
  @SerializedName(SERIALIZED_NAME_REPORTS_TO)
  private EmployeeLookup reportsTo;

  public static final String SERIALIZED_NAME_L2_MANAGER = "l2Manager";
  @SerializedName(SERIALIZED_NAME_L2_MANAGER)
  private EmployeeLookup l2Manager;

  public static final String SERIALIZED_NAME_DOTTED_LINE_MANAGER = "dottedLineManager";
  @SerializedName(SERIALIZED_NAME_DOTTED_LINE_MANAGER)
  private EmployeeLookup dottedLineManager;

  public static final String SERIALIZED_NAME_CONTINGENT_TYPE = "contingentType";
  @SerializedName(SERIALIZED_NAME_CONTINGENT_TYPE)
  private ContingentType contingentType;

  public static final String SERIALIZED_NAME_TIME_TYPE = "timeType";
  @SerializedName(SERIALIZED_NAME_TIME_TYPE)
  private TimeType timeType;

  public static final String SERIALIZED_NAME_WORKER_TYPE = "workerType";
  @SerializedName(SERIALIZED_NAME_WORKER_TYPE)
  private WorkerType workerType;

  public static final String SERIALIZED_NAME_IS_PRIVATE = "isPrivate";
  @SerializedName(SERIALIZED_NAME_IS_PRIVATE)
  private Boolean isPrivate;

  public static final String SERIALIZED_NAME_IS_PROFILE_COMPLETE = "isProfileComplete";
  @SerializedName(SERIALIZED_NAME_IS_PROFILE_COMPLETE)
  private Boolean isProfileComplete;

  public static final String SERIALIZED_NAME_MARITAL_STATUS = "maritalStatus";
  @SerializedName(SERIALIZED_NAME_MARITAL_STATUS)
  private MaritalStatus maritalStatus;

  public static final String SERIALIZED_NAME_MARRIAGE_DATE = "marriageDate";
  @SerializedName(SERIALIZED_NAME_MARRIAGE_DATE)
  private OffsetDateTime marriageDate;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private Gender gender;

  public static final String SERIALIZED_NAME_JOINING_DATE = "joiningDate";
  @SerializedName(SERIALIZED_NAME_JOINING_DATE)
  private OffsetDateTime joiningDate;

  public static final String SERIALIZED_NAME_PROFESSIONAL_SUMMARY = "professionalSummary";
  @SerializedName(SERIALIZED_NAME_PROFESSIONAL_SUMMARY)
  private String professionalSummary;

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "dateOfBirth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  private OffsetDateTime dateOfBirth;

  public static final String SERIALIZED_NAME_RESIGNATION_SUBMITTED_DATE = "resignationSubmittedDate";
  @SerializedName(SERIALIZED_NAME_RESIGNATION_SUBMITTED_DATE)
  private OffsetDateTime resignationSubmittedDate;

  public static final String SERIALIZED_NAME_EXIT_DATE = "exitDate";
  @SerializedName(SERIALIZED_NAME_EXIT_DATE)
  private OffsetDateTime exitDate;

  public static final String SERIALIZED_NAME_EMPLOYMENT_STATUS = "employmentStatus";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENT_STATUS)
  private EmploymentStatus employmentStatus;

  public static final String SERIALIZED_NAME_ACCOUNT_STATUS = "accountStatus";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_STATUS)
  private AccountStatus accountStatus;

  public static final String SERIALIZED_NAME_INVITATION_STATUS = "invitationStatus";
  @SerializedName(SERIALIZED_NAME_INVITATION_STATUS)
  private InvitationStatus invitationStatus;

  public static final String SERIALIZED_NAME_EXIT_STATUS = "exitStatus";
  @SerializedName(SERIALIZED_NAME_EXIT_STATUS)
  private ExitStatus exitStatus;

  public static final String SERIALIZED_NAME_EXIT_TYPE = "exitType";
  @SerializedName(SERIALIZED_NAME_EXIT_TYPE)
  private ExitType exitType;

  public static final String SERIALIZED_NAME_EXIT_REASON = "exitReason";
  @SerializedName(SERIALIZED_NAME_EXIT_REASON)
  private String exitReason;

  public static final String SERIALIZED_NAME_PERSONAL_EMAIL = "personalEmail";
  @SerializedName(SERIALIZED_NAME_PERSONAL_EMAIL)
  private String personalEmail;

  public static final String SERIALIZED_NAME_WORK_PHONE = "workPhone";
  @SerializedName(SERIALIZED_NAME_WORK_PHONE)
  private String workPhone;

  public static final String SERIALIZED_NAME_HOME_PHONE = "homePhone";
  @SerializedName(SERIALIZED_NAME_HOME_PHONE)
  private String homePhone;

  public static final String SERIALIZED_NAME_MOBILE_PHONE = "mobilePhone";
  @SerializedName(SERIALIZED_NAME_MOBILE_PHONE)
  private String mobilePhone;

  public static final String SERIALIZED_NAME_BLOOD_GROUP = "bloodGroup";
  @SerializedName(SERIALIZED_NAME_BLOOD_GROUP)
  private BloodGroup bloodGroup;

  public static final String SERIALIZED_NAME_ATTENDANCE_NUMBER = "attendanceNumber";
  @SerializedName(SERIALIZED_NAME_ATTENDANCE_NUMBER)
  private String attendanceNumber;

  public static final String SERIALIZED_NAME_PROBATION_END_DATE = "probationEndDate";
  @SerializedName(SERIALIZED_NAME_PROBATION_END_DATE)
  private OffsetDateTime probationEndDate;

  public static final String SERIALIZED_NAME_CURRENT_ADDRESS = "currentAddress";
  @SerializedName(SERIALIZED_NAME_CURRENT_ADDRESS)
  private Address currentAddress;

  public static final String SERIALIZED_NAME_PERMANENT_ADDRESS = "permanentAddress";
  @SerializedName(SERIALIZED_NAME_PERMANENT_ADDRESS)
  private Address permanentAddress;

  public static final String SERIALIZED_NAME_RELATIONS = "relations";
  @SerializedName(SERIALIZED_NAME_RELATIONS)
  private List<Relation> relations = null;

  public static final String SERIALIZED_NAME_EDUCATION_DETAILS = "educationDetails";
  @SerializedName(SERIALIZED_NAME_EDUCATION_DETAILS)
  private List<Education> educationDetails = null;

  public static final String SERIALIZED_NAME_EXPERIENCE_DETAILS = "experienceDetails";
  @SerializedName(SERIALIZED_NAME_EXPERIENCE_DETAILS)
  private List<Experience> experienceDetails = null;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "customFields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private List<CustomField> customFields = null;

  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private List<GroupLookup> groups = null;

  public static final String SERIALIZED_NAME_LEAVE_PLAN_INFO = "leavePlanInfo";
  @SerializedName(SERIALIZED_NAME_LEAVE_PLAN_INFO)
  private LookupInfo leavePlanInfo;

  public static final String SERIALIZED_NAME_BAND_INFO = "bandInfo";
  @SerializedName(SERIALIZED_NAME_BAND_INFO)
  private LookupInfo bandInfo;

  public static final String SERIALIZED_NAME_PAY_GRADE_INFO = "payGradeInfo";
  @SerializedName(SERIALIZED_NAME_PAY_GRADE_INFO)
  private LookupInfo payGradeInfo;

  public static final String SERIALIZED_NAME_SHIFT_POLICY_INFO = "shiftPolicyInfo";
  @SerializedName(SERIALIZED_NAME_SHIFT_POLICY_INFO)
  private LookupInfo shiftPolicyInfo;

  public static final String SERIALIZED_NAME_WEEKLY_OFF_POLICY_INFO = "weeklyOffPolicyInfo";
  @SerializedName(SERIALIZED_NAME_WEEKLY_OFF_POLICY_INFO)
  private LookupInfo weeklyOffPolicyInfo;

  public static final String SERIALIZED_NAME_CAPTURE_SCHEME_INFO = "captureSchemeInfo";
  @SerializedName(SERIALIZED_NAME_CAPTURE_SCHEME_INFO)
  private LookupInfo captureSchemeInfo;

  public static final String SERIALIZED_NAME_TRACKING_POLICY_INFO = "trackingPolicyInfo";
  @SerializedName(SERIALIZED_NAME_TRACKING_POLICY_INFO)
  private LookupInfo trackingPolicyInfo;

  public static final String SERIALIZED_NAME_EXPENSE_POLICY_INFO = "expensePolicyInfo";
  @SerializedName(SERIALIZED_NAME_EXPENSE_POLICY_INFO)
  private LookupInfo expensePolicyInfo;

  public static final String SERIALIZED_NAME_OVERTIME_POLICY_INFO = "overtimePolicyInfo";
  @SerializedName(SERIALIZED_NAME_OVERTIME_POLICY_INFO)
  private LookupInfo overtimePolicyInfo;

  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private String identifier;

  public EmployeeProfile() {
  }

  
  public EmployeeProfile(
     String id
  ) {
    this();
    this.id = id;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getId() {
    return id;
  }




  public EmployeeProfile employeeNumber(String employeeNumber) {
    
    
    
    
    this.employeeNumber = employeeNumber;
    return this;
  }

   /**
   * Get employeeNumber
   * @return employeeNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployeeNumber() {
    return employeeNumber;
  }


  public void setEmployeeNumber(String employeeNumber) {
    
    
    
    this.employeeNumber = employeeNumber;
  }


  public EmployeeProfile firstName(String firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * Get firstName
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    
    this.firstName = firstName;
  }


  public EmployeeProfile middleName(String middleName) {
    
    
    
    
    this.middleName = middleName;
    return this;
  }

   /**
   * Get middleName
   * @return middleName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMiddleName() {
    return middleName;
  }


  public void setMiddleName(String middleName) {
    
    
    
    this.middleName = middleName;
  }


  public EmployeeProfile lastName(String lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Get lastName
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    
    this.lastName = lastName;
  }


  public EmployeeProfile displayName(String displayName) {
    
    
    
    
    this.displayName = displayName;
    return this;
  }

   /**
   * Get displayName
   * @return displayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    
    
    
    this.displayName = displayName;
  }


  public EmployeeProfile email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public EmployeeProfile city(String city) {
    
    
    
    
    this.city = city;
    return this;
  }

   /**
   * Get city
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    
    
    
    this.city = city;
  }


  public EmployeeProfile countryCode(String countryCode) {
    
    
    
    
    this.countryCode = countryCode;
    return this;
  }

   /**
   * Get countryCode
   * @return countryCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCountryCode() {
    return countryCode;
  }


  public void setCountryCode(String countryCode) {
    
    
    
    this.countryCode = countryCode;
  }


  public EmployeeProfile image(Image image) {
    
    
    
    
    this.image = image;
    return this;
  }

   /**
   * Get image
   * @return image
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Image getImage() {
    return image;
  }


  public void setImage(Image image) {
    
    
    
    this.image = image;
  }


  public EmployeeProfile jobTitle(LookupInfo jobTitle) {
    
    
    
    
    this.jobTitle = jobTitle;
    return this;
  }

   /**
   * Get jobTitle
   * @return jobTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LookupInfo getJobTitle() {
    return jobTitle;
  }


  public void setJobTitle(LookupInfo jobTitle) {
    
    
    
    this.jobTitle = jobTitle;
  }


  public EmployeeProfile secondaryJobTitle(String secondaryJobTitle) {
    
    
    
    
    this.secondaryJobTitle = secondaryJobTitle;
    return this;
  }

   /**
   * Get secondaryJobTitle
   * @return secondaryJobTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSecondaryJobTitle() {
    return secondaryJobTitle;
  }


  public void setSecondaryJobTitle(String secondaryJobTitle) {
    
    
    
    this.secondaryJobTitle = secondaryJobTitle;
  }


  public EmployeeProfile reportsTo(EmployeeLookup reportsTo) {
    
    
    
    
    this.reportsTo = reportsTo;
    return this;
  }

   /**
   * Get reportsTo
   * @return reportsTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeLookup getReportsTo() {
    return reportsTo;
  }


  public void setReportsTo(EmployeeLookup reportsTo) {
    
    
    
    this.reportsTo = reportsTo;
  }


  public EmployeeProfile l2Manager(EmployeeLookup l2Manager) {
    
    
    
    
    this.l2Manager = l2Manager;
    return this;
  }

   /**
   * Get l2Manager
   * @return l2Manager
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeLookup getL2Manager() {
    return l2Manager;
  }


  public void setL2Manager(EmployeeLookup l2Manager) {
    
    
    
    this.l2Manager = l2Manager;
  }


  public EmployeeProfile dottedLineManager(EmployeeLookup dottedLineManager) {
    
    
    
    
    this.dottedLineManager = dottedLineManager;
    return this;
  }

   /**
   * Get dottedLineManager
   * @return dottedLineManager
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeLookup getDottedLineManager() {
    return dottedLineManager;
  }


  public void setDottedLineManager(EmployeeLookup dottedLineManager) {
    
    
    
    this.dottedLineManager = dottedLineManager;
  }


  public EmployeeProfile contingentType(ContingentType contingentType) {
    
    
    
    
    this.contingentType = contingentType;
    return this;
  }

   /**
   * Get contingentType
   * @return contingentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ContingentType getContingentType() {
    return contingentType;
  }


  public void setContingentType(ContingentType contingentType) {
    
    
    
    this.contingentType = contingentType;
  }


  public EmployeeProfile timeType(TimeType timeType) {
    
    
    
    
    this.timeType = timeType;
    return this;
  }

   /**
   * Get timeType
   * @return timeType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TimeType getTimeType() {
    return timeType;
  }


  public void setTimeType(TimeType timeType) {
    
    
    
    this.timeType = timeType;
  }


  public EmployeeProfile workerType(WorkerType workerType) {
    
    
    
    
    this.workerType = workerType;
    return this;
  }

   /**
   * Get workerType
   * @return workerType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public WorkerType getWorkerType() {
    return workerType;
  }


  public void setWorkerType(WorkerType workerType) {
    
    
    
    this.workerType = workerType;
  }


  public EmployeeProfile isPrivate(Boolean isPrivate) {
    
    
    
    
    this.isPrivate = isPrivate;
    return this;
  }

   /**
   * Get isPrivate
   * @return isPrivate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsPrivate() {
    return isPrivate;
  }


  public void setIsPrivate(Boolean isPrivate) {
    
    
    
    this.isPrivate = isPrivate;
  }


  public EmployeeProfile isProfileComplete(Boolean isProfileComplete) {
    
    
    
    
    this.isProfileComplete = isProfileComplete;
    return this;
  }

   /**
   * Get isProfileComplete
   * @return isProfileComplete
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsProfileComplete() {
    return isProfileComplete;
  }


  public void setIsProfileComplete(Boolean isProfileComplete) {
    
    
    
    this.isProfileComplete = isProfileComplete;
  }


  public EmployeeProfile maritalStatus(MaritalStatus maritalStatus) {
    
    
    
    
    this.maritalStatus = maritalStatus;
    return this;
  }

   /**
   * Get maritalStatus
   * @return maritalStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MaritalStatus getMaritalStatus() {
    return maritalStatus;
  }


  public void setMaritalStatus(MaritalStatus maritalStatus) {
    
    
    
    this.maritalStatus = maritalStatus;
  }


  public EmployeeProfile marriageDate(OffsetDateTime marriageDate) {
    
    
    
    
    this.marriageDate = marriageDate;
    return this;
  }

   /**
   * Get marriageDate
   * @return marriageDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getMarriageDate() {
    return marriageDate;
  }


  public void setMarriageDate(OffsetDateTime marriageDate) {
    
    
    
    this.marriageDate = marriageDate;
  }


  public EmployeeProfile gender(Gender gender) {
    
    
    
    
    this.gender = gender;
    return this;
  }

   /**
   * Get gender
   * @return gender
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Gender getGender() {
    return gender;
  }


  public void setGender(Gender gender) {
    
    
    
    this.gender = gender;
  }


  public EmployeeProfile joiningDate(OffsetDateTime joiningDate) {
    
    
    
    
    this.joiningDate = joiningDate;
    return this;
  }

   /**
   * Get joiningDate
   * @return joiningDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getJoiningDate() {
    return joiningDate;
  }


  public void setJoiningDate(OffsetDateTime joiningDate) {
    
    
    
    this.joiningDate = joiningDate;
  }


  public EmployeeProfile professionalSummary(String professionalSummary) {
    
    
    
    
    this.professionalSummary = professionalSummary;
    return this;
  }

   /**
   * Get professionalSummary
   * @return professionalSummary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getProfessionalSummary() {
    return professionalSummary;
  }


  public void setProfessionalSummary(String professionalSummary) {
    
    
    
    this.professionalSummary = professionalSummary;
  }


  public EmployeeProfile dateOfBirth(OffsetDateTime dateOfBirth) {
    
    
    
    
    this.dateOfBirth = dateOfBirth;
    return this;
  }

   /**
   * Get dateOfBirth
   * @return dateOfBirth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getDateOfBirth() {
    return dateOfBirth;
  }


  public void setDateOfBirth(OffsetDateTime dateOfBirth) {
    
    
    
    this.dateOfBirth = dateOfBirth;
  }


  public EmployeeProfile resignationSubmittedDate(OffsetDateTime resignationSubmittedDate) {
    
    
    
    
    this.resignationSubmittedDate = resignationSubmittedDate;
    return this;
  }

   /**
   * Get resignationSubmittedDate
   * @return resignationSubmittedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getResignationSubmittedDate() {
    return resignationSubmittedDate;
  }


  public void setResignationSubmittedDate(OffsetDateTime resignationSubmittedDate) {
    
    
    
    this.resignationSubmittedDate = resignationSubmittedDate;
  }


  public EmployeeProfile exitDate(OffsetDateTime exitDate) {
    
    
    
    
    this.exitDate = exitDate;
    return this;
  }

   /**
   * Get exitDate
   * @return exitDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getExitDate() {
    return exitDate;
  }


  public void setExitDate(OffsetDateTime exitDate) {
    
    
    
    this.exitDate = exitDate;
  }


  public EmployeeProfile employmentStatus(EmploymentStatus employmentStatus) {
    
    
    
    
    this.employmentStatus = employmentStatus;
    return this;
  }

   /**
   * Get employmentStatus
   * @return employmentStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmploymentStatus getEmploymentStatus() {
    return employmentStatus;
  }


  public void setEmploymentStatus(EmploymentStatus employmentStatus) {
    
    
    
    this.employmentStatus = employmentStatus;
  }


  public EmployeeProfile accountStatus(AccountStatus accountStatus) {
    
    
    
    
    this.accountStatus = accountStatus;
    return this;
  }

   /**
   * Get accountStatus
   * @return accountStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AccountStatus getAccountStatus() {
    return accountStatus;
  }


  public void setAccountStatus(AccountStatus accountStatus) {
    
    
    
    this.accountStatus = accountStatus;
  }


  public EmployeeProfile invitationStatus(InvitationStatus invitationStatus) {
    
    
    
    
    this.invitationStatus = invitationStatus;
    return this;
  }

   /**
   * Get invitationStatus
   * @return invitationStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public InvitationStatus getInvitationStatus() {
    return invitationStatus;
  }


  public void setInvitationStatus(InvitationStatus invitationStatus) {
    
    
    
    this.invitationStatus = invitationStatus;
  }


  public EmployeeProfile exitStatus(ExitStatus exitStatus) {
    
    
    
    
    this.exitStatus = exitStatus;
    return this;
  }

   /**
   * Get exitStatus
   * @return exitStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ExitStatus getExitStatus() {
    return exitStatus;
  }


  public void setExitStatus(ExitStatus exitStatus) {
    
    
    
    this.exitStatus = exitStatus;
  }


  public EmployeeProfile exitType(ExitType exitType) {
    
    
    
    
    this.exitType = exitType;
    return this;
  }

   /**
   * Get exitType
   * @return exitType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ExitType getExitType() {
    return exitType;
  }


  public void setExitType(ExitType exitType) {
    
    
    
    this.exitType = exitType;
  }


  public EmployeeProfile exitReason(String exitReason) {
    
    
    
    
    this.exitReason = exitReason;
    return this;
  }

   /**
   * Get exitReason
   * @return exitReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getExitReason() {
    return exitReason;
  }


  public void setExitReason(String exitReason) {
    
    
    
    this.exitReason = exitReason;
  }


  public EmployeeProfile personalEmail(String personalEmail) {
    
    
    
    
    this.personalEmail = personalEmail;
    return this;
  }

   /**
   * Get personalEmail
   * @return personalEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPersonalEmail() {
    return personalEmail;
  }


  public void setPersonalEmail(String personalEmail) {
    
    
    
    this.personalEmail = personalEmail;
  }


  public EmployeeProfile workPhone(String workPhone) {
    
    
    
    
    this.workPhone = workPhone;
    return this;
  }

   /**
   * Get workPhone
   * @return workPhone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getWorkPhone() {
    return workPhone;
  }


  public void setWorkPhone(String workPhone) {
    
    
    
    this.workPhone = workPhone;
  }


  public EmployeeProfile homePhone(String homePhone) {
    
    
    
    
    this.homePhone = homePhone;
    return this;
  }

   /**
   * Get homePhone
   * @return homePhone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getHomePhone() {
    return homePhone;
  }


  public void setHomePhone(String homePhone) {
    
    
    
    this.homePhone = homePhone;
  }


  public EmployeeProfile mobilePhone(String mobilePhone) {
    
    
    
    
    this.mobilePhone = mobilePhone;
    return this;
  }

   /**
   * Get mobilePhone
   * @return mobilePhone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMobilePhone() {
    return mobilePhone;
  }


  public void setMobilePhone(String mobilePhone) {
    
    
    
    this.mobilePhone = mobilePhone;
  }


  public EmployeeProfile bloodGroup(BloodGroup bloodGroup) {
    
    
    
    
    this.bloodGroup = bloodGroup;
    return this;
  }

   /**
   * Get bloodGroup
   * @return bloodGroup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BloodGroup getBloodGroup() {
    return bloodGroup;
  }


  public void setBloodGroup(BloodGroup bloodGroup) {
    
    
    
    this.bloodGroup = bloodGroup;
  }


  public EmployeeProfile attendanceNumber(String attendanceNumber) {
    
    
    
    
    this.attendanceNumber = attendanceNumber;
    return this;
  }

   /**
   * Get attendanceNumber
   * @return attendanceNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAttendanceNumber() {
    return attendanceNumber;
  }


  public void setAttendanceNumber(String attendanceNumber) {
    
    
    
    this.attendanceNumber = attendanceNumber;
  }


  public EmployeeProfile probationEndDate(OffsetDateTime probationEndDate) {
    
    
    
    
    this.probationEndDate = probationEndDate;
    return this;
  }

   /**
   * Get probationEndDate
   * @return probationEndDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getProbationEndDate() {
    return probationEndDate;
  }


  public void setProbationEndDate(OffsetDateTime probationEndDate) {
    
    
    
    this.probationEndDate = probationEndDate;
  }


  public EmployeeProfile currentAddress(Address currentAddress) {
    
    
    
    
    this.currentAddress = currentAddress;
    return this;
  }

   /**
   * Get currentAddress
   * @return currentAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Address getCurrentAddress() {
    return currentAddress;
  }


  public void setCurrentAddress(Address currentAddress) {
    
    
    
    this.currentAddress = currentAddress;
  }


  public EmployeeProfile permanentAddress(Address permanentAddress) {
    
    
    
    
    this.permanentAddress = permanentAddress;
    return this;
  }

   /**
   * Get permanentAddress
   * @return permanentAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Address getPermanentAddress() {
    return permanentAddress;
  }


  public void setPermanentAddress(Address permanentAddress) {
    
    
    
    this.permanentAddress = permanentAddress;
  }


  public EmployeeProfile relations(List<Relation> relations) {
    
    
    
    
    this.relations = relations;
    return this;
  }

  public EmployeeProfile addRelationsItem(Relation relationsItem) {
    if (this.relations == null) {
      this.relations = new ArrayList<>();
    }
    this.relations.add(relationsItem);
    return this;
  }

   /**
   * Get relations
   * @return relations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Relation> getRelations() {
    return relations;
  }


  public void setRelations(List<Relation> relations) {
    
    
    
    this.relations = relations;
  }


  public EmployeeProfile educationDetails(List<Education> educationDetails) {
    
    
    
    
    this.educationDetails = educationDetails;
    return this;
  }

  public EmployeeProfile addEducationDetailsItem(Education educationDetailsItem) {
    if (this.educationDetails == null) {
      this.educationDetails = new ArrayList<>();
    }
    this.educationDetails.add(educationDetailsItem);
    return this;
  }

   /**
   * Get educationDetails
   * @return educationDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Education> getEducationDetails() {
    return educationDetails;
  }


  public void setEducationDetails(List<Education> educationDetails) {
    
    
    
    this.educationDetails = educationDetails;
  }


  public EmployeeProfile experienceDetails(List<Experience> experienceDetails) {
    
    
    
    
    this.experienceDetails = experienceDetails;
    return this;
  }

  public EmployeeProfile addExperienceDetailsItem(Experience experienceDetailsItem) {
    if (this.experienceDetails == null) {
      this.experienceDetails = new ArrayList<>();
    }
    this.experienceDetails.add(experienceDetailsItem);
    return this;
  }

   /**
   * Get experienceDetails
   * @return experienceDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Experience> getExperienceDetails() {
    return experienceDetails;
  }


  public void setExperienceDetails(List<Experience> experienceDetails) {
    
    
    
    this.experienceDetails = experienceDetails;
  }


  public EmployeeProfile customFields(List<CustomField> customFields) {
    
    
    
    
    this.customFields = customFields;
    return this;
  }

  public EmployeeProfile addCustomFieldsItem(CustomField customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new ArrayList<>();
    }
    this.customFields.add(customFieldsItem);
    return this;
  }

   /**
   * Get customFields
   * @return customFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CustomField> getCustomFields() {
    return customFields;
  }


  public void setCustomFields(List<CustomField> customFields) {
    
    
    
    this.customFields = customFields;
  }


  public EmployeeProfile groups(List<GroupLookup> groups) {
    
    
    
    
    this.groups = groups;
    return this;
  }

  public EmployeeProfile addGroupsItem(GroupLookup groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

   /**
   * Get groups
   * @return groups
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<GroupLookup> getGroups() {
    return groups;
  }


  public void setGroups(List<GroupLookup> groups) {
    
    
    
    this.groups = groups;
  }


  public EmployeeProfile leavePlanInfo(LookupInfo leavePlanInfo) {
    
    
    
    
    this.leavePlanInfo = leavePlanInfo;
    return this;
  }

   /**
   * Get leavePlanInfo
   * @return leavePlanInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LookupInfo getLeavePlanInfo() {
    return leavePlanInfo;
  }


  public void setLeavePlanInfo(LookupInfo leavePlanInfo) {
    
    
    
    this.leavePlanInfo = leavePlanInfo;
  }


  public EmployeeProfile bandInfo(LookupInfo bandInfo) {
    
    
    
    
    this.bandInfo = bandInfo;
    return this;
  }

   /**
   * Get bandInfo
   * @return bandInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LookupInfo getBandInfo() {
    return bandInfo;
  }


  public void setBandInfo(LookupInfo bandInfo) {
    
    
    
    this.bandInfo = bandInfo;
  }


  public EmployeeProfile payGradeInfo(LookupInfo payGradeInfo) {
    
    
    
    
    this.payGradeInfo = payGradeInfo;
    return this;
  }

   /**
   * Get payGradeInfo
   * @return payGradeInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LookupInfo getPayGradeInfo() {
    return payGradeInfo;
  }


  public void setPayGradeInfo(LookupInfo payGradeInfo) {
    
    
    
    this.payGradeInfo = payGradeInfo;
  }


  public EmployeeProfile shiftPolicyInfo(LookupInfo shiftPolicyInfo) {
    
    
    
    
    this.shiftPolicyInfo = shiftPolicyInfo;
    return this;
  }

   /**
   * Get shiftPolicyInfo
   * @return shiftPolicyInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LookupInfo getShiftPolicyInfo() {
    return shiftPolicyInfo;
  }


  public void setShiftPolicyInfo(LookupInfo shiftPolicyInfo) {
    
    
    
    this.shiftPolicyInfo = shiftPolicyInfo;
  }


  public EmployeeProfile weeklyOffPolicyInfo(LookupInfo weeklyOffPolicyInfo) {
    
    
    
    
    this.weeklyOffPolicyInfo = weeklyOffPolicyInfo;
    return this;
  }

   /**
   * Get weeklyOffPolicyInfo
   * @return weeklyOffPolicyInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LookupInfo getWeeklyOffPolicyInfo() {
    return weeklyOffPolicyInfo;
  }


  public void setWeeklyOffPolicyInfo(LookupInfo weeklyOffPolicyInfo) {
    
    
    
    this.weeklyOffPolicyInfo = weeklyOffPolicyInfo;
  }


  public EmployeeProfile captureSchemeInfo(LookupInfo captureSchemeInfo) {
    
    
    
    
    this.captureSchemeInfo = captureSchemeInfo;
    return this;
  }

   /**
   * Get captureSchemeInfo
   * @return captureSchemeInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LookupInfo getCaptureSchemeInfo() {
    return captureSchemeInfo;
  }


  public void setCaptureSchemeInfo(LookupInfo captureSchemeInfo) {
    
    
    
    this.captureSchemeInfo = captureSchemeInfo;
  }


  public EmployeeProfile trackingPolicyInfo(LookupInfo trackingPolicyInfo) {
    
    
    
    
    this.trackingPolicyInfo = trackingPolicyInfo;
    return this;
  }

   /**
   * Get trackingPolicyInfo
   * @return trackingPolicyInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LookupInfo getTrackingPolicyInfo() {
    return trackingPolicyInfo;
  }


  public void setTrackingPolicyInfo(LookupInfo trackingPolicyInfo) {
    
    
    
    this.trackingPolicyInfo = trackingPolicyInfo;
  }


  public EmployeeProfile expensePolicyInfo(LookupInfo expensePolicyInfo) {
    
    
    
    
    this.expensePolicyInfo = expensePolicyInfo;
    return this;
  }

   /**
   * Get expensePolicyInfo
   * @return expensePolicyInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LookupInfo getExpensePolicyInfo() {
    return expensePolicyInfo;
  }


  public void setExpensePolicyInfo(LookupInfo expensePolicyInfo) {
    
    
    
    this.expensePolicyInfo = expensePolicyInfo;
  }


  public EmployeeProfile overtimePolicyInfo(LookupInfo overtimePolicyInfo) {
    
    
    
    
    this.overtimePolicyInfo = overtimePolicyInfo;
    return this;
  }

   /**
   * Get overtimePolicyInfo
   * @return overtimePolicyInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LookupInfo getOvertimePolicyInfo() {
    return overtimePolicyInfo;
  }


  public void setOvertimePolicyInfo(LookupInfo overtimePolicyInfo) {
    
    
    
    this.overtimePolicyInfo = overtimePolicyInfo;
  }


  public EmployeeProfile identifier(String identifier) {
    
    
    
    
    this.identifier = identifier;
    return this;
  }

   /**
   * Get identifier
   * @return identifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIdentifier() {
    return identifier;
  }


  public void setIdentifier(String identifier) {
    
    
    
    this.identifier = identifier;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmployeeProfile instance itself
   */
  public EmployeeProfile putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmployeeProfile employeeProfile = (EmployeeProfile) o;
    return Objects.equals(this.id, employeeProfile.id) &&
        Objects.equals(this.employeeNumber, employeeProfile.employeeNumber) &&
        Objects.equals(this.firstName, employeeProfile.firstName) &&
        Objects.equals(this.middleName, employeeProfile.middleName) &&
        Objects.equals(this.lastName, employeeProfile.lastName) &&
        Objects.equals(this.displayName, employeeProfile.displayName) &&
        Objects.equals(this.email, employeeProfile.email) &&
        Objects.equals(this.city, employeeProfile.city) &&
        Objects.equals(this.countryCode, employeeProfile.countryCode) &&
        Objects.equals(this.image, employeeProfile.image) &&
        Objects.equals(this.jobTitle, employeeProfile.jobTitle) &&
        Objects.equals(this.secondaryJobTitle, employeeProfile.secondaryJobTitle) &&
        Objects.equals(this.reportsTo, employeeProfile.reportsTo) &&
        Objects.equals(this.l2Manager, employeeProfile.l2Manager) &&
        Objects.equals(this.dottedLineManager, employeeProfile.dottedLineManager) &&
        Objects.equals(this.contingentType, employeeProfile.contingentType) &&
        Objects.equals(this.timeType, employeeProfile.timeType) &&
        Objects.equals(this.workerType, employeeProfile.workerType) &&
        Objects.equals(this.isPrivate, employeeProfile.isPrivate) &&
        Objects.equals(this.isProfileComplete, employeeProfile.isProfileComplete) &&
        Objects.equals(this.maritalStatus, employeeProfile.maritalStatus) &&
        Objects.equals(this.marriageDate, employeeProfile.marriageDate) &&
        Objects.equals(this.gender, employeeProfile.gender) &&
        Objects.equals(this.joiningDate, employeeProfile.joiningDate) &&
        Objects.equals(this.professionalSummary, employeeProfile.professionalSummary) &&
        Objects.equals(this.dateOfBirth, employeeProfile.dateOfBirth) &&
        Objects.equals(this.resignationSubmittedDate, employeeProfile.resignationSubmittedDate) &&
        Objects.equals(this.exitDate, employeeProfile.exitDate) &&
        Objects.equals(this.employmentStatus, employeeProfile.employmentStatus) &&
        Objects.equals(this.accountStatus, employeeProfile.accountStatus) &&
        Objects.equals(this.invitationStatus, employeeProfile.invitationStatus) &&
        Objects.equals(this.exitStatus, employeeProfile.exitStatus) &&
        Objects.equals(this.exitType, employeeProfile.exitType) &&
        Objects.equals(this.exitReason, employeeProfile.exitReason) &&
        Objects.equals(this.personalEmail, employeeProfile.personalEmail) &&
        Objects.equals(this.workPhone, employeeProfile.workPhone) &&
        Objects.equals(this.homePhone, employeeProfile.homePhone) &&
        Objects.equals(this.mobilePhone, employeeProfile.mobilePhone) &&
        Objects.equals(this.bloodGroup, employeeProfile.bloodGroup) &&
        Objects.equals(this.attendanceNumber, employeeProfile.attendanceNumber) &&
        Objects.equals(this.probationEndDate, employeeProfile.probationEndDate) &&
        Objects.equals(this.currentAddress, employeeProfile.currentAddress) &&
        Objects.equals(this.permanentAddress, employeeProfile.permanentAddress) &&
        Objects.equals(this.relations, employeeProfile.relations) &&
        Objects.equals(this.educationDetails, employeeProfile.educationDetails) &&
        Objects.equals(this.experienceDetails, employeeProfile.experienceDetails) &&
        Objects.equals(this.customFields, employeeProfile.customFields) &&
        Objects.equals(this.groups, employeeProfile.groups) &&
        Objects.equals(this.leavePlanInfo, employeeProfile.leavePlanInfo) &&
        Objects.equals(this.bandInfo, employeeProfile.bandInfo) &&
        Objects.equals(this.payGradeInfo, employeeProfile.payGradeInfo) &&
        Objects.equals(this.shiftPolicyInfo, employeeProfile.shiftPolicyInfo) &&
        Objects.equals(this.weeklyOffPolicyInfo, employeeProfile.weeklyOffPolicyInfo) &&
        Objects.equals(this.captureSchemeInfo, employeeProfile.captureSchemeInfo) &&
        Objects.equals(this.trackingPolicyInfo, employeeProfile.trackingPolicyInfo) &&
        Objects.equals(this.expensePolicyInfo, employeeProfile.expensePolicyInfo) &&
        Objects.equals(this.overtimePolicyInfo, employeeProfile.overtimePolicyInfo) &&
        Objects.equals(this.identifier, employeeProfile.identifier)&&
        Objects.equals(this.additionalProperties, employeeProfile.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, employeeNumber, firstName, middleName, lastName, displayName, email, city, countryCode, image, jobTitle, secondaryJobTitle, reportsTo, l2Manager, dottedLineManager, contingentType, timeType, workerType, isPrivate, isProfileComplete, maritalStatus, marriageDate, gender, joiningDate, professionalSummary, dateOfBirth, resignationSubmittedDate, exitDate, employmentStatus, accountStatus, invitationStatus, exitStatus, exitType, exitReason, personalEmail, workPhone, homePhone, mobilePhone, bloodGroup, attendanceNumber, probationEndDate, currentAddress, permanentAddress, relations, educationDetails, experienceDetails, customFields, groups, leavePlanInfo, bandInfo, payGradeInfo, shiftPolicyInfo, weeklyOffPolicyInfo, captureSchemeInfo, trackingPolicyInfo, expensePolicyInfo, overtimePolicyInfo, identifier, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmployeeProfile {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    employeeNumber: ").append(toIndentedString(employeeNumber)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    jobTitle: ").append(toIndentedString(jobTitle)).append("\n");
    sb.append("    secondaryJobTitle: ").append(toIndentedString(secondaryJobTitle)).append("\n");
    sb.append("    reportsTo: ").append(toIndentedString(reportsTo)).append("\n");
    sb.append("    l2Manager: ").append(toIndentedString(l2Manager)).append("\n");
    sb.append("    dottedLineManager: ").append(toIndentedString(dottedLineManager)).append("\n");
    sb.append("    contingentType: ").append(toIndentedString(contingentType)).append("\n");
    sb.append("    timeType: ").append(toIndentedString(timeType)).append("\n");
    sb.append("    workerType: ").append(toIndentedString(workerType)).append("\n");
    sb.append("    isPrivate: ").append(toIndentedString(isPrivate)).append("\n");
    sb.append("    isProfileComplete: ").append(toIndentedString(isProfileComplete)).append("\n");
    sb.append("    maritalStatus: ").append(toIndentedString(maritalStatus)).append("\n");
    sb.append("    marriageDate: ").append(toIndentedString(marriageDate)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    joiningDate: ").append(toIndentedString(joiningDate)).append("\n");
    sb.append("    professionalSummary: ").append(toIndentedString(professionalSummary)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    resignationSubmittedDate: ").append(toIndentedString(resignationSubmittedDate)).append("\n");
    sb.append("    exitDate: ").append(toIndentedString(exitDate)).append("\n");
    sb.append("    employmentStatus: ").append(toIndentedString(employmentStatus)).append("\n");
    sb.append("    accountStatus: ").append(toIndentedString(accountStatus)).append("\n");
    sb.append("    invitationStatus: ").append(toIndentedString(invitationStatus)).append("\n");
    sb.append("    exitStatus: ").append(toIndentedString(exitStatus)).append("\n");
    sb.append("    exitType: ").append(toIndentedString(exitType)).append("\n");
    sb.append("    exitReason: ").append(toIndentedString(exitReason)).append("\n");
    sb.append("    personalEmail: ").append(toIndentedString(personalEmail)).append("\n");
    sb.append("    workPhone: ").append(toIndentedString(workPhone)).append("\n");
    sb.append("    homePhone: ").append(toIndentedString(homePhone)).append("\n");
    sb.append("    mobilePhone: ").append(toIndentedString(mobilePhone)).append("\n");
    sb.append("    bloodGroup: ").append(toIndentedString(bloodGroup)).append("\n");
    sb.append("    attendanceNumber: ").append(toIndentedString(attendanceNumber)).append("\n");
    sb.append("    probationEndDate: ").append(toIndentedString(probationEndDate)).append("\n");
    sb.append("    currentAddress: ").append(toIndentedString(currentAddress)).append("\n");
    sb.append("    permanentAddress: ").append(toIndentedString(permanentAddress)).append("\n");
    sb.append("    relations: ").append(toIndentedString(relations)).append("\n");
    sb.append("    educationDetails: ").append(toIndentedString(educationDetails)).append("\n");
    sb.append("    experienceDetails: ").append(toIndentedString(experienceDetails)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    leavePlanInfo: ").append(toIndentedString(leavePlanInfo)).append("\n");
    sb.append("    bandInfo: ").append(toIndentedString(bandInfo)).append("\n");
    sb.append("    payGradeInfo: ").append(toIndentedString(payGradeInfo)).append("\n");
    sb.append("    shiftPolicyInfo: ").append(toIndentedString(shiftPolicyInfo)).append("\n");
    sb.append("    weeklyOffPolicyInfo: ").append(toIndentedString(weeklyOffPolicyInfo)).append("\n");
    sb.append("    captureSchemeInfo: ").append(toIndentedString(captureSchemeInfo)).append("\n");
    sb.append("    trackingPolicyInfo: ").append(toIndentedString(trackingPolicyInfo)).append("\n");
    sb.append("    expensePolicyInfo: ").append(toIndentedString(expensePolicyInfo)).append("\n");
    sb.append("    overtimePolicyInfo: ").append(toIndentedString(overtimePolicyInfo)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("employeeNumber");
    openapiFields.add("firstName");
    openapiFields.add("middleName");
    openapiFields.add("lastName");
    openapiFields.add("displayName");
    openapiFields.add("email");
    openapiFields.add("city");
    openapiFields.add("countryCode");
    openapiFields.add("image");
    openapiFields.add("jobTitle");
    openapiFields.add("secondaryJobTitle");
    openapiFields.add("reportsTo");
    openapiFields.add("l2Manager");
    openapiFields.add("dottedLineManager");
    openapiFields.add("contingentType");
    openapiFields.add("timeType");
    openapiFields.add("workerType");
    openapiFields.add("isPrivate");
    openapiFields.add("isProfileComplete");
    openapiFields.add("maritalStatus");
    openapiFields.add("marriageDate");
    openapiFields.add("gender");
    openapiFields.add("joiningDate");
    openapiFields.add("professionalSummary");
    openapiFields.add("dateOfBirth");
    openapiFields.add("resignationSubmittedDate");
    openapiFields.add("exitDate");
    openapiFields.add("employmentStatus");
    openapiFields.add("accountStatus");
    openapiFields.add("invitationStatus");
    openapiFields.add("exitStatus");
    openapiFields.add("exitType");
    openapiFields.add("exitReason");
    openapiFields.add("personalEmail");
    openapiFields.add("workPhone");
    openapiFields.add("homePhone");
    openapiFields.add("mobilePhone");
    openapiFields.add("bloodGroup");
    openapiFields.add("attendanceNumber");
    openapiFields.add("probationEndDate");
    openapiFields.add("currentAddress");
    openapiFields.add("permanentAddress");
    openapiFields.add("relations");
    openapiFields.add("educationDetails");
    openapiFields.add("experienceDetails");
    openapiFields.add("customFields");
    openapiFields.add("groups");
    openapiFields.add("leavePlanInfo");
    openapiFields.add("bandInfo");
    openapiFields.add("payGradeInfo");
    openapiFields.add("shiftPolicyInfo");
    openapiFields.add("weeklyOffPolicyInfo");
    openapiFields.add("captureSchemeInfo");
    openapiFields.add("trackingPolicyInfo");
    openapiFields.add("expensePolicyInfo");
    openapiFields.add("overtimePolicyInfo");
    openapiFields.add("identifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmployeeProfile
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmployeeProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmployeeProfile is not found in the empty JSON string", EmployeeProfile.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonNull() && (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("employeeNumber").isJsonNull() && (jsonObj.get("employeeNumber") != null && !jsonObj.get("employeeNumber").isJsonNull()) && !jsonObj.get("employeeNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeNumber").toString()));
      }
      if (!jsonObj.get("firstName").isJsonNull() && (jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if (!jsonObj.get("middleName").isJsonNull() && (jsonObj.get("middleName") != null && !jsonObj.get("middleName").isJsonNull()) && !jsonObj.get("middleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `middleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("middleName").toString()));
      }
      if (!jsonObj.get("lastName").isJsonNull() && (jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if (!jsonObj.get("displayName").isJsonNull() && (jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (!jsonObj.get("email").isJsonNull() && (jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("city").isJsonNull() && (jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if (!jsonObj.get("countryCode").isJsonNull() && (jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        Image.validateJsonObject(jsonObj.getAsJsonObject("image"));
      }
      // validate the optional field `jobTitle`
      if (jsonObj.get("jobTitle") != null && !jsonObj.get("jobTitle").isJsonNull()) {
        LookupInfo.validateJsonObject(jsonObj.getAsJsonObject("jobTitle"));
      }
      if (!jsonObj.get("secondaryJobTitle").isJsonNull() && (jsonObj.get("secondaryJobTitle") != null && !jsonObj.get("secondaryJobTitle").isJsonNull()) && !jsonObj.get("secondaryJobTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryJobTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondaryJobTitle").toString()));
      }
      // validate the optional field `reportsTo`
      if (jsonObj.get("reportsTo") != null && !jsonObj.get("reportsTo").isJsonNull()) {
        EmployeeLookup.validateJsonObject(jsonObj.getAsJsonObject("reportsTo"));
      }
      // validate the optional field `l2Manager`
      if (jsonObj.get("l2Manager") != null && !jsonObj.get("l2Manager").isJsonNull()) {
        EmployeeLookup.validateJsonObject(jsonObj.getAsJsonObject("l2Manager"));
      }
      // validate the optional field `dottedLineManager`
      if (jsonObj.get("dottedLineManager") != null && !jsonObj.get("dottedLineManager").isJsonNull()) {
        EmployeeLookup.validateJsonObject(jsonObj.getAsJsonObject("dottedLineManager"));
      }
      // validate the optional field `contingentType`
      if (jsonObj.get("contingentType") != null && !jsonObj.get("contingentType").isJsonNull()) {
        ContingentType.validateJsonObject(jsonObj.getAsJsonObject("contingentType"));
      }
      if (!jsonObj.get("professionalSummary").isJsonNull() && (jsonObj.get("professionalSummary") != null && !jsonObj.get("professionalSummary").isJsonNull()) && !jsonObj.get("professionalSummary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `professionalSummary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("professionalSummary").toString()));
      }
      if (!jsonObj.get("exitReason").isJsonNull() && (jsonObj.get("exitReason") != null && !jsonObj.get("exitReason").isJsonNull()) && !jsonObj.get("exitReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exitReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exitReason").toString()));
      }
      if (!jsonObj.get("personalEmail").isJsonNull() && (jsonObj.get("personalEmail") != null && !jsonObj.get("personalEmail").isJsonNull()) && !jsonObj.get("personalEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personalEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personalEmail").toString()));
      }
      if (!jsonObj.get("workPhone").isJsonNull() && (jsonObj.get("workPhone") != null && !jsonObj.get("workPhone").isJsonNull()) && !jsonObj.get("workPhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workPhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workPhone").toString()));
      }
      if (!jsonObj.get("homePhone").isJsonNull() && (jsonObj.get("homePhone") != null && !jsonObj.get("homePhone").isJsonNull()) && !jsonObj.get("homePhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homePhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homePhone").toString()));
      }
      if (!jsonObj.get("mobilePhone").isJsonNull() && (jsonObj.get("mobilePhone") != null && !jsonObj.get("mobilePhone").isJsonNull()) && !jsonObj.get("mobilePhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobilePhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobilePhone").toString()));
      }
      if (!jsonObj.get("attendanceNumber").isJsonNull() && (jsonObj.get("attendanceNumber") != null && !jsonObj.get("attendanceNumber").isJsonNull()) && !jsonObj.get("attendanceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attendanceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attendanceNumber").toString()));
      }
      // validate the optional field `currentAddress`
      if (jsonObj.get("currentAddress") != null && !jsonObj.get("currentAddress").isJsonNull()) {
        Address.validateJsonObject(jsonObj.getAsJsonObject("currentAddress"));
      }
      // validate the optional field `permanentAddress`
      if (jsonObj.get("permanentAddress") != null && !jsonObj.get("permanentAddress").isJsonNull()) {
        Address.validateJsonObject(jsonObj.getAsJsonObject("permanentAddress"));
      }
      if (jsonObj.get("relations") != null && !jsonObj.get("relations").isJsonNull()) {
        JsonArray jsonArrayrelations = jsonObj.getAsJsonArray("relations");
        if (jsonArrayrelations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("relations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `relations` to be an array in the JSON string but got `%s`", jsonObj.get("relations").toString()));
          }

          // validate the optional field `relations` (array)
          for (int i = 0; i < jsonArrayrelations.size(); i++) {
            Relation.validateJsonObject(jsonArrayrelations.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("educationDetails") != null && !jsonObj.get("educationDetails").isJsonNull()) {
        JsonArray jsonArrayeducationDetails = jsonObj.getAsJsonArray("educationDetails");
        if (jsonArrayeducationDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("educationDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `educationDetails` to be an array in the JSON string but got `%s`", jsonObj.get("educationDetails").toString()));
          }

          // validate the optional field `educationDetails` (array)
          for (int i = 0; i < jsonArrayeducationDetails.size(); i++) {
            Education.validateJsonObject(jsonArrayeducationDetails.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("experienceDetails") != null && !jsonObj.get("experienceDetails").isJsonNull()) {
        JsonArray jsonArrayexperienceDetails = jsonObj.getAsJsonArray("experienceDetails");
        if (jsonArrayexperienceDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("experienceDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `experienceDetails` to be an array in the JSON string but got `%s`", jsonObj.get("experienceDetails").toString()));
          }

          // validate the optional field `experienceDetails` (array)
          for (int i = 0; i < jsonArrayexperienceDetails.size(); i++) {
            Experience.validateJsonObject(jsonArrayexperienceDetails.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("customFields") != null && !jsonObj.get("customFields").isJsonNull()) {
        JsonArray jsonArraycustomFields = jsonObj.getAsJsonArray("customFields");
        if (jsonArraycustomFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customFields` to be an array in the JSON string but got `%s`", jsonObj.get("customFields").toString()));
          }

          // validate the optional field `customFields` (array)
          for (int i = 0; i < jsonArraycustomFields.size(); i++) {
            CustomField.validateJsonObject(jsonArraycustomFields.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("groups") != null && !jsonObj.get("groups").isJsonNull()) {
        JsonArray jsonArraygroups = jsonObj.getAsJsonArray("groups");
        if (jsonArraygroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("groups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `groups` to be an array in the JSON string but got `%s`", jsonObj.get("groups").toString()));
          }

          // validate the optional field `groups` (array)
          for (int i = 0; i < jsonArraygroups.size(); i++) {
            GroupLookup.validateJsonObject(jsonArraygroups.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `leavePlanInfo`
      if (jsonObj.get("leavePlanInfo") != null && !jsonObj.get("leavePlanInfo").isJsonNull()) {
        LookupInfo.validateJsonObject(jsonObj.getAsJsonObject("leavePlanInfo"));
      }
      // validate the optional field `bandInfo`
      if (jsonObj.get("bandInfo") != null && !jsonObj.get("bandInfo").isJsonNull()) {
        LookupInfo.validateJsonObject(jsonObj.getAsJsonObject("bandInfo"));
      }
      // validate the optional field `payGradeInfo`
      if (jsonObj.get("payGradeInfo") != null && !jsonObj.get("payGradeInfo").isJsonNull()) {
        LookupInfo.validateJsonObject(jsonObj.getAsJsonObject("payGradeInfo"));
      }
      // validate the optional field `shiftPolicyInfo`
      if (jsonObj.get("shiftPolicyInfo") != null && !jsonObj.get("shiftPolicyInfo").isJsonNull()) {
        LookupInfo.validateJsonObject(jsonObj.getAsJsonObject("shiftPolicyInfo"));
      }
      // validate the optional field `weeklyOffPolicyInfo`
      if (jsonObj.get("weeklyOffPolicyInfo") != null && !jsonObj.get("weeklyOffPolicyInfo").isJsonNull()) {
        LookupInfo.validateJsonObject(jsonObj.getAsJsonObject("weeklyOffPolicyInfo"));
      }
      // validate the optional field `captureSchemeInfo`
      if (jsonObj.get("captureSchemeInfo") != null && !jsonObj.get("captureSchemeInfo").isJsonNull()) {
        LookupInfo.validateJsonObject(jsonObj.getAsJsonObject("captureSchemeInfo"));
      }
      // validate the optional field `trackingPolicyInfo`
      if (jsonObj.get("trackingPolicyInfo") != null && !jsonObj.get("trackingPolicyInfo").isJsonNull()) {
        LookupInfo.validateJsonObject(jsonObj.getAsJsonObject("trackingPolicyInfo"));
      }
      // validate the optional field `expensePolicyInfo`
      if (jsonObj.get("expensePolicyInfo") != null && !jsonObj.get("expensePolicyInfo").isJsonNull()) {
        LookupInfo.validateJsonObject(jsonObj.getAsJsonObject("expensePolicyInfo"));
      }
      // validate the optional field `overtimePolicyInfo`
      if (jsonObj.get("overtimePolicyInfo") != null && !jsonObj.get("overtimePolicyInfo").isJsonNull()) {
        LookupInfo.validateJsonObject(jsonObj.getAsJsonObject("overtimePolicyInfo"));
      }
      if (!jsonObj.get("identifier").isJsonNull() && (jsonObj.get("identifier") != null && !jsonObj.get("identifier").isJsonNull()) && !jsonObj.get("identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmployeeProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmployeeProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmployeeProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmployeeProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<EmployeeProfile>() {
           @Override
           public void write(JsonWriter out, EmployeeProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmployeeProfile read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmployeeProfile instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmployeeProfile given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmployeeProfile
  * @throws IOException if the JSON string is invalid with respect to EmployeeProfile
  */
  public static EmployeeProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmployeeProfile.class);
  }

 /**
  * Convert an instance of EmployeeProfile to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

