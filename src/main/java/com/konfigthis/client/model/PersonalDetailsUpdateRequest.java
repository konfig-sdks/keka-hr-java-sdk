/*
 * Requisition
 * Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Address;
import com.konfigthis.client.model.BloodGroup;
import com.konfigthis.client.model.Gender;
import com.konfigthis.client.model.MaritalStatus;
import com.konfigthis.client.model.Relation;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PersonalDetailsUpdateRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PersonalDetailsUpdateRequest {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_MIDDLE_NAME = "middleName";
  @SerializedName(SERIALIZED_NAME_MIDDLE_NAME)
  private String middleName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private Gender gender;

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "dateOfBirth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  private OffsetDateTime dateOfBirth;

  public static final String SERIALIZED_NAME_WORK_PHONE = "workPhone";
  @SerializedName(SERIALIZED_NAME_WORK_PHONE)
  private String workPhone;

  public static final String SERIALIZED_NAME_HOME_PHONE = "homePhone";
  @SerializedName(SERIALIZED_NAME_HOME_PHONE)
  private String homePhone;

  public static final String SERIALIZED_NAME_PERSONAL_EMAIL = "personalEmail";
  @SerializedName(SERIALIZED_NAME_PERSONAL_EMAIL)
  private String personalEmail;

  public static final String SERIALIZED_NAME_SKYPE_ID = "skypeId";
  @SerializedName(SERIALIZED_NAME_SKYPE_ID)
  private String skypeId;

  public static final String SERIALIZED_NAME_MARITAL_STATUS = "maritalStatus";
  @SerializedName(SERIALIZED_NAME_MARITAL_STATUS)
  private MaritalStatus maritalStatus;

  public static final String SERIALIZED_NAME_MARRIAGE_DATE = "marriageDate";
  @SerializedName(SERIALIZED_NAME_MARRIAGE_DATE)
  private OffsetDateTime marriageDate;

  public static final String SERIALIZED_NAME_RELATIONS = "relations";
  @SerializedName(SERIALIZED_NAME_RELATIONS)
  private List<Relation> relations = null;

  public static final String SERIALIZED_NAME_BLOOD_GROUP = "bloodGroup";
  @SerializedName(SERIALIZED_NAME_BLOOD_GROUP)
  private BloodGroup bloodGroup;

  public static final String SERIALIZED_NAME_CURRENT_ADDRESS = "currentAddress";
  @SerializedName(SERIALIZED_NAME_CURRENT_ADDRESS)
  private Address currentAddress;

  public static final String SERIALIZED_NAME_PERMANENT_ADDRESS = "permanentAddress";
  @SerializedName(SERIALIZED_NAME_PERMANENT_ADDRESS)
  private Address permanentAddress;

  public static final String SERIALIZED_NAME_PROFESSIONAL_SUMMARY = "professionalSummary";
  @SerializedName(SERIALIZED_NAME_PROFESSIONAL_SUMMARY)
  private String professionalSummary;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "customFields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Map<String, Object> customFields = null;

  public PersonalDetailsUpdateRequest() {
  }

  public PersonalDetailsUpdateRequest displayName(String displayName) {
    
    
    
    
    this.displayName = displayName;
    return this;
  }

   /**
   * Get displayName
   * @return displayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    
    
    
    this.displayName = displayName;
  }


  public PersonalDetailsUpdateRequest firstName(String firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * Get firstName
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    
    this.firstName = firstName;
  }


  public PersonalDetailsUpdateRequest middleName(String middleName) {
    
    
    
    
    this.middleName = middleName;
    return this;
  }

   /**
   * Get middleName
   * @return middleName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMiddleName() {
    return middleName;
  }


  public void setMiddleName(String middleName) {
    
    
    
    this.middleName = middleName;
  }


  public PersonalDetailsUpdateRequest lastName(String lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Get lastName
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    
    this.lastName = lastName;
  }


  public PersonalDetailsUpdateRequest gender(Gender gender) {
    
    
    
    
    this.gender = gender;
    return this;
  }

   /**
   * Get gender
   * @return gender
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Gender getGender() {
    return gender;
  }


  public void setGender(Gender gender) {
    
    
    
    this.gender = gender;
  }


  public PersonalDetailsUpdateRequest dateOfBirth(OffsetDateTime dateOfBirth) {
    
    
    
    
    this.dateOfBirth = dateOfBirth;
    return this;
  }

   /**
   * Get dateOfBirth
   * @return dateOfBirth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getDateOfBirth() {
    return dateOfBirth;
  }


  public void setDateOfBirth(OffsetDateTime dateOfBirth) {
    
    
    
    this.dateOfBirth = dateOfBirth;
  }


  public PersonalDetailsUpdateRequest workPhone(String workPhone) {
    
    
    
    
    this.workPhone = workPhone;
    return this;
  }

   /**
   * Get workPhone
   * @return workPhone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getWorkPhone() {
    return workPhone;
  }


  public void setWorkPhone(String workPhone) {
    
    
    
    this.workPhone = workPhone;
  }


  public PersonalDetailsUpdateRequest homePhone(String homePhone) {
    
    
    
    
    this.homePhone = homePhone;
    return this;
  }

   /**
   * Get homePhone
   * @return homePhone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getHomePhone() {
    return homePhone;
  }


  public void setHomePhone(String homePhone) {
    
    
    
    this.homePhone = homePhone;
  }


  public PersonalDetailsUpdateRequest personalEmail(String personalEmail) {
    
    
    
    
    this.personalEmail = personalEmail;
    return this;
  }

   /**
   * Get personalEmail
   * @return personalEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPersonalEmail() {
    return personalEmail;
  }


  public void setPersonalEmail(String personalEmail) {
    
    
    
    this.personalEmail = personalEmail;
  }


  public PersonalDetailsUpdateRequest skypeId(String skypeId) {
    
    
    
    
    this.skypeId = skypeId;
    return this;
  }

   /**
   * Get skypeId
   * @return skypeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSkypeId() {
    return skypeId;
  }


  public void setSkypeId(String skypeId) {
    
    
    
    this.skypeId = skypeId;
  }


  public PersonalDetailsUpdateRequest maritalStatus(MaritalStatus maritalStatus) {
    
    
    
    
    this.maritalStatus = maritalStatus;
    return this;
  }

   /**
   * Get maritalStatus
   * @return maritalStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MaritalStatus getMaritalStatus() {
    return maritalStatus;
  }


  public void setMaritalStatus(MaritalStatus maritalStatus) {
    
    
    
    this.maritalStatus = maritalStatus;
  }


  public PersonalDetailsUpdateRequest marriageDate(OffsetDateTime marriageDate) {
    
    
    
    
    this.marriageDate = marriageDate;
    return this;
  }

   /**
   * Get marriageDate
   * @return marriageDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getMarriageDate() {
    return marriageDate;
  }


  public void setMarriageDate(OffsetDateTime marriageDate) {
    
    
    
    this.marriageDate = marriageDate;
  }


  public PersonalDetailsUpdateRequest relations(List<Relation> relations) {
    
    
    
    
    this.relations = relations;
    return this;
  }

  public PersonalDetailsUpdateRequest addRelationsItem(Relation relationsItem) {
    if (this.relations == null) {
      this.relations = new ArrayList<>();
    }
    this.relations.add(relationsItem);
    return this;
  }

   /**
   * Get relations
   * @return relations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Relation> getRelations() {
    return relations;
  }


  public void setRelations(List<Relation> relations) {
    
    
    
    this.relations = relations;
  }


  public PersonalDetailsUpdateRequest bloodGroup(BloodGroup bloodGroup) {
    
    
    
    
    this.bloodGroup = bloodGroup;
    return this;
  }

   /**
   * Get bloodGroup
   * @return bloodGroup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BloodGroup getBloodGroup() {
    return bloodGroup;
  }


  public void setBloodGroup(BloodGroup bloodGroup) {
    
    
    
    this.bloodGroup = bloodGroup;
  }


  public PersonalDetailsUpdateRequest currentAddress(Address currentAddress) {
    
    
    
    
    this.currentAddress = currentAddress;
    return this;
  }

   /**
   * Get currentAddress
   * @return currentAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Address getCurrentAddress() {
    return currentAddress;
  }


  public void setCurrentAddress(Address currentAddress) {
    
    
    
    this.currentAddress = currentAddress;
  }


  public PersonalDetailsUpdateRequest permanentAddress(Address permanentAddress) {
    
    
    
    
    this.permanentAddress = permanentAddress;
    return this;
  }

   /**
   * Get permanentAddress
   * @return permanentAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Address getPermanentAddress() {
    return permanentAddress;
  }


  public void setPermanentAddress(Address permanentAddress) {
    
    
    
    this.permanentAddress = permanentAddress;
  }


  public PersonalDetailsUpdateRequest professionalSummary(String professionalSummary) {
    
    
    
    
    this.professionalSummary = professionalSummary;
    return this;
  }

   /**
   * Get professionalSummary
   * @return professionalSummary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getProfessionalSummary() {
    return professionalSummary;
  }


  public void setProfessionalSummary(String professionalSummary) {
    
    
    
    this.professionalSummary = professionalSummary;
  }


  public PersonalDetailsUpdateRequest customFields(Map<String, Object> customFields) {
    
    
    
    
    this.customFields = customFields;
    return this;
  }

  public PersonalDetailsUpdateRequest putCustomFieldsItem(String key, Object customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new HashMap<>();
    }
    this.customFields.put(key, customFieldsItem);
    return this;
  }

   /**
   * Get customFields
   * @return customFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, Object> getCustomFields() {
    return customFields;
  }


  public void setCustomFields(Map<String, Object> customFields) {
    
    
    
    this.customFields = customFields;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PersonalDetailsUpdateRequest instance itself
   */
  public PersonalDetailsUpdateRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PersonalDetailsUpdateRequest personalDetailsUpdateRequest = (PersonalDetailsUpdateRequest) o;
    return Objects.equals(this.displayName, personalDetailsUpdateRequest.displayName) &&
        Objects.equals(this.firstName, personalDetailsUpdateRequest.firstName) &&
        Objects.equals(this.middleName, personalDetailsUpdateRequest.middleName) &&
        Objects.equals(this.lastName, personalDetailsUpdateRequest.lastName) &&
        Objects.equals(this.gender, personalDetailsUpdateRequest.gender) &&
        Objects.equals(this.dateOfBirth, personalDetailsUpdateRequest.dateOfBirth) &&
        Objects.equals(this.workPhone, personalDetailsUpdateRequest.workPhone) &&
        Objects.equals(this.homePhone, personalDetailsUpdateRequest.homePhone) &&
        Objects.equals(this.personalEmail, personalDetailsUpdateRequest.personalEmail) &&
        Objects.equals(this.skypeId, personalDetailsUpdateRequest.skypeId) &&
        Objects.equals(this.maritalStatus, personalDetailsUpdateRequest.maritalStatus) &&
        Objects.equals(this.marriageDate, personalDetailsUpdateRequest.marriageDate) &&
        Objects.equals(this.relations, personalDetailsUpdateRequest.relations) &&
        Objects.equals(this.bloodGroup, personalDetailsUpdateRequest.bloodGroup) &&
        Objects.equals(this.currentAddress, personalDetailsUpdateRequest.currentAddress) &&
        Objects.equals(this.permanentAddress, personalDetailsUpdateRequest.permanentAddress) &&
        Objects.equals(this.professionalSummary, personalDetailsUpdateRequest.professionalSummary) &&
        Objects.equals(this.customFields, personalDetailsUpdateRequest.customFields)&&
        Objects.equals(this.additionalProperties, personalDetailsUpdateRequest.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, firstName, middleName, lastName, gender, dateOfBirth, workPhone, homePhone, personalEmail, skypeId, maritalStatus, marriageDate, relations, bloodGroup, currentAddress, permanentAddress, professionalSummary, customFields, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PersonalDetailsUpdateRequest {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    workPhone: ").append(toIndentedString(workPhone)).append("\n");
    sb.append("    homePhone: ").append(toIndentedString(homePhone)).append("\n");
    sb.append("    personalEmail: ").append(toIndentedString(personalEmail)).append("\n");
    sb.append("    skypeId: ").append(toIndentedString(skypeId)).append("\n");
    sb.append("    maritalStatus: ").append(toIndentedString(maritalStatus)).append("\n");
    sb.append("    marriageDate: ").append(toIndentedString(marriageDate)).append("\n");
    sb.append("    relations: ").append(toIndentedString(relations)).append("\n");
    sb.append("    bloodGroup: ").append(toIndentedString(bloodGroup)).append("\n");
    sb.append("    currentAddress: ").append(toIndentedString(currentAddress)).append("\n");
    sb.append("    permanentAddress: ").append(toIndentedString(permanentAddress)).append("\n");
    sb.append("    professionalSummary: ").append(toIndentedString(professionalSummary)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("firstName");
    openapiFields.add("middleName");
    openapiFields.add("lastName");
    openapiFields.add("gender");
    openapiFields.add("dateOfBirth");
    openapiFields.add("workPhone");
    openapiFields.add("homePhone");
    openapiFields.add("personalEmail");
    openapiFields.add("skypeId");
    openapiFields.add("maritalStatus");
    openapiFields.add("marriageDate");
    openapiFields.add("relations");
    openapiFields.add("bloodGroup");
    openapiFields.add("currentAddress");
    openapiFields.add("permanentAddress");
    openapiFields.add("professionalSummary");
    openapiFields.add("customFields");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PersonalDetailsUpdateRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PersonalDetailsUpdateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PersonalDetailsUpdateRequest is not found in the empty JSON string", PersonalDetailsUpdateRequest.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("displayName").isJsonNull() && (jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (!jsonObj.get("firstName").isJsonNull() && (jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if (!jsonObj.get("middleName").isJsonNull() && (jsonObj.get("middleName") != null && !jsonObj.get("middleName").isJsonNull()) && !jsonObj.get("middleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `middleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("middleName").toString()));
      }
      if (!jsonObj.get("lastName").isJsonNull() && (jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if (!jsonObj.get("workPhone").isJsonNull() && (jsonObj.get("workPhone") != null && !jsonObj.get("workPhone").isJsonNull()) && !jsonObj.get("workPhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workPhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workPhone").toString()));
      }
      if (!jsonObj.get("homePhone").isJsonNull() && (jsonObj.get("homePhone") != null && !jsonObj.get("homePhone").isJsonNull()) && !jsonObj.get("homePhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homePhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homePhone").toString()));
      }
      if (!jsonObj.get("personalEmail").isJsonNull() && (jsonObj.get("personalEmail") != null && !jsonObj.get("personalEmail").isJsonNull()) && !jsonObj.get("personalEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personalEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personalEmail").toString()));
      }
      if (!jsonObj.get("skypeId").isJsonNull() && (jsonObj.get("skypeId") != null && !jsonObj.get("skypeId").isJsonNull()) && !jsonObj.get("skypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skypeId").toString()));
      }
      if (jsonObj.get("relations") != null && !jsonObj.get("relations").isJsonNull()) {
        JsonArray jsonArrayrelations = jsonObj.getAsJsonArray("relations");
        if (jsonArrayrelations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("relations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `relations` to be an array in the JSON string but got `%s`", jsonObj.get("relations").toString()));
          }

          // validate the optional field `relations` (array)
          for (int i = 0; i < jsonArrayrelations.size(); i++) {
            Relation.validateJsonObject(jsonArrayrelations.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `currentAddress`
      if (jsonObj.get("currentAddress") != null && !jsonObj.get("currentAddress").isJsonNull()) {
        Address.validateJsonObject(jsonObj.getAsJsonObject("currentAddress"));
      }
      // validate the optional field `permanentAddress`
      if (jsonObj.get("permanentAddress") != null && !jsonObj.get("permanentAddress").isJsonNull()) {
        Address.validateJsonObject(jsonObj.getAsJsonObject("permanentAddress"));
      }
      if (!jsonObj.get("professionalSummary").isJsonNull() && (jsonObj.get("professionalSummary") != null && !jsonObj.get("professionalSummary").isJsonNull()) && !jsonObj.get("professionalSummary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `professionalSummary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("professionalSummary").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PersonalDetailsUpdateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PersonalDetailsUpdateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PersonalDetailsUpdateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PersonalDetailsUpdateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PersonalDetailsUpdateRequest>() {
           @Override
           public void write(JsonWriter out, PersonalDetailsUpdateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PersonalDetailsUpdateRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PersonalDetailsUpdateRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PersonalDetailsUpdateRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PersonalDetailsUpdateRequest
  * @throws IOException if the JSON string is invalid with respect to PersonalDetailsUpdateRequest
  */
  public static PersonalDetailsUpdateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PersonalDetailsUpdateRequest.class);
  }

 /**
  * Convert an instance of PersonalDetailsUpdateRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

