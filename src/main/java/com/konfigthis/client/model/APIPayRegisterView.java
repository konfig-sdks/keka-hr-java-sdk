/*
 * Requisition
 * Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EmployeePayrollCycleRunStatus;
import com.konfigthis.client.model.EmploymentStatus;
import com.konfigthis.client.model.Gender;
import com.konfigthis.client.model.PayItemView;
import com.konfigthis.client.model.RemunerationType;
import com.konfigthis.client.model.WorkerType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * APIPayRegisterView
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class APIPayRegisterView {
  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private String identifier;

  public static final String SERIALIZED_NAME_EMPLOYEE_NUMBER = "employeeNumber";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_NUMBER)
  private String employeeNumber;

  public static final String SERIALIZED_NAME_EMPLOYEE_NAME = "employeeName";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_NAME)
  private String employeeName;

  public static final String SERIALIZED_NAME_PAN_NUMBER = "panNumber";
  @SerializedName(SERIALIZED_NAME_PAN_NUMBER)
  private String panNumber;

  public static final String SERIALIZED_NAME_DATE_JOINED = "dateJoined";
  @SerializedName(SERIALIZED_NAME_DATE_JOINED)
  private OffsetDateTime dateJoined;

  public static final String SERIALIZED_NAME_JOB_TITLE = "jobTitle";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE)
  private String jobTitle;

  public static final String SERIALIZED_NAME_DEPARTMENT = "department";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT)
  private String department;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_PAY_GROUP = "payGroup";
  @SerializedName(SERIALIZED_NAME_PAY_GROUP)
  private String payGroup;

  public static final String SERIALIZED_NAME_EMPLOYMENT_STATUS = "employmentStatus";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENT_STATUS)
  private EmploymentStatus employmentStatus;

  public static final String SERIALIZED_NAME_WORKER_TYPE = "workerType";
  @SerializedName(SERIALIZED_NAME_WORKER_TYPE)
  private WorkerType workerType;

  public static final String SERIALIZED_NAME_COST_CENTER = "costCenter";
  @SerializedName(SERIALIZED_NAME_COST_CENTER)
  private String costCenter;

  public static final String SERIALIZED_NAME_BUSINESS_UNIT = "businessUnit";
  @SerializedName(SERIALIZED_NAME_BUSINESS_UNIT)
  private String businessUnit;

  public static final String SERIALIZED_NAME_REMUNERATION_TYPE = "remunerationType";
  @SerializedName(SERIALIZED_NAME_REMUNERATION_TYPE)
  private RemunerationType remunerationType;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private Gender gender;

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "dateOfBirth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  private OffsetDateTime dateOfBirth;

  public static final String SERIALIZED_NAME_EXIT_DATE = "exitDate";
  @SerializedName(SERIALIZED_NAME_EXIT_DATE)
  private OffsetDateTime exitDate;

  public static final String SERIALIZED_NAME_CYCLE_IDENTIFIER = "cycleIdentifier";
  @SerializedName(SERIALIZED_NAME_CYCLE_IDENTIFIER)
  private String cycleIdentifier;

  public static final String SERIALIZED_NAME_CYCLE_FROM = "cycleFrom";
  @SerializedName(SERIALIZED_NAME_CYCLE_FROM)
  private OffsetDateTime cycleFrom;

  public static final String SERIALIZED_NAME_CYCLE_TO = "cycleTo";
  @SerializedName(SERIALIZED_NAME_CYCLE_TO)
  private OffsetDateTime cycleTo;

  public static final String SERIALIZED_NAME_CYCLE_MONTH_NAME = "cycleMonthName";
  @SerializedName(SERIALIZED_NAME_CYCLE_MONTH_NAME)
  private String cycleMonthName;

  public static final String SERIALIZED_NAME_CYCLE_MONTH = "cycleMonth";
  @SerializedName(SERIALIZED_NAME_CYCLE_MONTH)
  private Integer cycleMonth;

  public static final String SERIALIZED_NAME_CYCLE_YEAR = "cycleYear";
  @SerializedName(SERIALIZED_NAME_CYCLE_YEAR)
  private Integer cycleYear;

  public static final String SERIALIZED_NAME_CYCLE_PAY_DAYS = "cyclePayDays";
  @SerializedName(SERIALIZED_NAME_CYCLE_PAY_DAYS)
  private Double cyclePayDays;

  public static final String SERIALIZED_NAME_WORKING_DAYS = "workingDays";
  @SerializedName(SERIALIZED_NAME_WORKING_DAYS)
  private Double workingDays;

  public static final String SERIALIZED_NAME_LOSS_OF_PAY_DAYS = "lossOfPayDays";
  @SerializedName(SERIALIZED_NAME_LOSS_OF_PAY_DAYS)
  private Double lossOfPayDays;

  public static final String SERIALIZED_NAME_NO_OF_PAY_DAYS = "noOfPayDays";
  @SerializedName(SERIALIZED_NAME_NO_OF_PAY_DAYS)
  private Double noOfPayDays;

  public static final String SERIALIZED_NAME_RENUMERATION_AMOUNT = "renumerationAmount";
  @SerializedName(SERIALIZED_NAME_RENUMERATION_AMOUNT)
  private Double renumerationAmount;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private EmployeePayrollCycleRunStatus status;

  public static final String SERIALIZED_NAME_STATUS_DESCRIPTION = "statusDescription";
  @SerializedName(SERIALIZED_NAME_STATUS_DESCRIPTION)
  private String statusDescription;

  public static final String SERIALIZED_NAME_EARNINGS = "earnings";
  @SerializedName(SERIALIZED_NAME_EARNINGS)
  private List<PayItemView> earnings = null;

  public static final String SERIALIZED_NAME_CONTRIBUTIONS = "contributions";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTIONS)
  private List<PayItemView> contributions = null;

  public static final String SERIALIZED_NAME_DEDUCTIONS = "deductions";
  @SerializedName(SERIALIZED_NAME_DEDUCTIONS)
  private List<PayItemView> deductions = null;

  public static final String SERIALIZED_NAME_REIMBURSEMENTS = "reimbursements";
  @SerializedName(SERIALIZED_NAME_REIMBURSEMENTS)
  private List<PayItemView> reimbursements = null;

  public static final String SERIALIZED_NAME_OUTSIDE_GROSS_PAYABLES = "outsideGrossPayables";
  @SerializedName(SERIALIZED_NAME_OUTSIDE_GROSS_PAYABLES)
  private List<PayItemView> outsideGrossPayables = null;

  public static final String SERIALIZED_NAME_GROSS_AMOUNT = "grossAmount";
  @SerializedName(SERIALIZED_NAME_GROSS_AMOUNT)
  private Double grossAmount;

  public static final String SERIALIZED_NAME_TOTAL_OUTSIDE_GROSS_AMOUNT = "totalOutsideGrossAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_OUTSIDE_GROSS_AMOUNT)
  private Double totalOutsideGrossAmount;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Double total;

  public static final String SERIALIZED_NAME_TOTAL_CONTRIBUTIONS = "totalContributions";
  @SerializedName(SERIALIZED_NAME_TOTAL_CONTRIBUTIONS)
  private Double totalContributions;

  public static final String SERIALIZED_NAME_TOTAL_DEDUCTIONS = "totalDeductions";
  @SerializedName(SERIALIZED_NAME_TOTAL_DEDUCTIONS)
  private Double totalDeductions;

  public static final String SERIALIZED_NAME_TOTAL_REIMBURSEMENTS = "totalReimbursements";
  @SerializedName(SERIALIZED_NAME_TOTAL_REIMBURSEMENTS)
  private Double totalReimbursements;

  public static final String SERIALIZED_NAME_CASH_ADVANCE_AMOUNT = "cashAdvanceAmount";
  @SerializedName(SERIALIZED_NAME_CASH_ADVANCE_AMOUNT)
  private Double cashAdvanceAmount;

  public static final String SERIALIZED_NAME_CASH_ADVANCE_SETTLEMENT_AMOUNT = "cashAdvanceSettlementAmount";
  @SerializedName(SERIALIZED_NAME_CASH_ADVANCE_SETTLEMENT_AMOUNT)
  private Double cashAdvanceSettlementAmount;

  public static final String SERIALIZED_NAME_NET_AMOUNT = "netAmount";
  @SerializedName(SERIALIZED_NAME_NET_AMOUNT)
  private Double netAmount;

  public APIPayRegisterView() {
  }

  
  public APIPayRegisterView(
     String cycleMonthName, 
     Double total
  ) {
    this();
    this.cycleMonthName = cycleMonthName;
    this.total = total;
  }

  public APIPayRegisterView identifier(String identifier) {
    
    
    
    
    this.identifier = identifier;
    return this;
  }

   /**
   * Get identifier
   * @return identifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIdentifier() {
    return identifier;
  }


  public void setIdentifier(String identifier) {
    
    
    
    this.identifier = identifier;
  }


  public APIPayRegisterView employeeNumber(String employeeNumber) {
    
    
    
    
    this.employeeNumber = employeeNumber;
    return this;
  }

   /**
   * Get employeeNumber
   * @return employeeNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployeeNumber() {
    return employeeNumber;
  }


  public void setEmployeeNumber(String employeeNumber) {
    
    
    
    this.employeeNumber = employeeNumber;
  }


  public APIPayRegisterView employeeName(String employeeName) {
    
    
    
    
    this.employeeName = employeeName;
    return this;
  }

   /**
   * Get employeeName
   * @return employeeName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployeeName() {
    return employeeName;
  }


  public void setEmployeeName(String employeeName) {
    
    
    
    this.employeeName = employeeName;
  }


  public APIPayRegisterView panNumber(String panNumber) {
    
    
    
    
    this.panNumber = panNumber;
    return this;
  }

   /**
   * Get panNumber
   * @return panNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPanNumber() {
    return panNumber;
  }


  public void setPanNumber(String panNumber) {
    
    
    
    this.panNumber = panNumber;
  }


  public APIPayRegisterView dateJoined(OffsetDateTime dateJoined) {
    
    
    
    
    this.dateJoined = dateJoined;
    return this;
  }

   /**
   * Get dateJoined
   * @return dateJoined
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getDateJoined() {
    return dateJoined;
  }


  public void setDateJoined(OffsetDateTime dateJoined) {
    
    
    
    this.dateJoined = dateJoined;
  }


  public APIPayRegisterView jobTitle(String jobTitle) {
    
    
    
    
    this.jobTitle = jobTitle;
    return this;
  }

   /**
   * Get jobTitle
   * @return jobTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getJobTitle() {
    return jobTitle;
  }


  public void setJobTitle(String jobTitle) {
    
    
    
    this.jobTitle = jobTitle;
  }


  public APIPayRegisterView department(String department) {
    
    
    
    
    this.department = department;
    return this;
  }

   /**
   * Get department
   * @return department
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDepartment() {
    return department;
  }


  public void setDepartment(String department) {
    
    
    
    this.department = department;
  }


  public APIPayRegisterView location(String location) {
    
    
    
    
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLocation() {
    return location;
  }


  public void setLocation(String location) {
    
    
    
    this.location = location;
  }


  public APIPayRegisterView payGroup(String payGroup) {
    
    
    
    
    this.payGroup = payGroup;
    return this;
  }

   /**
   * Get payGroup
   * @return payGroup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPayGroup() {
    return payGroup;
  }


  public void setPayGroup(String payGroup) {
    
    
    
    this.payGroup = payGroup;
  }


  public APIPayRegisterView employmentStatus(EmploymentStatus employmentStatus) {
    
    
    
    
    this.employmentStatus = employmentStatus;
    return this;
  }

   /**
   * Get employmentStatus
   * @return employmentStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmploymentStatus getEmploymentStatus() {
    return employmentStatus;
  }


  public void setEmploymentStatus(EmploymentStatus employmentStatus) {
    
    
    
    this.employmentStatus = employmentStatus;
  }


  public APIPayRegisterView workerType(WorkerType workerType) {
    
    
    
    
    this.workerType = workerType;
    return this;
  }

   /**
   * Get workerType
   * @return workerType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public WorkerType getWorkerType() {
    return workerType;
  }


  public void setWorkerType(WorkerType workerType) {
    
    
    
    this.workerType = workerType;
  }


  public APIPayRegisterView costCenter(String costCenter) {
    
    
    
    
    this.costCenter = costCenter;
    return this;
  }

   /**
   * Get costCenter
   * @return costCenter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCostCenter() {
    return costCenter;
  }


  public void setCostCenter(String costCenter) {
    
    
    
    this.costCenter = costCenter;
  }


  public APIPayRegisterView businessUnit(String businessUnit) {
    
    
    
    
    this.businessUnit = businessUnit;
    return this;
  }

   /**
   * Get businessUnit
   * @return businessUnit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBusinessUnit() {
    return businessUnit;
  }


  public void setBusinessUnit(String businessUnit) {
    
    
    
    this.businessUnit = businessUnit;
  }


  public APIPayRegisterView remunerationType(RemunerationType remunerationType) {
    
    
    
    
    this.remunerationType = remunerationType;
    return this;
  }

   /**
   * Get remunerationType
   * @return remunerationType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RemunerationType getRemunerationType() {
    return remunerationType;
  }


  public void setRemunerationType(RemunerationType remunerationType) {
    
    
    
    this.remunerationType = remunerationType;
  }


  public APIPayRegisterView gender(Gender gender) {
    
    
    
    
    this.gender = gender;
    return this;
  }

   /**
   * Get gender
   * @return gender
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Gender getGender() {
    return gender;
  }


  public void setGender(Gender gender) {
    
    
    
    this.gender = gender;
  }


  public APIPayRegisterView dateOfBirth(OffsetDateTime dateOfBirth) {
    
    
    
    
    this.dateOfBirth = dateOfBirth;
    return this;
  }

   /**
   * Get dateOfBirth
   * @return dateOfBirth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getDateOfBirth() {
    return dateOfBirth;
  }


  public void setDateOfBirth(OffsetDateTime dateOfBirth) {
    
    
    
    this.dateOfBirth = dateOfBirth;
  }


  public APIPayRegisterView exitDate(OffsetDateTime exitDate) {
    
    
    
    
    this.exitDate = exitDate;
    return this;
  }

   /**
   * Get exitDate
   * @return exitDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getExitDate() {
    return exitDate;
  }


  public void setExitDate(OffsetDateTime exitDate) {
    
    
    
    this.exitDate = exitDate;
  }


  public APIPayRegisterView cycleIdentifier(String cycleIdentifier) {
    
    
    
    
    this.cycleIdentifier = cycleIdentifier;
    return this;
  }

   /**
   * Get cycleIdentifier
   * @return cycleIdentifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCycleIdentifier() {
    return cycleIdentifier;
  }


  public void setCycleIdentifier(String cycleIdentifier) {
    
    
    
    this.cycleIdentifier = cycleIdentifier;
  }


  public APIPayRegisterView cycleFrom(OffsetDateTime cycleFrom) {
    
    
    
    
    this.cycleFrom = cycleFrom;
    return this;
  }

   /**
   * Get cycleFrom
   * @return cycleFrom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCycleFrom() {
    return cycleFrom;
  }


  public void setCycleFrom(OffsetDateTime cycleFrom) {
    
    
    
    this.cycleFrom = cycleFrom;
  }


  public APIPayRegisterView cycleTo(OffsetDateTime cycleTo) {
    
    
    
    
    this.cycleTo = cycleTo;
    return this;
  }

   /**
   * Get cycleTo
   * @return cycleTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCycleTo() {
    return cycleTo;
  }


  public void setCycleTo(OffsetDateTime cycleTo) {
    
    
    
    this.cycleTo = cycleTo;
  }


   /**
   * Get cycleMonthName
   * @return cycleMonthName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCycleMonthName() {
    return cycleMonthName;
  }




  public APIPayRegisterView cycleMonth(Integer cycleMonth) {
    
    
    
    
    this.cycleMonth = cycleMonth;
    return this;
  }

   /**
   * Get cycleMonth
   * @return cycleMonth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCycleMonth() {
    return cycleMonth;
  }


  public void setCycleMonth(Integer cycleMonth) {
    
    
    
    this.cycleMonth = cycleMonth;
  }


  public APIPayRegisterView cycleYear(Integer cycleYear) {
    
    
    
    
    this.cycleYear = cycleYear;
    return this;
  }

   /**
   * Get cycleYear
   * @return cycleYear
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCycleYear() {
    return cycleYear;
  }


  public void setCycleYear(Integer cycleYear) {
    
    
    
    this.cycleYear = cycleYear;
  }


  public APIPayRegisterView cyclePayDays(Double cyclePayDays) {
    
    
    
    
    this.cyclePayDays = cyclePayDays;
    return this;
  }

   /**
   * Get cyclePayDays
   * @return cyclePayDays
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getCyclePayDays() {
    return cyclePayDays;
  }


  public void setCyclePayDays(Double cyclePayDays) {
    
    
    
    this.cyclePayDays = cyclePayDays;
  }


  public APIPayRegisterView workingDays(Double workingDays) {
    
    
    
    
    this.workingDays = workingDays;
    return this;
  }

   /**
   * Get workingDays
   * @return workingDays
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getWorkingDays() {
    return workingDays;
  }


  public void setWorkingDays(Double workingDays) {
    
    
    
    this.workingDays = workingDays;
  }


  public APIPayRegisterView lossOfPayDays(Double lossOfPayDays) {
    
    
    
    
    this.lossOfPayDays = lossOfPayDays;
    return this;
  }

   /**
   * Get lossOfPayDays
   * @return lossOfPayDays
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getLossOfPayDays() {
    return lossOfPayDays;
  }


  public void setLossOfPayDays(Double lossOfPayDays) {
    
    
    
    this.lossOfPayDays = lossOfPayDays;
  }


  public APIPayRegisterView noOfPayDays(Double noOfPayDays) {
    
    
    
    
    this.noOfPayDays = noOfPayDays;
    return this;
  }

   /**
   * Get noOfPayDays
   * @return noOfPayDays
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getNoOfPayDays() {
    return noOfPayDays;
  }


  public void setNoOfPayDays(Double noOfPayDays) {
    
    
    
    this.noOfPayDays = noOfPayDays;
  }


  public APIPayRegisterView renumerationAmount(Double renumerationAmount) {
    
    
    
    
    this.renumerationAmount = renumerationAmount;
    return this;
  }

   /**
   * Get renumerationAmount
   * @return renumerationAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getRenumerationAmount() {
    return renumerationAmount;
  }


  public void setRenumerationAmount(Double renumerationAmount) {
    
    
    
    this.renumerationAmount = renumerationAmount;
  }


  public APIPayRegisterView status(EmployeePayrollCycleRunStatus status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeePayrollCycleRunStatus getStatus() {
    return status;
  }


  public void setStatus(EmployeePayrollCycleRunStatus status) {
    
    
    
    this.status = status;
  }


  public APIPayRegisterView statusDescription(String statusDescription) {
    
    
    
    
    this.statusDescription = statusDescription;
    return this;
  }

   /**
   * Get statusDescription
   * @return statusDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStatusDescription() {
    return statusDescription;
  }


  public void setStatusDescription(String statusDescription) {
    
    
    
    this.statusDescription = statusDescription;
  }


  public APIPayRegisterView earnings(List<PayItemView> earnings) {
    
    
    
    
    this.earnings = earnings;
    return this;
  }

  public APIPayRegisterView addEarningsItem(PayItemView earningsItem) {
    if (this.earnings == null) {
      this.earnings = new ArrayList<>();
    }
    this.earnings.add(earningsItem);
    return this;
  }

   /**
   * Get earnings
   * @return earnings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<PayItemView> getEarnings() {
    return earnings;
  }


  public void setEarnings(List<PayItemView> earnings) {
    
    
    
    this.earnings = earnings;
  }


  public APIPayRegisterView contributions(List<PayItemView> contributions) {
    
    
    
    
    this.contributions = contributions;
    return this;
  }

  public APIPayRegisterView addContributionsItem(PayItemView contributionsItem) {
    if (this.contributions == null) {
      this.contributions = new ArrayList<>();
    }
    this.contributions.add(contributionsItem);
    return this;
  }

   /**
   * Get contributions
   * @return contributions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<PayItemView> getContributions() {
    return contributions;
  }


  public void setContributions(List<PayItemView> contributions) {
    
    
    
    this.contributions = contributions;
  }


  public APIPayRegisterView deductions(List<PayItemView> deductions) {
    
    
    
    
    this.deductions = deductions;
    return this;
  }

  public APIPayRegisterView addDeductionsItem(PayItemView deductionsItem) {
    if (this.deductions == null) {
      this.deductions = new ArrayList<>();
    }
    this.deductions.add(deductionsItem);
    return this;
  }

   /**
   * Get deductions
   * @return deductions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<PayItemView> getDeductions() {
    return deductions;
  }


  public void setDeductions(List<PayItemView> deductions) {
    
    
    
    this.deductions = deductions;
  }


  public APIPayRegisterView reimbursements(List<PayItemView> reimbursements) {
    
    
    
    
    this.reimbursements = reimbursements;
    return this;
  }

  public APIPayRegisterView addReimbursementsItem(PayItemView reimbursementsItem) {
    if (this.reimbursements == null) {
      this.reimbursements = new ArrayList<>();
    }
    this.reimbursements.add(reimbursementsItem);
    return this;
  }

   /**
   * Get reimbursements
   * @return reimbursements
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<PayItemView> getReimbursements() {
    return reimbursements;
  }


  public void setReimbursements(List<PayItemView> reimbursements) {
    
    
    
    this.reimbursements = reimbursements;
  }


  public APIPayRegisterView outsideGrossPayables(List<PayItemView> outsideGrossPayables) {
    
    
    
    
    this.outsideGrossPayables = outsideGrossPayables;
    return this;
  }

  public APIPayRegisterView addOutsideGrossPayablesItem(PayItemView outsideGrossPayablesItem) {
    if (this.outsideGrossPayables == null) {
      this.outsideGrossPayables = new ArrayList<>();
    }
    this.outsideGrossPayables.add(outsideGrossPayablesItem);
    return this;
  }

   /**
   * Get outsideGrossPayables
   * @return outsideGrossPayables
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<PayItemView> getOutsideGrossPayables() {
    return outsideGrossPayables;
  }


  public void setOutsideGrossPayables(List<PayItemView> outsideGrossPayables) {
    
    
    
    this.outsideGrossPayables = outsideGrossPayables;
  }


  public APIPayRegisterView grossAmount(Double grossAmount) {
    
    
    
    
    this.grossAmount = grossAmount;
    return this;
  }

   /**
   * Get grossAmount
   * @return grossAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getGrossAmount() {
    return grossAmount;
  }


  public void setGrossAmount(Double grossAmount) {
    
    
    
    this.grossAmount = grossAmount;
  }


  public APIPayRegisterView totalOutsideGrossAmount(Double totalOutsideGrossAmount) {
    
    
    
    
    this.totalOutsideGrossAmount = totalOutsideGrossAmount;
    return this;
  }

   /**
   * Get totalOutsideGrossAmount
   * @return totalOutsideGrossAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getTotalOutsideGrossAmount() {
    return totalOutsideGrossAmount;
  }


  public void setTotalOutsideGrossAmount(Double totalOutsideGrossAmount) {
    
    
    
    this.totalOutsideGrossAmount = totalOutsideGrossAmount;
  }


   /**
   * Get total
   * @return total
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getTotal() {
    return total;
  }




  public APIPayRegisterView totalContributions(Double totalContributions) {
    
    
    
    
    this.totalContributions = totalContributions;
    return this;
  }

   /**
   * Get totalContributions
   * @return totalContributions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getTotalContributions() {
    return totalContributions;
  }


  public void setTotalContributions(Double totalContributions) {
    
    
    
    this.totalContributions = totalContributions;
  }


  public APIPayRegisterView totalDeductions(Double totalDeductions) {
    
    
    
    
    this.totalDeductions = totalDeductions;
    return this;
  }

   /**
   * Get totalDeductions
   * @return totalDeductions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getTotalDeductions() {
    return totalDeductions;
  }


  public void setTotalDeductions(Double totalDeductions) {
    
    
    
    this.totalDeductions = totalDeductions;
  }


  public APIPayRegisterView totalReimbursements(Double totalReimbursements) {
    
    
    
    
    this.totalReimbursements = totalReimbursements;
    return this;
  }

   /**
   * Get totalReimbursements
   * @return totalReimbursements
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getTotalReimbursements() {
    return totalReimbursements;
  }


  public void setTotalReimbursements(Double totalReimbursements) {
    
    
    
    this.totalReimbursements = totalReimbursements;
  }


  public APIPayRegisterView cashAdvanceAmount(Double cashAdvanceAmount) {
    
    
    
    
    this.cashAdvanceAmount = cashAdvanceAmount;
    return this;
  }

   /**
   * Get cashAdvanceAmount
   * @return cashAdvanceAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getCashAdvanceAmount() {
    return cashAdvanceAmount;
  }


  public void setCashAdvanceAmount(Double cashAdvanceAmount) {
    
    
    
    this.cashAdvanceAmount = cashAdvanceAmount;
  }


  public APIPayRegisterView cashAdvanceSettlementAmount(Double cashAdvanceSettlementAmount) {
    
    
    
    
    this.cashAdvanceSettlementAmount = cashAdvanceSettlementAmount;
    return this;
  }

   /**
   * Get cashAdvanceSettlementAmount
   * @return cashAdvanceSettlementAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getCashAdvanceSettlementAmount() {
    return cashAdvanceSettlementAmount;
  }


  public void setCashAdvanceSettlementAmount(Double cashAdvanceSettlementAmount) {
    
    
    
    this.cashAdvanceSettlementAmount = cashAdvanceSettlementAmount;
  }


  public APIPayRegisterView netAmount(Double netAmount) {
    
    
    
    
    this.netAmount = netAmount;
    return this;
  }

   /**
   * Get netAmount
   * @return netAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getNetAmount() {
    return netAmount;
  }


  public void setNetAmount(Double netAmount) {
    
    
    
    this.netAmount = netAmount;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the APIPayRegisterView instance itself
   */
  public APIPayRegisterView putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIPayRegisterView apIPayRegisterView = (APIPayRegisterView) o;
    return Objects.equals(this.identifier, apIPayRegisterView.identifier) &&
        Objects.equals(this.employeeNumber, apIPayRegisterView.employeeNumber) &&
        Objects.equals(this.employeeName, apIPayRegisterView.employeeName) &&
        Objects.equals(this.panNumber, apIPayRegisterView.panNumber) &&
        Objects.equals(this.dateJoined, apIPayRegisterView.dateJoined) &&
        Objects.equals(this.jobTitle, apIPayRegisterView.jobTitle) &&
        Objects.equals(this.department, apIPayRegisterView.department) &&
        Objects.equals(this.location, apIPayRegisterView.location) &&
        Objects.equals(this.payGroup, apIPayRegisterView.payGroup) &&
        Objects.equals(this.employmentStatus, apIPayRegisterView.employmentStatus) &&
        Objects.equals(this.workerType, apIPayRegisterView.workerType) &&
        Objects.equals(this.costCenter, apIPayRegisterView.costCenter) &&
        Objects.equals(this.businessUnit, apIPayRegisterView.businessUnit) &&
        Objects.equals(this.remunerationType, apIPayRegisterView.remunerationType) &&
        Objects.equals(this.gender, apIPayRegisterView.gender) &&
        Objects.equals(this.dateOfBirth, apIPayRegisterView.dateOfBirth) &&
        Objects.equals(this.exitDate, apIPayRegisterView.exitDate) &&
        Objects.equals(this.cycleIdentifier, apIPayRegisterView.cycleIdentifier) &&
        Objects.equals(this.cycleFrom, apIPayRegisterView.cycleFrom) &&
        Objects.equals(this.cycleTo, apIPayRegisterView.cycleTo) &&
        Objects.equals(this.cycleMonthName, apIPayRegisterView.cycleMonthName) &&
        Objects.equals(this.cycleMonth, apIPayRegisterView.cycleMonth) &&
        Objects.equals(this.cycleYear, apIPayRegisterView.cycleYear) &&
        Objects.equals(this.cyclePayDays, apIPayRegisterView.cyclePayDays) &&
        Objects.equals(this.workingDays, apIPayRegisterView.workingDays) &&
        Objects.equals(this.lossOfPayDays, apIPayRegisterView.lossOfPayDays) &&
        Objects.equals(this.noOfPayDays, apIPayRegisterView.noOfPayDays) &&
        Objects.equals(this.renumerationAmount, apIPayRegisterView.renumerationAmount) &&
        Objects.equals(this.status, apIPayRegisterView.status) &&
        Objects.equals(this.statusDescription, apIPayRegisterView.statusDescription) &&
        Objects.equals(this.earnings, apIPayRegisterView.earnings) &&
        Objects.equals(this.contributions, apIPayRegisterView.contributions) &&
        Objects.equals(this.deductions, apIPayRegisterView.deductions) &&
        Objects.equals(this.reimbursements, apIPayRegisterView.reimbursements) &&
        Objects.equals(this.outsideGrossPayables, apIPayRegisterView.outsideGrossPayables) &&
        Objects.equals(this.grossAmount, apIPayRegisterView.grossAmount) &&
        Objects.equals(this.totalOutsideGrossAmount, apIPayRegisterView.totalOutsideGrossAmount) &&
        Objects.equals(this.total, apIPayRegisterView.total) &&
        Objects.equals(this.totalContributions, apIPayRegisterView.totalContributions) &&
        Objects.equals(this.totalDeductions, apIPayRegisterView.totalDeductions) &&
        Objects.equals(this.totalReimbursements, apIPayRegisterView.totalReimbursements) &&
        Objects.equals(this.cashAdvanceAmount, apIPayRegisterView.cashAdvanceAmount) &&
        Objects.equals(this.cashAdvanceSettlementAmount, apIPayRegisterView.cashAdvanceSettlementAmount) &&
        Objects.equals(this.netAmount, apIPayRegisterView.netAmount)&&
        Objects.equals(this.additionalProperties, apIPayRegisterView.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(identifier, employeeNumber, employeeName, panNumber, dateJoined, jobTitle, department, location, payGroup, employmentStatus, workerType, costCenter, businessUnit, remunerationType, gender, dateOfBirth, exitDate, cycleIdentifier, cycleFrom, cycleTo, cycleMonthName, cycleMonth, cycleYear, cyclePayDays, workingDays, lossOfPayDays, noOfPayDays, renumerationAmount, status, statusDescription, earnings, contributions, deductions, reimbursements, outsideGrossPayables, grossAmount, totalOutsideGrossAmount, total, totalContributions, totalDeductions, totalReimbursements, cashAdvanceAmount, cashAdvanceSettlementAmount, netAmount, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIPayRegisterView {\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    employeeNumber: ").append(toIndentedString(employeeNumber)).append("\n");
    sb.append("    employeeName: ").append(toIndentedString(employeeName)).append("\n");
    sb.append("    panNumber: ").append(toIndentedString(panNumber)).append("\n");
    sb.append("    dateJoined: ").append(toIndentedString(dateJoined)).append("\n");
    sb.append("    jobTitle: ").append(toIndentedString(jobTitle)).append("\n");
    sb.append("    department: ").append(toIndentedString(department)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    payGroup: ").append(toIndentedString(payGroup)).append("\n");
    sb.append("    employmentStatus: ").append(toIndentedString(employmentStatus)).append("\n");
    sb.append("    workerType: ").append(toIndentedString(workerType)).append("\n");
    sb.append("    costCenter: ").append(toIndentedString(costCenter)).append("\n");
    sb.append("    businessUnit: ").append(toIndentedString(businessUnit)).append("\n");
    sb.append("    remunerationType: ").append(toIndentedString(remunerationType)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    exitDate: ").append(toIndentedString(exitDate)).append("\n");
    sb.append("    cycleIdentifier: ").append(toIndentedString(cycleIdentifier)).append("\n");
    sb.append("    cycleFrom: ").append(toIndentedString(cycleFrom)).append("\n");
    sb.append("    cycleTo: ").append(toIndentedString(cycleTo)).append("\n");
    sb.append("    cycleMonthName: ").append(toIndentedString(cycleMonthName)).append("\n");
    sb.append("    cycleMonth: ").append(toIndentedString(cycleMonth)).append("\n");
    sb.append("    cycleYear: ").append(toIndentedString(cycleYear)).append("\n");
    sb.append("    cyclePayDays: ").append(toIndentedString(cyclePayDays)).append("\n");
    sb.append("    workingDays: ").append(toIndentedString(workingDays)).append("\n");
    sb.append("    lossOfPayDays: ").append(toIndentedString(lossOfPayDays)).append("\n");
    sb.append("    noOfPayDays: ").append(toIndentedString(noOfPayDays)).append("\n");
    sb.append("    renumerationAmount: ").append(toIndentedString(renumerationAmount)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusDescription: ").append(toIndentedString(statusDescription)).append("\n");
    sb.append("    earnings: ").append(toIndentedString(earnings)).append("\n");
    sb.append("    contributions: ").append(toIndentedString(contributions)).append("\n");
    sb.append("    deductions: ").append(toIndentedString(deductions)).append("\n");
    sb.append("    reimbursements: ").append(toIndentedString(reimbursements)).append("\n");
    sb.append("    outsideGrossPayables: ").append(toIndentedString(outsideGrossPayables)).append("\n");
    sb.append("    grossAmount: ").append(toIndentedString(grossAmount)).append("\n");
    sb.append("    totalOutsideGrossAmount: ").append(toIndentedString(totalOutsideGrossAmount)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    totalContributions: ").append(toIndentedString(totalContributions)).append("\n");
    sb.append("    totalDeductions: ").append(toIndentedString(totalDeductions)).append("\n");
    sb.append("    totalReimbursements: ").append(toIndentedString(totalReimbursements)).append("\n");
    sb.append("    cashAdvanceAmount: ").append(toIndentedString(cashAdvanceAmount)).append("\n");
    sb.append("    cashAdvanceSettlementAmount: ").append(toIndentedString(cashAdvanceSettlementAmount)).append("\n");
    sb.append("    netAmount: ").append(toIndentedString(netAmount)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("identifier");
    openapiFields.add("employeeNumber");
    openapiFields.add("employeeName");
    openapiFields.add("panNumber");
    openapiFields.add("dateJoined");
    openapiFields.add("jobTitle");
    openapiFields.add("department");
    openapiFields.add("location");
    openapiFields.add("payGroup");
    openapiFields.add("employmentStatus");
    openapiFields.add("workerType");
    openapiFields.add("costCenter");
    openapiFields.add("businessUnit");
    openapiFields.add("remunerationType");
    openapiFields.add("gender");
    openapiFields.add("dateOfBirth");
    openapiFields.add("exitDate");
    openapiFields.add("cycleIdentifier");
    openapiFields.add("cycleFrom");
    openapiFields.add("cycleTo");
    openapiFields.add("cycleMonthName");
    openapiFields.add("cycleMonth");
    openapiFields.add("cycleYear");
    openapiFields.add("cyclePayDays");
    openapiFields.add("workingDays");
    openapiFields.add("lossOfPayDays");
    openapiFields.add("noOfPayDays");
    openapiFields.add("renumerationAmount");
    openapiFields.add("status");
    openapiFields.add("statusDescription");
    openapiFields.add("earnings");
    openapiFields.add("contributions");
    openapiFields.add("deductions");
    openapiFields.add("reimbursements");
    openapiFields.add("outsideGrossPayables");
    openapiFields.add("grossAmount");
    openapiFields.add("totalOutsideGrossAmount");
    openapiFields.add("total");
    openapiFields.add("totalContributions");
    openapiFields.add("totalDeductions");
    openapiFields.add("totalReimbursements");
    openapiFields.add("cashAdvanceAmount");
    openapiFields.add("cashAdvanceSettlementAmount");
    openapiFields.add("netAmount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to APIPayRegisterView
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!APIPayRegisterView.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APIPayRegisterView is not found in the empty JSON string", APIPayRegisterView.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("identifier").isJsonNull() && (jsonObj.get("identifier") != null && !jsonObj.get("identifier").isJsonNull()) && !jsonObj.get("identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifier").toString()));
      }
      if (!jsonObj.get("employeeNumber").isJsonNull() && (jsonObj.get("employeeNumber") != null && !jsonObj.get("employeeNumber").isJsonNull()) && !jsonObj.get("employeeNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeNumber").toString()));
      }
      if (!jsonObj.get("employeeName").isJsonNull() && (jsonObj.get("employeeName") != null && !jsonObj.get("employeeName").isJsonNull()) && !jsonObj.get("employeeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeName").toString()));
      }
      if (!jsonObj.get("panNumber").isJsonNull() && (jsonObj.get("panNumber") != null && !jsonObj.get("panNumber").isJsonNull()) && !jsonObj.get("panNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `panNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("panNumber").toString()));
      }
      if (!jsonObj.get("jobTitle").isJsonNull() && (jsonObj.get("jobTitle") != null && !jsonObj.get("jobTitle").isJsonNull()) && !jsonObj.get("jobTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobTitle").toString()));
      }
      if (!jsonObj.get("department").isJsonNull() && (jsonObj.get("department") != null && !jsonObj.get("department").isJsonNull()) && !jsonObj.get("department").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `department` to be a primitive type in the JSON string but got `%s`", jsonObj.get("department").toString()));
      }
      if (!jsonObj.get("location").isJsonNull() && (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if (!jsonObj.get("payGroup").isJsonNull() && (jsonObj.get("payGroup") != null && !jsonObj.get("payGroup").isJsonNull()) && !jsonObj.get("payGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payGroup").toString()));
      }
      if (!jsonObj.get("costCenter").isJsonNull() && (jsonObj.get("costCenter") != null && !jsonObj.get("costCenter").isJsonNull()) && !jsonObj.get("costCenter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `costCenter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("costCenter").toString()));
      }
      if (!jsonObj.get("businessUnit").isJsonNull() && (jsonObj.get("businessUnit") != null && !jsonObj.get("businessUnit").isJsonNull()) && !jsonObj.get("businessUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `businessUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("businessUnit").toString()));
      }
      if (!jsonObj.get("cycleIdentifier").isJsonNull() && (jsonObj.get("cycleIdentifier") != null && !jsonObj.get("cycleIdentifier").isJsonNull()) && !jsonObj.get("cycleIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cycleIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cycleIdentifier").toString()));
      }
      if (!jsonObj.get("cycleMonthName").isJsonNull() && (jsonObj.get("cycleMonthName") != null && !jsonObj.get("cycleMonthName").isJsonNull()) && !jsonObj.get("cycleMonthName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cycleMonthName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cycleMonthName").toString()));
      }
      if (!jsonObj.get("statusDescription").isJsonNull() && (jsonObj.get("statusDescription") != null && !jsonObj.get("statusDescription").isJsonNull()) && !jsonObj.get("statusDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusDescription").toString()));
      }
      if (jsonObj.get("earnings") != null && !jsonObj.get("earnings").isJsonNull()) {
        JsonArray jsonArrayearnings = jsonObj.getAsJsonArray("earnings");
        if (jsonArrayearnings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("earnings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `earnings` to be an array in the JSON string but got `%s`", jsonObj.get("earnings").toString()));
          }

          // validate the optional field `earnings` (array)
          for (int i = 0; i < jsonArrayearnings.size(); i++) {
            PayItemView.validateJsonObject(jsonArrayearnings.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("contributions") != null && !jsonObj.get("contributions").isJsonNull()) {
        JsonArray jsonArraycontributions = jsonObj.getAsJsonArray("contributions");
        if (jsonArraycontributions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("contributions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `contributions` to be an array in the JSON string but got `%s`", jsonObj.get("contributions").toString()));
          }

          // validate the optional field `contributions` (array)
          for (int i = 0; i < jsonArraycontributions.size(); i++) {
            PayItemView.validateJsonObject(jsonArraycontributions.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("deductions") != null && !jsonObj.get("deductions").isJsonNull()) {
        JsonArray jsonArraydeductions = jsonObj.getAsJsonArray("deductions");
        if (jsonArraydeductions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("deductions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `deductions` to be an array in the JSON string but got `%s`", jsonObj.get("deductions").toString()));
          }

          // validate the optional field `deductions` (array)
          for (int i = 0; i < jsonArraydeductions.size(); i++) {
            PayItemView.validateJsonObject(jsonArraydeductions.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("reimbursements") != null && !jsonObj.get("reimbursements").isJsonNull()) {
        JsonArray jsonArrayreimbursements = jsonObj.getAsJsonArray("reimbursements");
        if (jsonArrayreimbursements != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reimbursements").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reimbursements` to be an array in the JSON string but got `%s`", jsonObj.get("reimbursements").toString()));
          }

          // validate the optional field `reimbursements` (array)
          for (int i = 0; i < jsonArrayreimbursements.size(); i++) {
            PayItemView.validateJsonObject(jsonArrayreimbursements.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("outsideGrossPayables") != null && !jsonObj.get("outsideGrossPayables").isJsonNull()) {
        JsonArray jsonArrayoutsideGrossPayables = jsonObj.getAsJsonArray("outsideGrossPayables");
        if (jsonArrayoutsideGrossPayables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("outsideGrossPayables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `outsideGrossPayables` to be an array in the JSON string but got `%s`", jsonObj.get("outsideGrossPayables").toString()));
          }

          // validate the optional field `outsideGrossPayables` (array)
          for (int i = 0; i < jsonArrayoutsideGrossPayables.size(); i++) {
            PayItemView.validateJsonObject(jsonArrayoutsideGrossPayables.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APIPayRegisterView.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APIPayRegisterView' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APIPayRegisterView> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APIPayRegisterView.class));

       return (TypeAdapter<T>) new TypeAdapter<APIPayRegisterView>() {
           @Override
           public void write(JsonWriter out, APIPayRegisterView value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public APIPayRegisterView read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             APIPayRegisterView instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of APIPayRegisterView given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of APIPayRegisterView
  * @throws IOException if the JSON string is invalid with respect to APIPayRegisterView
  */
  public static APIPayRegisterView fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APIPayRegisterView.class);
  }

 /**
  * Convert an instance of APIPayRegisterView to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

