/*
 * Requisition
 * Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CustomField;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Education
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Education {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DEGREE = "degree";
  @SerializedName(SERIALIZED_NAME_DEGREE)
  private String degree;

  public static final String SERIALIZED_NAME_BRANCH = "branch";
  @SerializedName(SERIALIZED_NAME_BRANCH)
  private String branch;

  public static final String SERIALIZED_NAME_UNIVERSITY = "university";
  @SerializedName(SERIALIZED_NAME_UNIVERSITY)
  private String university;

  public static final String SERIALIZED_NAME_CGPA = "cgpa";
  @SerializedName(SERIALIZED_NAME_CGPA)
  private Double cgpa;

  public static final String SERIALIZED_NAME_YEAR_OF_JOINING = "yearOfJoining";
  @SerializedName(SERIALIZED_NAME_YEAR_OF_JOINING)
  private OffsetDateTime yearOfJoining;

  public static final String SERIALIZED_NAME_YEAR_OF_COMPLETION = "yearOfCompletion";
  @SerializedName(SERIALIZED_NAME_YEAR_OF_COMPLETION)
  private OffsetDateTime yearOfCompletion;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "customFields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private List<CustomField> customFields = null;

  public Education() {
  }

  public Education id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public Education degree(String degree) {
    
    
    
    
    this.degree = degree;
    return this;
  }

   /**
   * Get degree
   * @return degree
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDegree() {
    return degree;
  }


  public void setDegree(String degree) {
    
    
    
    this.degree = degree;
  }


  public Education branch(String branch) {
    
    
    
    
    this.branch = branch;
    return this;
  }

   /**
   * Get branch
   * @return branch
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBranch() {
    return branch;
  }


  public void setBranch(String branch) {
    
    
    
    this.branch = branch;
  }


  public Education university(String university) {
    
    
    
    
    this.university = university;
    return this;
  }

   /**
   * Get university
   * @return university
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUniversity() {
    return university;
  }


  public void setUniversity(String university) {
    
    
    
    this.university = university;
  }


  public Education cgpa(Double cgpa) {
    
    
    
    
    this.cgpa = cgpa;
    return this;
  }

   /**
   * Get cgpa
   * @return cgpa
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getCgpa() {
    return cgpa;
  }


  public void setCgpa(Double cgpa) {
    
    
    
    this.cgpa = cgpa;
  }


  public Education yearOfJoining(OffsetDateTime yearOfJoining) {
    
    
    
    
    this.yearOfJoining = yearOfJoining;
    return this;
  }

   /**
   * Get yearOfJoining
   * @return yearOfJoining
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getYearOfJoining() {
    return yearOfJoining;
  }


  public void setYearOfJoining(OffsetDateTime yearOfJoining) {
    
    
    
    this.yearOfJoining = yearOfJoining;
  }


  public Education yearOfCompletion(OffsetDateTime yearOfCompletion) {
    
    
    
    
    this.yearOfCompletion = yearOfCompletion;
    return this;
  }

   /**
   * Get yearOfCompletion
   * @return yearOfCompletion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getYearOfCompletion() {
    return yearOfCompletion;
  }


  public void setYearOfCompletion(OffsetDateTime yearOfCompletion) {
    
    
    
    this.yearOfCompletion = yearOfCompletion;
  }


  public Education customFields(List<CustomField> customFields) {
    
    
    
    
    this.customFields = customFields;
    return this;
  }

  public Education addCustomFieldsItem(CustomField customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new ArrayList<>();
    }
    this.customFields.add(customFieldsItem);
    return this;
  }

   /**
   * Get customFields
   * @return customFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CustomField> getCustomFields() {
    return customFields;
  }


  public void setCustomFields(List<CustomField> customFields) {
    
    
    
    this.customFields = customFields;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Education instance itself
   */
  public Education putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Education education = (Education) o;
    return Objects.equals(this.id, education.id) &&
        Objects.equals(this.degree, education.degree) &&
        Objects.equals(this.branch, education.branch) &&
        Objects.equals(this.university, education.university) &&
        Objects.equals(this.cgpa, education.cgpa) &&
        Objects.equals(this.yearOfJoining, education.yearOfJoining) &&
        Objects.equals(this.yearOfCompletion, education.yearOfCompletion) &&
        Objects.equals(this.customFields, education.customFields)&&
        Objects.equals(this.additionalProperties, education.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, degree, branch, university, cgpa, yearOfJoining, yearOfCompletion, customFields, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Education {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    degree: ").append(toIndentedString(degree)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    university: ").append(toIndentedString(university)).append("\n");
    sb.append("    cgpa: ").append(toIndentedString(cgpa)).append("\n");
    sb.append("    yearOfJoining: ").append(toIndentedString(yearOfJoining)).append("\n");
    sb.append("    yearOfCompletion: ").append(toIndentedString(yearOfCompletion)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("degree");
    openapiFields.add("branch");
    openapiFields.add("university");
    openapiFields.add("cgpa");
    openapiFields.add("yearOfJoining");
    openapiFields.add("yearOfCompletion");
    openapiFields.add("customFields");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Education
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Education.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Education is not found in the empty JSON string", Education.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonNull() && (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("degree").isJsonNull() && (jsonObj.get("degree") != null && !jsonObj.get("degree").isJsonNull()) && !jsonObj.get("degree").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `degree` to be a primitive type in the JSON string but got `%s`", jsonObj.get("degree").toString()));
      }
      if (!jsonObj.get("branch").isJsonNull() && (jsonObj.get("branch") != null && !jsonObj.get("branch").isJsonNull()) && !jsonObj.get("branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branch").toString()));
      }
      if (!jsonObj.get("university").isJsonNull() && (jsonObj.get("university") != null && !jsonObj.get("university").isJsonNull()) && !jsonObj.get("university").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `university` to be a primitive type in the JSON string but got `%s`", jsonObj.get("university").toString()));
      }
      if (jsonObj.get("customFields") != null && !jsonObj.get("customFields").isJsonNull()) {
        JsonArray jsonArraycustomFields = jsonObj.getAsJsonArray("customFields");
        if (jsonArraycustomFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customFields` to be an array in the JSON string but got `%s`", jsonObj.get("customFields").toString()));
          }

          // validate the optional field `customFields` (array)
          for (int i = 0; i < jsonArraycustomFields.size(); i++) {
            CustomField.validateJsonObject(jsonArraycustomFields.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Education.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Education' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Education> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Education.class));

       return (TypeAdapter<T>) new TypeAdapter<Education>() {
           @Override
           public void write(JsonWriter out, Education value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Education read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Education instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Education given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Education
  * @throws IOException if the JSON string is invalid with respect to Education
  */
  public static Education fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Education.class);
  }

 /**
  * Convert an instance of Education to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

