/*
 * Requisition
 * Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.LeaveRequestStatus;
import com.konfigthis.client.model.LeaveTypeSelection;
import com.konfigthis.client.model.SessionType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * LeaveRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LeaveRequest {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_EMPLOYEE_IDENTIFIER = "employeeIdentifier";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_IDENTIFIER)
  private String employeeIdentifier;

  public static final String SERIALIZED_NAME_EMPLOYEE_NUMBER = "employeeNumber";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_NUMBER)
  private String employeeNumber;

  public static final String SERIALIZED_NAME_FROM_DATE = "fromDate";
  @SerializedName(SERIALIZED_NAME_FROM_DATE)
  private OffsetDateTime fromDate;

  public static final String SERIALIZED_NAME_TO_DATE = "toDate";
  @SerializedName(SERIALIZED_NAME_TO_DATE)
  private OffsetDateTime toDate;

  public static final String SERIALIZED_NAME_FROM_SESSION = "fromSession";
  @SerializedName(SERIALIZED_NAME_FROM_SESSION)
  private SessionType fromSession;

  public static final String SERIALIZED_NAME_TO_SESSION = "toSession";
  @SerializedName(SERIALIZED_NAME_TO_SESSION)
  private SessionType toSession;

  public static final String SERIALIZED_NAME_REQUESTED_ON = "requestedOn";
  @SerializedName(SERIALIZED_NAME_REQUESTED_ON)
  private OffsetDateTime requestedOn;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private LeaveRequestStatus status;

  public static final String SERIALIZED_NAME_SELECTION = "selection";
  @SerializedName(SERIALIZED_NAME_SELECTION)
  private List<LeaveTypeSelection> selection = null;

  public static final String SERIALIZED_NAME_CANCEL_REJECT_REASON = "cancelRejectReason";
  @SerializedName(SERIALIZED_NAME_CANCEL_REJECT_REASON)
  private String cancelRejectReason;

  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private String identifier;

  public LeaveRequest() {
  }

  
  public LeaveRequest(
     String id
  ) {
    this();
    this.id = id;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getId() {
    return id;
  }




  public LeaveRequest employeeIdentifier(String employeeIdentifier) {
    
    
    
    
    this.employeeIdentifier = employeeIdentifier;
    return this;
  }

   /**
   * Get employeeIdentifier
   * @return employeeIdentifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployeeIdentifier() {
    return employeeIdentifier;
  }


  public void setEmployeeIdentifier(String employeeIdentifier) {
    
    
    
    this.employeeIdentifier = employeeIdentifier;
  }


  public LeaveRequest employeeNumber(String employeeNumber) {
    
    
    
    
    this.employeeNumber = employeeNumber;
    return this;
  }

   /**
   * Get employeeNumber
   * @return employeeNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployeeNumber() {
    return employeeNumber;
  }


  public void setEmployeeNumber(String employeeNumber) {
    
    
    
    this.employeeNumber = employeeNumber;
  }


  public LeaveRequest fromDate(OffsetDateTime fromDate) {
    
    
    
    
    this.fromDate = fromDate;
    return this;
  }

   /**
   * Get fromDate
   * @return fromDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getFromDate() {
    return fromDate;
  }


  public void setFromDate(OffsetDateTime fromDate) {
    
    
    
    this.fromDate = fromDate;
  }


  public LeaveRequest toDate(OffsetDateTime toDate) {
    
    
    
    
    this.toDate = toDate;
    return this;
  }

   /**
   * Get toDate
   * @return toDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getToDate() {
    return toDate;
  }


  public void setToDate(OffsetDateTime toDate) {
    
    
    
    this.toDate = toDate;
  }


  public LeaveRequest fromSession(SessionType fromSession) {
    
    
    
    
    this.fromSession = fromSession;
    return this;
  }

   /**
   * Get fromSession
   * @return fromSession
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SessionType getFromSession() {
    return fromSession;
  }


  public void setFromSession(SessionType fromSession) {
    
    
    
    this.fromSession = fromSession;
  }


  public LeaveRequest toSession(SessionType toSession) {
    
    
    
    
    this.toSession = toSession;
    return this;
  }

   /**
   * Get toSession
   * @return toSession
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SessionType getToSession() {
    return toSession;
  }


  public void setToSession(SessionType toSession) {
    
    
    
    this.toSession = toSession;
  }


  public LeaveRequest requestedOn(OffsetDateTime requestedOn) {
    
    
    
    
    this.requestedOn = requestedOn;
    return this;
  }

   /**
   * Get requestedOn
   * @return requestedOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getRequestedOn() {
    return requestedOn;
  }


  public void setRequestedOn(OffsetDateTime requestedOn) {
    
    
    
    this.requestedOn = requestedOn;
  }


  public LeaveRequest note(String note) {
    
    
    
    
    this.note = note;
    return this;
  }

   /**
   * Get note
   * @return note
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNote() {
    return note;
  }


  public void setNote(String note) {
    
    
    
    this.note = note;
  }


  public LeaveRequest status(LeaveRequestStatus status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LeaveRequestStatus getStatus() {
    return status;
  }


  public void setStatus(LeaveRequestStatus status) {
    
    
    
    this.status = status;
  }


  public LeaveRequest selection(List<LeaveTypeSelection> selection) {
    
    
    
    
    this.selection = selection;
    return this;
  }

  public LeaveRequest addSelectionItem(LeaveTypeSelection selectionItem) {
    if (this.selection == null) {
      this.selection = new ArrayList<>();
    }
    this.selection.add(selectionItem);
    return this;
  }

   /**
   * Get selection
   * @return selection
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<LeaveTypeSelection> getSelection() {
    return selection;
  }


  public void setSelection(List<LeaveTypeSelection> selection) {
    
    
    
    this.selection = selection;
  }


  public LeaveRequest cancelRejectReason(String cancelRejectReason) {
    
    
    
    
    this.cancelRejectReason = cancelRejectReason;
    return this;
  }

   /**
   * Get cancelRejectReason
   * @return cancelRejectReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCancelRejectReason() {
    return cancelRejectReason;
  }


  public void setCancelRejectReason(String cancelRejectReason) {
    
    
    
    this.cancelRejectReason = cancelRejectReason;
  }


  public LeaveRequest identifier(String identifier) {
    
    
    
    
    this.identifier = identifier;
    return this;
  }

   /**
   * Get identifier
   * @return identifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIdentifier() {
    return identifier;
  }


  public void setIdentifier(String identifier) {
    
    
    
    this.identifier = identifier;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LeaveRequest instance itself
   */
  public LeaveRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LeaveRequest leaveRequest = (LeaveRequest) o;
    return Objects.equals(this.id, leaveRequest.id) &&
        Objects.equals(this.employeeIdentifier, leaveRequest.employeeIdentifier) &&
        Objects.equals(this.employeeNumber, leaveRequest.employeeNumber) &&
        Objects.equals(this.fromDate, leaveRequest.fromDate) &&
        Objects.equals(this.toDate, leaveRequest.toDate) &&
        Objects.equals(this.fromSession, leaveRequest.fromSession) &&
        Objects.equals(this.toSession, leaveRequest.toSession) &&
        Objects.equals(this.requestedOn, leaveRequest.requestedOn) &&
        Objects.equals(this.note, leaveRequest.note) &&
        Objects.equals(this.status, leaveRequest.status) &&
        Objects.equals(this.selection, leaveRequest.selection) &&
        Objects.equals(this.cancelRejectReason, leaveRequest.cancelRejectReason) &&
        Objects.equals(this.identifier, leaveRequest.identifier)&&
        Objects.equals(this.additionalProperties, leaveRequest.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, employeeIdentifier, employeeNumber, fromDate, toDate, fromSession, toSession, requestedOn, note, status, selection, cancelRejectReason, identifier, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LeaveRequest {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    employeeIdentifier: ").append(toIndentedString(employeeIdentifier)).append("\n");
    sb.append("    employeeNumber: ").append(toIndentedString(employeeNumber)).append("\n");
    sb.append("    fromDate: ").append(toIndentedString(fromDate)).append("\n");
    sb.append("    toDate: ").append(toIndentedString(toDate)).append("\n");
    sb.append("    fromSession: ").append(toIndentedString(fromSession)).append("\n");
    sb.append("    toSession: ").append(toIndentedString(toSession)).append("\n");
    sb.append("    requestedOn: ").append(toIndentedString(requestedOn)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    selection: ").append(toIndentedString(selection)).append("\n");
    sb.append("    cancelRejectReason: ").append(toIndentedString(cancelRejectReason)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("employeeIdentifier");
    openapiFields.add("employeeNumber");
    openapiFields.add("fromDate");
    openapiFields.add("toDate");
    openapiFields.add("fromSession");
    openapiFields.add("toSession");
    openapiFields.add("requestedOn");
    openapiFields.add("note");
    openapiFields.add("status");
    openapiFields.add("selection");
    openapiFields.add("cancelRejectReason");
    openapiFields.add("identifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LeaveRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LeaveRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LeaveRequest is not found in the empty JSON string", LeaveRequest.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonNull() && (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("employeeIdentifier").isJsonNull() && (jsonObj.get("employeeIdentifier") != null && !jsonObj.get("employeeIdentifier").isJsonNull()) && !jsonObj.get("employeeIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeIdentifier").toString()));
      }
      if (!jsonObj.get("employeeNumber").isJsonNull() && (jsonObj.get("employeeNumber") != null && !jsonObj.get("employeeNumber").isJsonNull()) && !jsonObj.get("employeeNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeNumber").toString()));
      }
      if (!jsonObj.get("note").isJsonNull() && (jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if (jsonObj.get("selection") != null && !jsonObj.get("selection").isJsonNull()) {
        JsonArray jsonArrayselection = jsonObj.getAsJsonArray("selection");
        if (jsonArrayselection != null) {
          // ensure the json data is an array
          if (!jsonObj.get("selection").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `selection` to be an array in the JSON string but got `%s`", jsonObj.get("selection").toString()));
          }

          // validate the optional field `selection` (array)
          for (int i = 0; i < jsonArrayselection.size(); i++) {
            LeaveTypeSelection.validateJsonObject(jsonArrayselection.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("cancelRejectReason").isJsonNull() && (jsonObj.get("cancelRejectReason") != null && !jsonObj.get("cancelRejectReason").isJsonNull()) && !jsonObj.get("cancelRejectReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancelRejectReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancelRejectReason").toString()));
      }
      if (!jsonObj.get("identifier").isJsonNull() && (jsonObj.get("identifier") != null && !jsonObj.get("identifier").isJsonNull()) && !jsonObj.get("identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LeaveRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LeaveRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LeaveRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LeaveRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<LeaveRequest>() {
           @Override
           public void write(JsonWriter out, LeaveRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LeaveRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LeaveRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LeaveRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LeaveRequest
  * @throws IOException if the JSON string is invalid with respect to LeaveRequest
  */
  public static LeaveRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LeaveRequest.class);
  }

 /**
  * Convert an instance of LeaveRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

