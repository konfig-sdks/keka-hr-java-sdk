/*
 * Requisition
 * Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AssetStatus;
import com.konfigthis.client.model.EmployeeLookup;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Asset
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Asset {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ASSET_NAME = "assetName";
  @SerializedName(SERIALIZED_NAME_ASSET_NAME)
  private String assetName;

  public static final String SERIALIZED_NAME_ASSET_ID = "assetId";
  @SerializedName(SERIALIZED_NAME_ASSET_ID)
  private String assetId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private AssetStatus status;

  public static final String SERIALIZED_NAME_ASSET_CATEGORY_ID = "assetCategoryId";
  @SerializedName(SERIALIZED_NAME_ASSET_CATEGORY_ID)
  private String assetCategoryId;

  public static final String SERIALIZED_NAME_ASSET_TYPE_ID = "assetTypeId";
  @SerializedName(SERIALIZED_NAME_ASSET_TYPE_ID)
  private String assetTypeId;

  public static final String SERIALIZED_NAME_ASSET_CONDITION_ID = "assetConditionId";
  @SerializedName(SERIALIZED_NAME_ASSET_CONDITION_ID)
  private String assetConditionId;

  public static final String SERIALIZED_NAME_ASSIGNED_TO = "assignedTo";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_TO)
  private EmployeeLookup assignedTo;

  public static final String SERIALIZED_NAME_ASSIGNED_ON = "assignedOn";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_ON)
  private OffsetDateTime assignedOn;

  public Asset() {
  }

  public Asset id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public Asset assetName(String assetName) {
    
    
    
    
    this.assetName = assetName;
    return this;
  }

   /**
   * Get assetName
   * @return assetName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAssetName() {
    return assetName;
  }


  public void setAssetName(String assetName) {
    
    
    
    this.assetName = assetName;
  }


  public Asset assetId(String assetId) {
    
    
    
    
    this.assetId = assetId;
    return this;
  }

   /**
   * Get assetId
   * @return assetId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAssetId() {
    return assetId;
  }


  public void setAssetId(String assetId) {
    
    
    
    this.assetId = assetId;
  }


  public Asset status(AssetStatus status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AssetStatus getStatus() {
    return status;
  }


  public void setStatus(AssetStatus status) {
    
    
    
    this.status = status;
  }


  public Asset assetCategoryId(String assetCategoryId) {
    
    
    
    
    this.assetCategoryId = assetCategoryId;
    return this;
  }

   /**
   * Get assetCategoryId
   * @return assetCategoryId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAssetCategoryId() {
    return assetCategoryId;
  }


  public void setAssetCategoryId(String assetCategoryId) {
    
    
    
    this.assetCategoryId = assetCategoryId;
  }


  public Asset assetTypeId(String assetTypeId) {
    
    
    
    
    this.assetTypeId = assetTypeId;
    return this;
  }

   /**
   * Get assetTypeId
   * @return assetTypeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAssetTypeId() {
    return assetTypeId;
  }


  public void setAssetTypeId(String assetTypeId) {
    
    
    
    this.assetTypeId = assetTypeId;
  }


  public Asset assetConditionId(String assetConditionId) {
    
    
    
    
    this.assetConditionId = assetConditionId;
    return this;
  }

   /**
   * Get assetConditionId
   * @return assetConditionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAssetConditionId() {
    return assetConditionId;
  }


  public void setAssetConditionId(String assetConditionId) {
    
    
    
    this.assetConditionId = assetConditionId;
  }


  public Asset assignedTo(EmployeeLookup assignedTo) {
    
    
    
    
    this.assignedTo = assignedTo;
    return this;
  }

   /**
   * Get assignedTo
   * @return assignedTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeLookup getAssignedTo() {
    return assignedTo;
  }


  public void setAssignedTo(EmployeeLookup assignedTo) {
    
    
    
    this.assignedTo = assignedTo;
  }


  public Asset assignedOn(OffsetDateTime assignedOn) {
    
    
    
    
    this.assignedOn = assignedOn;
    return this;
  }

   /**
   * Get assignedOn
   * @return assignedOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getAssignedOn() {
    return assignedOn;
  }


  public void setAssignedOn(OffsetDateTime assignedOn) {
    
    
    
    this.assignedOn = assignedOn;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Asset instance itself
   */
  public Asset putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Asset asset = (Asset) o;
    return Objects.equals(this.id, asset.id) &&
        Objects.equals(this.assetName, asset.assetName) &&
        Objects.equals(this.assetId, asset.assetId) &&
        Objects.equals(this.status, asset.status) &&
        Objects.equals(this.assetCategoryId, asset.assetCategoryId) &&
        Objects.equals(this.assetTypeId, asset.assetTypeId) &&
        Objects.equals(this.assetConditionId, asset.assetConditionId) &&
        Objects.equals(this.assignedTo, asset.assignedTo) &&
        Objects.equals(this.assignedOn, asset.assignedOn)&&
        Objects.equals(this.additionalProperties, asset.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, assetName, assetId, status, assetCategoryId, assetTypeId, assetConditionId, assignedTo, assignedOn, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Asset {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    assetName: ").append(toIndentedString(assetName)).append("\n");
    sb.append("    assetId: ").append(toIndentedString(assetId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    assetCategoryId: ").append(toIndentedString(assetCategoryId)).append("\n");
    sb.append("    assetTypeId: ").append(toIndentedString(assetTypeId)).append("\n");
    sb.append("    assetConditionId: ").append(toIndentedString(assetConditionId)).append("\n");
    sb.append("    assignedTo: ").append(toIndentedString(assignedTo)).append("\n");
    sb.append("    assignedOn: ").append(toIndentedString(assignedOn)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("assetName");
    openapiFields.add("assetId");
    openapiFields.add("status");
    openapiFields.add("assetCategoryId");
    openapiFields.add("assetTypeId");
    openapiFields.add("assetConditionId");
    openapiFields.add("assignedTo");
    openapiFields.add("assignedOn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Asset
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Asset.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Asset is not found in the empty JSON string", Asset.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonNull() && (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("assetName").isJsonNull() && (jsonObj.get("assetName") != null && !jsonObj.get("assetName").isJsonNull()) && !jsonObj.get("assetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetName").toString()));
      }
      if (!jsonObj.get("assetId").isJsonNull() && (jsonObj.get("assetId") != null && !jsonObj.get("assetId").isJsonNull()) && !jsonObj.get("assetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetId").toString()));
      }
      if (!jsonObj.get("assetCategoryId").isJsonNull() && (jsonObj.get("assetCategoryId") != null && !jsonObj.get("assetCategoryId").isJsonNull()) && !jsonObj.get("assetCategoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetCategoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetCategoryId").toString()));
      }
      if (!jsonObj.get("assetTypeId").isJsonNull() && (jsonObj.get("assetTypeId") != null && !jsonObj.get("assetTypeId").isJsonNull()) && !jsonObj.get("assetTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetTypeId").toString()));
      }
      if (!jsonObj.get("assetConditionId").isJsonNull() && (jsonObj.get("assetConditionId") != null && !jsonObj.get("assetConditionId").isJsonNull()) && !jsonObj.get("assetConditionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetConditionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetConditionId").toString()));
      }
      // validate the optional field `assignedTo`
      if (jsonObj.get("assignedTo") != null && !jsonObj.get("assignedTo").isJsonNull()) {
        EmployeeLookup.validateJsonObject(jsonObj.getAsJsonObject("assignedTo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Asset.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Asset' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Asset> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Asset.class));

       return (TypeAdapter<T>) new TypeAdapter<Asset>() {
           @Override
           public void write(JsonWriter out, Asset value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Asset read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Asset instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Asset given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Asset
  * @throws IOException if the JSON string is invalid with respect to Asset
  */
  public static Asset fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Asset.class);
  }

 /**
  * Convert an instance of Asset to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

