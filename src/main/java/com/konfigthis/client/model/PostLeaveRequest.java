/*
 * Requisition
 * Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.SessionType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PostLeaveRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PostLeaveRequest {
  public static final String SERIALIZED_NAME_EMPLOYEE_ID = "employeeId";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_ID)
  private String employeeId;

  public static final String SERIALIZED_NAME_REQUESTED_BY = "requestedBy";
  @SerializedName(SERIALIZED_NAME_REQUESTED_BY)
  private String requestedBy;

  public static final String SERIALIZED_NAME_FROM_DATE = "fromDate";
  @SerializedName(SERIALIZED_NAME_FROM_DATE)
  private OffsetDateTime fromDate;

  public static final String SERIALIZED_NAME_TO_DATE = "toDate";
  @SerializedName(SERIALIZED_NAME_TO_DATE)
  private OffsetDateTime toDate;

  public static final String SERIALIZED_NAME_FROM_SESSION = "fromSession";
  @SerializedName(SERIALIZED_NAME_FROM_SESSION)
  private SessionType fromSession;

  public static final String SERIALIZED_NAME_TO_SESSION = "toSession";
  @SerializedName(SERIALIZED_NAME_TO_SESSION)
  private SessionType toSession;

  public static final String SERIALIZED_NAME_LEAVE_TYPE_ID = "leaveTypeId";
  @SerializedName(SERIALIZED_NAME_LEAVE_TYPE_ID)
  private String leaveTypeId;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public PostLeaveRequest() {
  }

  public PostLeaveRequest employeeId(String employeeId) {
    
    
    
    
    this.employeeId = employeeId;
    return this;
  }

   /**
   * Get employeeId
   * @return employeeId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getEmployeeId() {
    return employeeId;
  }


  public void setEmployeeId(String employeeId) {
    
    
    
    this.employeeId = employeeId;
  }


  public PostLeaveRequest requestedBy(String requestedBy) {
    
    
    
    
    this.requestedBy = requestedBy;
    return this;
  }

   /**
   * Get requestedBy
   * @return requestedBy
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getRequestedBy() {
    return requestedBy;
  }


  public void setRequestedBy(String requestedBy) {
    
    
    
    this.requestedBy = requestedBy;
  }


  public PostLeaveRequest fromDate(OffsetDateTime fromDate) {
    
    
    
    
    this.fromDate = fromDate;
    return this;
  }

   /**
   * Get fromDate
   * @return fromDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getFromDate() {
    return fromDate;
  }


  public void setFromDate(OffsetDateTime fromDate) {
    
    
    
    this.fromDate = fromDate;
  }


  public PostLeaveRequest toDate(OffsetDateTime toDate) {
    
    
    
    
    this.toDate = toDate;
    return this;
  }

   /**
   * Get toDate
   * @return toDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getToDate() {
    return toDate;
  }


  public void setToDate(OffsetDateTime toDate) {
    
    
    
    this.toDate = toDate;
  }


  public PostLeaveRequest fromSession(SessionType fromSession) {
    
    
    
    
    this.fromSession = fromSession;
    return this;
  }

   /**
   * Get fromSession
   * @return fromSession
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SessionType getFromSession() {
    return fromSession;
  }


  public void setFromSession(SessionType fromSession) {
    
    
    
    this.fromSession = fromSession;
  }


  public PostLeaveRequest toSession(SessionType toSession) {
    
    
    
    
    this.toSession = toSession;
    return this;
  }

   /**
   * Get toSession
   * @return toSession
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SessionType getToSession() {
    return toSession;
  }


  public void setToSession(SessionType toSession) {
    
    
    
    this.toSession = toSession;
  }


  public PostLeaveRequest leaveTypeId(String leaveTypeId) {
    
    
    
    
    this.leaveTypeId = leaveTypeId;
    return this;
  }

   /**
   * Get leaveTypeId
   * @return leaveTypeId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getLeaveTypeId() {
    return leaveTypeId;
  }


  public void setLeaveTypeId(String leaveTypeId) {
    
    
    
    this.leaveTypeId = leaveTypeId;
  }


  public PostLeaveRequest reason(String reason) {
    
    
    
    
    this.reason = reason;
    return this;
  }

   /**
   * Get reason
   * @return reason
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getReason() {
    return reason;
  }


  public void setReason(String reason) {
    
    
    
    this.reason = reason;
  }


  public PostLeaveRequest note(String note) {
    
    
    
    
    this.note = note;
    return this;
  }

   /**
   * Get note
   * @return note
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNote() {
    return note;
  }


  public void setNote(String note) {
    
    
    
    this.note = note;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PostLeaveRequest instance itself
   */
  public PostLeaveRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostLeaveRequest postLeaveRequest = (PostLeaveRequest) o;
    return Objects.equals(this.employeeId, postLeaveRequest.employeeId) &&
        Objects.equals(this.requestedBy, postLeaveRequest.requestedBy) &&
        Objects.equals(this.fromDate, postLeaveRequest.fromDate) &&
        Objects.equals(this.toDate, postLeaveRequest.toDate) &&
        Objects.equals(this.fromSession, postLeaveRequest.fromSession) &&
        Objects.equals(this.toSession, postLeaveRequest.toSession) &&
        Objects.equals(this.leaveTypeId, postLeaveRequest.leaveTypeId) &&
        Objects.equals(this.reason, postLeaveRequest.reason) &&
        Objects.equals(this.note, postLeaveRequest.note)&&
        Objects.equals(this.additionalProperties, postLeaveRequest.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(employeeId, requestedBy, fromDate, toDate, fromSession, toSession, leaveTypeId, reason, note, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostLeaveRequest {\n");
    sb.append("    employeeId: ").append(toIndentedString(employeeId)).append("\n");
    sb.append("    requestedBy: ").append(toIndentedString(requestedBy)).append("\n");
    sb.append("    fromDate: ").append(toIndentedString(fromDate)).append("\n");
    sb.append("    toDate: ").append(toIndentedString(toDate)).append("\n");
    sb.append("    fromSession: ").append(toIndentedString(fromSession)).append("\n");
    sb.append("    toSession: ").append(toIndentedString(toSession)).append("\n");
    sb.append("    leaveTypeId: ").append(toIndentedString(leaveTypeId)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("employeeId");
    openapiFields.add("requestedBy");
    openapiFields.add("fromDate");
    openapiFields.add("toDate");
    openapiFields.add("fromSession");
    openapiFields.add("toSession");
    openapiFields.add("leaveTypeId");
    openapiFields.add("reason");
    openapiFields.add("note");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("employeeId");
    openapiRequiredFields.add("requestedBy");
    openapiRequiredFields.add("fromDate");
    openapiRequiredFields.add("toDate");
    openapiRequiredFields.add("leaveTypeId");
    openapiRequiredFields.add("reason");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PostLeaveRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PostLeaveRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostLeaveRequest is not found in the empty JSON string", PostLeaveRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PostLeaveRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("employeeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeId").toString()));
      }
      if (!jsonObj.get("requestedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestedBy").toString()));
      }
      if (!jsonObj.get("leaveTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leaveTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leaveTypeId").toString()));
      }
      if (!jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if (!jsonObj.get("note").isJsonNull() && (jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostLeaveRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostLeaveRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostLeaveRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostLeaveRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PostLeaveRequest>() {
           @Override
           public void write(JsonWriter out, PostLeaveRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PostLeaveRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PostLeaveRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PostLeaveRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PostLeaveRequest
  * @throws IOException if the JSON string is invalid with respect to PostLeaveRequest
  */
  public static PostLeaveRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostLeaveRequest.class);
  }

 /**
  * Convert an instance of PostLeaveRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

