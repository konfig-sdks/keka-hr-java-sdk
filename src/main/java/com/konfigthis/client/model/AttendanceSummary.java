/*
 * Requisition
 * Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AttendanceDayType;
import com.konfigthis.client.model.AttendanceTimeEntry;
import com.konfigthis.client.model.LeaveDayStatus;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AttendanceSummary
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AttendanceSummary {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_EMPLOYEE_NUMBER = "employeeNumber";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_NUMBER)
  private String employeeNumber;

  public static final String SERIALIZED_NAME_EMPLOYEE_IDENTIFIER = "employeeIdentifier";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_IDENTIFIER)
  private String employeeIdentifier;

  public static final String SERIALIZED_NAME_ATTENDANCE_DATE = "attendanceDate";
  @SerializedName(SERIALIZED_NAME_ATTENDANCE_DATE)
  private OffsetDateTime attendanceDate;

  public static final String SERIALIZED_NAME_DAY_TYPE = "dayType";
  @SerializedName(SERIALIZED_NAME_DAY_TYPE)
  private AttendanceDayType dayType;

  public static final String SERIALIZED_NAME_LEAVE_DAY_STATUS = "leaveDayStatus";
  @SerializedName(SERIALIZED_NAME_LEAVE_DAY_STATUS)
  private LeaveDayStatus leaveDayStatus;

  public static final String SERIALIZED_NAME_SHIFT_START_TIME = "shiftStartTime";
  @SerializedName(SERIALIZED_NAME_SHIFT_START_TIME)
  private OffsetDateTime shiftStartTime;

  public static final String SERIALIZED_NAME_SHIFT_END_TIME = "shiftEndTime";
  @SerializedName(SERIALIZED_NAME_SHIFT_END_TIME)
  private OffsetDateTime shiftEndTime;

  public static final String SERIALIZED_NAME_SHIFT_DURATION = "shiftDuration";
  @SerializedName(SERIALIZED_NAME_SHIFT_DURATION)
  private Double shiftDuration;

  public static final String SERIALIZED_NAME_SHIFT_BREAK_DURATION = "shiftBreakDuration";
  @SerializedName(SERIALIZED_NAME_SHIFT_BREAK_DURATION)
  private Double shiftBreakDuration;

  public static final String SERIALIZED_NAME_SHIFT_EFFECTIVE_DURATION = "shiftEffectiveDuration";
  @SerializedName(SERIALIZED_NAME_SHIFT_EFFECTIVE_DURATION)
  private Double shiftEffectiveDuration;

  public static final String SERIALIZED_NAME_TOTAL_GROSS_HOURS = "totalGrossHours";
  @SerializedName(SERIALIZED_NAME_TOTAL_GROSS_HOURS)
  private Double totalGrossHours;

  public static final String SERIALIZED_NAME_TOTAL_EFFECTIVE_HOURS = "totalEffectiveHours";
  @SerializedName(SERIALIZED_NAME_TOTAL_EFFECTIVE_HOURS)
  private Double totalEffectiveHours;

  public static final String SERIALIZED_NAME_TOTAL_BREAK_DURATION = "totalBreakDuration";
  @SerializedName(SERIALIZED_NAME_TOTAL_BREAK_DURATION)
  private Double totalBreakDuration;

  public static final String SERIALIZED_NAME_TOTAL_EFFECTIVE_OVERTIME_DURATION = "totalEffectiveOvertimeDuration";
  @SerializedName(SERIALIZED_NAME_TOTAL_EFFECTIVE_OVERTIME_DURATION)
  private Double totalEffectiveOvertimeDuration;

  public static final String SERIALIZED_NAME_TOTAL_GROSS_OVERTIME_DURATION = "totalGrossOvertimeDuration";
  @SerializedName(SERIALIZED_NAME_TOTAL_GROSS_OVERTIME_DURATION)
  private Double totalGrossOvertimeDuration;

  public static final String SERIALIZED_NAME_FIRST_IN_OF_THE_DAY = "firstInOfTheDay";
  @SerializedName(SERIALIZED_NAME_FIRST_IN_OF_THE_DAY)
  private AttendanceTimeEntry firstInOfTheDay;

  public static final String SERIALIZED_NAME_LAST_OUT_OF_THE_DAY = "lastOutOfTheDay";
  @SerializedName(SERIALIZED_NAME_LAST_OUT_OF_THE_DAY)
  private AttendanceTimeEntry lastOutOfTheDay;

  public AttendanceSummary() {
  }

  public AttendanceSummary id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public AttendanceSummary employeeNumber(String employeeNumber) {
    
    
    
    
    this.employeeNumber = employeeNumber;
    return this;
  }

   /**
   * Get employeeNumber
   * @return employeeNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployeeNumber() {
    return employeeNumber;
  }


  public void setEmployeeNumber(String employeeNumber) {
    
    
    
    this.employeeNumber = employeeNumber;
  }


  public AttendanceSummary employeeIdentifier(String employeeIdentifier) {
    
    
    
    
    this.employeeIdentifier = employeeIdentifier;
    return this;
  }

   /**
   * Get employeeIdentifier
   * @return employeeIdentifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployeeIdentifier() {
    return employeeIdentifier;
  }


  public void setEmployeeIdentifier(String employeeIdentifier) {
    
    
    
    this.employeeIdentifier = employeeIdentifier;
  }


  public AttendanceSummary attendanceDate(OffsetDateTime attendanceDate) {
    
    
    
    
    this.attendanceDate = attendanceDate;
    return this;
  }

   /**
   * Get attendanceDate
   * @return attendanceDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getAttendanceDate() {
    return attendanceDate;
  }


  public void setAttendanceDate(OffsetDateTime attendanceDate) {
    
    
    
    this.attendanceDate = attendanceDate;
  }


  public AttendanceSummary dayType(AttendanceDayType dayType) {
    
    
    
    
    this.dayType = dayType;
    return this;
  }

   /**
   * Get dayType
   * @return dayType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AttendanceDayType getDayType() {
    return dayType;
  }


  public void setDayType(AttendanceDayType dayType) {
    
    
    
    this.dayType = dayType;
  }


  public AttendanceSummary leaveDayStatus(LeaveDayStatus leaveDayStatus) {
    
    
    
    
    this.leaveDayStatus = leaveDayStatus;
    return this;
  }

   /**
   * Get leaveDayStatus
   * @return leaveDayStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LeaveDayStatus getLeaveDayStatus() {
    return leaveDayStatus;
  }


  public void setLeaveDayStatus(LeaveDayStatus leaveDayStatus) {
    
    
    
    this.leaveDayStatus = leaveDayStatus;
  }


  public AttendanceSummary shiftStartTime(OffsetDateTime shiftStartTime) {
    
    
    
    
    this.shiftStartTime = shiftStartTime;
    return this;
  }

   /**
   * Get shiftStartTime
   * @return shiftStartTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getShiftStartTime() {
    return shiftStartTime;
  }


  public void setShiftStartTime(OffsetDateTime shiftStartTime) {
    
    
    
    this.shiftStartTime = shiftStartTime;
  }


  public AttendanceSummary shiftEndTime(OffsetDateTime shiftEndTime) {
    
    
    
    
    this.shiftEndTime = shiftEndTime;
    return this;
  }

   /**
   * Get shiftEndTime
   * @return shiftEndTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getShiftEndTime() {
    return shiftEndTime;
  }


  public void setShiftEndTime(OffsetDateTime shiftEndTime) {
    
    
    
    this.shiftEndTime = shiftEndTime;
  }


  public AttendanceSummary shiftDuration(Double shiftDuration) {
    
    
    
    
    this.shiftDuration = shiftDuration;
    return this;
  }

   /**
   * Get shiftDuration
   * @return shiftDuration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getShiftDuration() {
    return shiftDuration;
  }


  public void setShiftDuration(Double shiftDuration) {
    
    
    
    this.shiftDuration = shiftDuration;
  }


  public AttendanceSummary shiftBreakDuration(Double shiftBreakDuration) {
    
    
    
    
    this.shiftBreakDuration = shiftBreakDuration;
    return this;
  }

   /**
   * Get shiftBreakDuration
   * @return shiftBreakDuration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getShiftBreakDuration() {
    return shiftBreakDuration;
  }


  public void setShiftBreakDuration(Double shiftBreakDuration) {
    
    
    
    this.shiftBreakDuration = shiftBreakDuration;
  }


  public AttendanceSummary shiftEffectiveDuration(Double shiftEffectiveDuration) {
    
    
    
    
    this.shiftEffectiveDuration = shiftEffectiveDuration;
    return this;
  }

   /**
   * Get shiftEffectiveDuration
   * @return shiftEffectiveDuration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getShiftEffectiveDuration() {
    return shiftEffectiveDuration;
  }


  public void setShiftEffectiveDuration(Double shiftEffectiveDuration) {
    
    
    
    this.shiftEffectiveDuration = shiftEffectiveDuration;
  }


  public AttendanceSummary totalGrossHours(Double totalGrossHours) {
    
    
    
    
    this.totalGrossHours = totalGrossHours;
    return this;
  }

   /**
   * Get totalGrossHours
   * @return totalGrossHours
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getTotalGrossHours() {
    return totalGrossHours;
  }


  public void setTotalGrossHours(Double totalGrossHours) {
    
    
    
    this.totalGrossHours = totalGrossHours;
  }


  public AttendanceSummary totalEffectiveHours(Double totalEffectiveHours) {
    
    
    
    
    this.totalEffectiveHours = totalEffectiveHours;
    return this;
  }

   /**
   * Get totalEffectiveHours
   * @return totalEffectiveHours
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getTotalEffectiveHours() {
    return totalEffectiveHours;
  }


  public void setTotalEffectiveHours(Double totalEffectiveHours) {
    
    
    
    this.totalEffectiveHours = totalEffectiveHours;
  }


  public AttendanceSummary totalBreakDuration(Double totalBreakDuration) {
    
    
    
    
    this.totalBreakDuration = totalBreakDuration;
    return this;
  }

   /**
   * Get totalBreakDuration
   * @return totalBreakDuration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getTotalBreakDuration() {
    return totalBreakDuration;
  }


  public void setTotalBreakDuration(Double totalBreakDuration) {
    
    
    
    this.totalBreakDuration = totalBreakDuration;
  }


  public AttendanceSummary totalEffectiveOvertimeDuration(Double totalEffectiveOvertimeDuration) {
    
    
    
    
    this.totalEffectiveOvertimeDuration = totalEffectiveOvertimeDuration;
    return this;
  }

   /**
   * Get totalEffectiveOvertimeDuration
   * @return totalEffectiveOvertimeDuration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getTotalEffectiveOvertimeDuration() {
    return totalEffectiveOvertimeDuration;
  }


  public void setTotalEffectiveOvertimeDuration(Double totalEffectiveOvertimeDuration) {
    
    
    
    this.totalEffectiveOvertimeDuration = totalEffectiveOvertimeDuration;
  }


  public AttendanceSummary totalGrossOvertimeDuration(Double totalGrossOvertimeDuration) {
    
    
    
    
    this.totalGrossOvertimeDuration = totalGrossOvertimeDuration;
    return this;
  }

   /**
   * Get totalGrossOvertimeDuration
   * @return totalGrossOvertimeDuration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getTotalGrossOvertimeDuration() {
    return totalGrossOvertimeDuration;
  }


  public void setTotalGrossOvertimeDuration(Double totalGrossOvertimeDuration) {
    
    
    
    this.totalGrossOvertimeDuration = totalGrossOvertimeDuration;
  }


  public AttendanceSummary firstInOfTheDay(AttendanceTimeEntry firstInOfTheDay) {
    
    
    
    
    this.firstInOfTheDay = firstInOfTheDay;
    return this;
  }

   /**
   * Get firstInOfTheDay
   * @return firstInOfTheDay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AttendanceTimeEntry getFirstInOfTheDay() {
    return firstInOfTheDay;
  }


  public void setFirstInOfTheDay(AttendanceTimeEntry firstInOfTheDay) {
    
    
    
    this.firstInOfTheDay = firstInOfTheDay;
  }


  public AttendanceSummary lastOutOfTheDay(AttendanceTimeEntry lastOutOfTheDay) {
    
    
    
    
    this.lastOutOfTheDay = lastOutOfTheDay;
    return this;
  }

   /**
   * Get lastOutOfTheDay
   * @return lastOutOfTheDay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AttendanceTimeEntry getLastOutOfTheDay() {
    return lastOutOfTheDay;
  }


  public void setLastOutOfTheDay(AttendanceTimeEntry lastOutOfTheDay) {
    
    
    
    this.lastOutOfTheDay = lastOutOfTheDay;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AttendanceSummary instance itself
   */
  public AttendanceSummary putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttendanceSummary attendanceSummary = (AttendanceSummary) o;
    return Objects.equals(this.id, attendanceSummary.id) &&
        Objects.equals(this.employeeNumber, attendanceSummary.employeeNumber) &&
        Objects.equals(this.employeeIdentifier, attendanceSummary.employeeIdentifier) &&
        Objects.equals(this.attendanceDate, attendanceSummary.attendanceDate) &&
        Objects.equals(this.dayType, attendanceSummary.dayType) &&
        Objects.equals(this.leaveDayStatus, attendanceSummary.leaveDayStatus) &&
        Objects.equals(this.shiftStartTime, attendanceSummary.shiftStartTime) &&
        Objects.equals(this.shiftEndTime, attendanceSummary.shiftEndTime) &&
        Objects.equals(this.shiftDuration, attendanceSummary.shiftDuration) &&
        Objects.equals(this.shiftBreakDuration, attendanceSummary.shiftBreakDuration) &&
        Objects.equals(this.shiftEffectiveDuration, attendanceSummary.shiftEffectiveDuration) &&
        Objects.equals(this.totalGrossHours, attendanceSummary.totalGrossHours) &&
        Objects.equals(this.totalEffectiveHours, attendanceSummary.totalEffectiveHours) &&
        Objects.equals(this.totalBreakDuration, attendanceSummary.totalBreakDuration) &&
        Objects.equals(this.totalEffectiveOvertimeDuration, attendanceSummary.totalEffectiveOvertimeDuration) &&
        Objects.equals(this.totalGrossOvertimeDuration, attendanceSummary.totalGrossOvertimeDuration) &&
        Objects.equals(this.firstInOfTheDay, attendanceSummary.firstInOfTheDay) &&
        Objects.equals(this.lastOutOfTheDay, attendanceSummary.lastOutOfTheDay)&&
        Objects.equals(this.additionalProperties, attendanceSummary.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, employeeNumber, employeeIdentifier, attendanceDate, dayType, leaveDayStatus, shiftStartTime, shiftEndTime, shiftDuration, shiftBreakDuration, shiftEffectiveDuration, totalGrossHours, totalEffectiveHours, totalBreakDuration, totalEffectiveOvertimeDuration, totalGrossOvertimeDuration, firstInOfTheDay, lastOutOfTheDay, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttendanceSummary {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    employeeNumber: ").append(toIndentedString(employeeNumber)).append("\n");
    sb.append("    employeeIdentifier: ").append(toIndentedString(employeeIdentifier)).append("\n");
    sb.append("    attendanceDate: ").append(toIndentedString(attendanceDate)).append("\n");
    sb.append("    dayType: ").append(toIndentedString(dayType)).append("\n");
    sb.append("    leaveDayStatus: ").append(toIndentedString(leaveDayStatus)).append("\n");
    sb.append("    shiftStartTime: ").append(toIndentedString(shiftStartTime)).append("\n");
    sb.append("    shiftEndTime: ").append(toIndentedString(shiftEndTime)).append("\n");
    sb.append("    shiftDuration: ").append(toIndentedString(shiftDuration)).append("\n");
    sb.append("    shiftBreakDuration: ").append(toIndentedString(shiftBreakDuration)).append("\n");
    sb.append("    shiftEffectiveDuration: ").append(toIndentedString(shiftEffectiveDuration)).append("\n");
    sb.append("    totalGrossHours: ").append(toIndentedString(totalGrossHours)).append("\n");
    sb.append("    totalEffectiveHours: ").append(toIndentedString(totalEffectiveHours)).append("\n");
    sb.append("    totalBreakDuration: ").append(toIndentedString(totalBreakDuration)).append("\n");
    sb.append("    totalEffectiveOvertimeDuration: ").append(toIndentedString(totalEffectiveOvertimeDuration)).append("\n");
    sb.append("    totalGrossOvertimeDuration: ").append(toIndentedString(totalGrossOvertimeDuration)).append("\n");
    sb.append("    firstInOfTheDay: ").append(toIndentedString(firstInOfTheDay)).append("\n");
    sb.append("    lastOutOfTheDay: ").append(toIndentedString(lastOutOfTheDay)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("employeeNumber");
    openapiFields.add("employeeIdentifier");
    openapiFields.add("attendanceDate");
    openapiFields.add("dayType");
    openapiFields.add("leaveDayStatus");
    openapiFields.add("shiftStartTime");
    openapiFields.add("shiftEndTime");
    openapiFields.add("shiftDuration");
    openapiFields.add("shiftBreakDuration");
    openapiFields.add("shiftEffectiveDuration");
    openapiFields.add("totalGrossHours");
    openapiFields.add("totalEffectiveHours");
    openapiFields.add("totalBreakDuration");
    openapiFields.add("totalEffectiveOvertimeDuration");
    openapiFields.add("totalGrossOvertimeDuration");
    openapiFields.add("firstInOfTheDay");
    openapiFields.add("lastOutOfTheDay");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AttendanceSummary
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AttendanceSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AttendanceSummary is not found in the empty JSON string", AttendanceSummary.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonNull() && (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("employeeNumber").isJsonNull() && (jsonObj.get("employeeNumber") != null && !jsonObj.get("employeeNumber").isJsonNull()) && !jsonObj.get("employeeNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeNumber").toString()));
      }
      if (!jsonObj.get("employeeIdentifier").isJsonNull() && (jsonObj.get("employeeIdentifier") != null && !jsonObj.get("employeeIdentifier").isJsonNull()) && !jsonObj.get("employeeIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeIdentifier").toString()));
      }
      // validate the optional field `firstInOfTheDay`
      if (jsonObj.get("firstInOfTheDay") != null && !jsonObj.get("firstInOfTheDay").isJsonNull()) {
        AttendanceTimeEntry.validateJsonObject(jsonObj.getAsJsonObject("firstInOfTheDay"));
      }
      // validate the optional field `lastOutOfTheDay`
      if (jsonObj.get("lastOutOfTheDay") != null && !jsonObj.get("lastOutOfTheDay").isJsonNull()) {
        AttendanceTimeEntry.validateJsonObject(jsonObj.getAsJsonObject("lastOutOfTheDay"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AttendanceSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AttendanceSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AttendanceSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AttendanceSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<AttendanceSummary>() {
           @Override
           public void write(JsonWriter out, AttendanceSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AttendanceSummary read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AttendanceSummary instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AttendanceSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AttendanceSummary
  * @throws IOException if the JSON string is invalid with respect to AttendanceSummary
  */
  public static AttendanceSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AttendanceSummary.class);
  }

 /**
  * Convert an instance of AttendanceSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

