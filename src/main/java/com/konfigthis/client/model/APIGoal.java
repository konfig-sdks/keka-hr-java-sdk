/*
 * Requisition
 * Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.APIBaseGoal;
import com.konfigthis.client.model.GoalMetricType;
import com.konfigthis.client.model.GoalStatus;
import com.konfigthis.client.model.GoalType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * APIGoal
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class APIGoal {
  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = null;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_EMPLOYEE_ID = "employeeId";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_ID)
  private String employeeId;

  public static final String SERIALIZED_NAME_EMPLOYEE_NUMBER = "employeeNumber";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_NUMBER)
  private String employeeNumber;

  public static final String SERIALIZED_NAME_TIME_FRAME_ID = "timeFrameId";
  @SerializedName(SERIALIZED_NAME_TIME_FRAME_ID)
  private String timeFrameId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_INITIAL_VALUE = "initialValue";
  @SerializedName(SERIALIZED_NAME_INITIAL_VALUE)
  private Double initialValue;

  public static final String SERIALIZED_NAME_TARGET_VALUE = "targetValue";
  @SerializedName(SERIALIZED_NAME_TARGET_VALUE)
  private Double targetValue;

  public static final String SERIALIZED_NAME_CURRENT_VALUE = "currentValue";
  @SerializedName(SERIALIZED_NAME_CURRENT_VALUE)
  private Double currentValue;

  public static final String SERIALIZED_NAME_PROGRESS = "progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private Double progress;

  public static final String SERIALIZED_NAME_METRIC_TYPE = "metricType";
  @SerializedName(SERIALIZED_NAME_METRIC_TYPE)
  private GoalMetricType metricType;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private GoalStatus status;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private GoalType type;

  public static final String SERIALIZED_NAME_DEPARTMENT_ID = "departmentId";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT_ID)
  private String departmentId;

  public static final String SERIALIZED_NAME_PARENT_GOAL = "parentGoal";
  @SerializedName(SERIALIZED_NAME_PARENT_GOAL)
  private APIBaseGoal parentGoal;

  public static final String SERIALIZED_NAME_CHILD_GOALS = "childGoals";
  @SerializedName(SERIALIZED_NAME_CHILD_GOALS)
  private List<APIBaseGoal> childGoals = null;

  public static final String SERIALIZED_NAME_IS_PRIVATE = "isPrivate";
  @SerializedName(SERIALIZED_NAME_IS_PRIVATE)
  private Boolean isPrivate;

  public APIGoal() {
  }

  
  public APIGoal(
     String id
  ) {
    this();
    this.id = id;
  }

  public APIGoal tags(List<String> tags) {
    
    
    
    
    this.tags = tags;
    return this;
  }

  public APIGoal addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getTags() {
    return tags;
  }


  public void setTags(List<String> tags) {
    
    
    
    this.tags = tags;
  }


  public APIGoal description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getId() {
    return id;
  }




  public APIGoal employeeId(String employeeId) {
    
    
    
    
    this.employeeId = employeeId;
    return this;
  }

   /**
   * Get employeeId
   * @return employeeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployeeId() {
    return employeeId;
  }


  public void setEmployeeId(String employeeId) {
    
    
    
    this.employeeId = employeeId;
  }


  public APIGoal employeeNumber(String employeeNumber) {
    
    
    
    
    this.employeeNumber = employeeNumber;
    return this;
  }

   /**
   * Get employeeNumber
   * @return employeeNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployeeNumber() {
    return employeeNumber;
  }


  public void setEmployeeNumber(String employeeNumber) {
    
    
    
    this.employeeNumber = employeeNumber;
  }


  public APIGoal timeFrameId(String timeFrameId) {
    
    
    
    
    this.timeFrameId = timeFrameId;
    return this;
  }

   /**
   * Get timeFrameId
   * @return timeFrameId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTimeFrameId() {
    return timeFrameId;
  }


  public void setTimeFrameId(String timeFrameId) {
    
    
    
    this.timeFrameId = timeFrameId;
  }


  public APIGoal name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public APIGoal startDate(OffsetDateTime startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    
    
    
    this.startDate = startDate;
  }


  public APIGoal endDate(OffsetDateTime endDate) {
    
    
    
    
    this.endDate = endDate;
    return this;
  }

   /**
   * Get endDate
   * @return endDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getEndDate() {
    return endDate;
  }


  public void setEndDate(OffsetDateTime endDate) {
    
    
    
    this.endDate = endDate;
  }


  public APIGoal initialValue(Double initialValue) {
    
    
    
    
    this.initialValue = initialValue;
    return this;
  }

   /**
   * Get initialValue
   * @return initialValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getInitialValue() {
    return initialValue;
  }


  public void setInitialValue(Double initialValue) {
    
    
    
    this.initialValue = initialValue;
  }


  public APIGoal targetValue(Double targetValue) {
    
    
    
    
    this.targetValue = targetValue;
    return this;
  }

   /**
   * Get targetValue
   * @return targetValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getTargetValue() {
    return targetValue;
  }


  public void setTargetValue(Double targetValue) {
    
    
    
    this.targetValue = targetValue;
  }


  public APIGoal currentValue(Double currentValue) {
    
    
    
    
    this.currentValue = currentValue;
    return this;
  }

   /**
   * Get currentValue
   * @return currentValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getCurrentValue() {
    return currentValue;
  }


  public void setCurrentValue(Double currentValue) {
    
    
    
    this.currentValue = currentValue;
  }


  public APIGoal progress(Double progress) {
    
    
    
    
    this.progress = progress;
    return this;
  }

   /**
   * Get progress
   * @return progress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getProgress() {
    return progress;
  }


  public void setProgress(Double progress) {
    
    
    
    this.progress = progress;
  }


  public APIGoal metricType(GoalMetricType metricType) {
    
    
    
    
    this.metricType = metricType;
    return this;
  }

   /**
   * Get metricType
   * @return metricType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public GoalMetricType getMetricType() {
    return metricType;
  }


  public void setMetricType(GoalMetricType metricType) {
    
    
    
    this.metricType = metricType;
  }


  public APIGoal status(GoalStatus status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public GoalStatus getStatus() {
    return status;
  }


  public void setStatus(GoalStatus status) {
    
    
    
    this.status = status;
  }


  public APIGoal type(GoalType type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public GoalType getType() {
    return type;
  }


  public void setType(GoalType type) {
    
    
    
    this.type = type;
  }


  public APIGoal departmentId(String departmentId) {
    
    
    
    
    this.departmentId = departmentId;
    return this;
  }

   /**
   * Get departmentId
   * @return departmentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDepartmentId() {
    return departmentId;
  }


  public void setDepartmentId(String departmentId) {
    
    
    
    this.departmentId = departmentId;
  }


  public APIGoal parentGoal(APIBaseGoal parentGoal) {
    
    
    
    
    this.parentGoal = parentGoal;
    return this;
  }

   /**
   * Get parentGoal
   * @return parentGoal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public APIBaseGoal getParentGoal() {
    return parentGoal;
  }


  public void setParentGoal(APIBaseGoal parentGoal) {
    
    
    
    this.parentGoal = parentGoal;
  }


  public APIGoal childGoals(List<APIBaseGoal> childGoals) {
    
    
    
    
    this.childGoals = childGoals;
    return this;
  }

  public APIGoal addChildGoalsItem(APIBaseGoal childGoalsItem) {
    if (this.childGoals == null) {
      this.childGoals = new ArrayList<>();
    }
    this.childGoals.add(childGoalsItem);
    return this;
  }

   /**
   * Get childGoals
   * @return childGoals
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<APIBaseGoal> getChildGoals() {
    return childGoals;
  }


  public void setChildGoals(List<APIBaseGoal> childGoals) {
    
    
    
    this.childGoals = childGoals;
  }


  public APIGoal isPrivate(Boolean isPrivate) {
    
    
    
    
    this.isPrivate = isPrivate;
    return this;
  }

   /**
   * Get isPrivate
   * @return isPrivate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsPrivate() {
    return isPrivate;
  }


  public void setIsPrivate(Boolean isPrivate) {
    
    
    
    this.isPrivate = isPrivate;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the APIGoal instance itself
   */
  public APIGoal putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIGoal apIGoal = (APIGoal) o;
    return Objects.equals(this.tags, apIGoal.tags) &&
        Objects.equals(this.description, apIGoal.description) &&
        Objects.equals(this.id, apIGoal.id) &&
        Objects.equals(this.employeeId, apIGoal.employeeId) &&
        Objects.equals(this.employeeNumber, apIGoal.employeeNumber) &&
        Objects.equals(this.timeFrameId, apIGoal.timeFrameId) &&
        Objects.equals(this.name, apIGoal.name) &&
        Objects.equals(this.startDate, apIGoal.startDate) &&
        Objects.equals(this.endDate, apIGoal.endDate) &&
        Objects.equals(this.initialValue, apIGoal.initialValue) &&
        Objects.equals(this.targetValue, apIGoal.targetValue) &&
        Objects.equals(this.currentValue, apIGoal.currentValue) &&
        Objects.equals(this.progress, apIGoal.progress) &&
        Objects.equals(this.metricType, apIGoal.metricType) &&
        Objects.equals(this.status, apIGoal.status) &&
        Objects.equals(this.type, apIGoal.type) &&
        Objects.equals(this.departmentId, apIGoal.departmentId) &&
        Objects.equals(this.parentGoal, apIGoal.parentGoal) &&
        Objects.equals(this.childGoals, apIGoal.childGoals) &&
        Objects.equals(this.isPrivate, apIGoal.isPrivate)&&
        Objects.equals(this.additionalProperties, apIGoal.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(tags, description, id, employeeId, employeeNumber, timeFrameId, name, startDate, endDate, initialValue, targetValue, currentValue, progress, metricType, status, type, departmentId, parentGoal, childGoals, isPrivate, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIGoal {\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    employeeId: ").append(toIndentedString(employeeId)).append("\n");
    sb.append("    employeeNumber: ").append(toIndentedString(employeeNumber)).append("\n");
    sb.append("    timeFrameId: ").append(toIndentedString(timeFrameId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    initialValue: ").append(toIndentedString(initialValue)).append("\n");
    sb.append("    targetValue: ").append(toIndentedString(targetValue)).append("\n");
    sb.append("    currentValue: ").append(toIndentedString(currentValue)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    metricType: ").append(toIndentedString(metricType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    departmentId: ").append(toIndentedString(departmentId)).append("\n");
    sb.append("    parentGoal: ").append(toIndentedString(parentGoal)).append("\n");
    sb.append("    childGoals: ").append(toIndentedString(childGoals)).append("\n");
    sb.append("    isPrivate: ").append(toIndentedString(isPrivate)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tags");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("employeeId");
    openapiFields.add("employeeNumber");
    openapiFields.add("timeFrameId");
    openapiFields.add("name");
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("initialValue");
    openapiFields.add("targetValue");
    openapiFields.add("currentValue");
    openapiFields.add("progress");
    openapiFields.add("metricType");
    openapiFields.add("status");
    openapiFields.add("type");
    openapiFields.add("departmentId");
    openapiFields.add("parentGoal");
    openapiFields.add("childGoals");
    openapiFields.add("isPrivate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to APIGoal
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!APIGoal.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APIGoal is not found in the empty JSON string", APIGoal.openapiRequiredFields.toString()));
        }
      }
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string or null but got `%s`", jsonObj.get("tags").toString()));
      }
      if (!jsonObj.get("description").isJsonNull() && (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("id").isJsonNull() && (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("employeeId").isJsonNull() && (jsonObj.get("employeeId") != null && !jsonObj.get("employeeId").isJsonNull()) && !jsonObj.get("employeeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeId").toString()));
      }
      if (!jsonObj.get("employeeNumber").isJsonNull() && (jsonObj.get("employeeNumber") != null && !jsonObj.get("employeeNumber").isJsonNull()) && !jsonObj.get("employeeNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeNumber").toString()));
      }
      if (!jsonObj.get("timeFrameId").isJsonNull() && (jsonObj.get("timeFrameId") != null && !jsonObj.get("timeFrameId").isJsonNull()) && !jsonObj.get("timeFrameId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeFrameId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeFrameId").toString()));
      }
      if (!jsonObj.get("name").isJsonNull() && (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("departmentId").isJsonNull() && (jsonObj.get("departmentId") != null && !jsonObj.get("departmentId").isJsonNull()) && !jsonObj.get("departmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `departmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("departmentId").toString()));
      }
      // validate the optional field `parentGoal`
      if (jsonObj.get("parentGoal") != null && !jsonObj.get("parentGoal").isJsonNull()) {
        APIBaseGoal.validateJsonObject(jsonObj.getAsJsonObject("parentGoal"));
      }
      if (jsonObj.get("childGoals") != null && !jsonObj.get("childGoals").isJsonNull()) {
        JsonArray jsonArraychildGoals = jsonObj.getAsJsonArray("childGoals");
        if (jsonArraychildGoals != null) {
          // ensure the json data is an array
          if (!jsonObj.get("childGoals").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `childGoals` to be an array in the JSON string but got `%s`", jsonObj.get("childGoals").toString()));
          }

          // validate the optional field `childGoals` (array)
          for (int i = 0; i < jsonArraychildGoals.size(); i++) {
            APIBaseGoal.validateJsonObject(jsonArraychildGoals.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APIGoal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APIGoal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APIGoal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APIGoal.class));

       return (TypeAdapter<T>) new TypeAdapter<APIGoal>() {
           @Override
           public void write(JsonWriter out, APIGoal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public APIGoal read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             APIGoal instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of APIGoal given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of APIGoal
  * @throws IOException if the JSON string is invalid with respect to APIGoal
  */
  public static APIGoal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APIGoal.class);
  }

 /**
  * Convert an instance of APIGoal to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

