/*
 * Requisition
 * Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.HiringTeamDTO;
import com.konfigthis.client.model.JobCustomFieldDTO;
import com.konfigthis.client.model.JobStatus;
import com.konfigthis.client.model.LocationDTO;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * JobDTO
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class JobDTO {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NO_OF_OPENINGS = "noOfOpenings";
  @SerializedName(SERIALIZED_NAME_NO_OF_OPENINGS)
  private String noOfOpenings;

  public static final String SERIALIZED_NAME_DEPARTMENT_NAME = "departmentName";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT_NAME)
  private String departmentName;

  public static final String SERIALIZED_NAME_JOB_TYPE = "jobType";
  @SerializedName(SERIALIZED_NAME_JOB_TYPE)
  private String jobType;

  public static final String SERIALIZED_NAME_IS_REFERRAL_ENABLED = "isReferralEnabled";
  @SerializedName(SERIALIZED_NAME_IS_REFERRAL_ENABLED)
  private Boolean isReferralEnabled;

  public static final String SERIALIZED_NAME_IS_CREATED_FROM_REQUISITION = "isCreatedFromRequisition";
  @SerializedName(SERIALIZED_NAME_IS_CREATED_FROM_REQUISITION)
  private Boolean isCreatedFromRequisition;

  public static final String SERIALIZED_NAME_REQUISITION_IDENTIFIER = "requisitionIdentifier";
  @SerializedName(SERIALIZED_NAME_REQUISITION_IDENTIFIER)
  private String requisitionIdentifier;

  public static final String SERIALIZED_NAME_CAN_ALLOW_INTERNAL_EMPLOYEES = "canAllowInternalEmployees";
  @SerializedName(SERIALIZED_NAME_CAN_ALLOW_INTERNAL_EMPLOYEES)
  private Boolean canAllowInternalEmployees;

  public static final String SERIALIZED_NAME_ORG_JOB_ID = "orgJobId";
  @SerializedName(SERIALIZED_NAME_ORG_JOB_ID)
  private String orgJobId;

  public static final String SERIALIZED_NAME_JOB_LOCATIONS = "jobLocations";
  @SerializedName(SERIALIZED_NAME_JOB_LOCATIONS)
  private List<LocationDTO> jobLocations = null;

  public static final String SERIALIZED_NAME_HIRING_TEAM = "hiringTeam";
  @SerializedName(SERIALIZED_NAME_HIRING_TEAM)
  private List<HiringTeamDTO> hiringTeam = null;

  public static final String SERIALIZED_NAME_CAREER_PORTAL_URL = "careerPortalUrl";
  @SerializedName(SERIALIZED_NAME_CAREER_PORTAL_URL)
  private String careerPortalUrl;

  public static final String SERIALIZED_NAME_TARGET_HIRE_DATE = "targetHireDate";
  @SerializedName(SERIALIZED_NAME_TARGET_HIRE_DATE)
  private String targetHireDate;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private JobStatus status;

  public static final String SERIALIZED_NAME_CREATED_ON = "createdOn";
  @SerializedName(SERIALIZED_NAME_CREATED_ON)
  private String createdOn;

  public static final String SERIALIZED_NAME_PUBLISHED_ON = "publishedOn";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_ON)
  private String publishedOn;

  public static final String SERIALIZED_NAME_EXPERIENCE = "experience";
  @SerializedName(SERIALIZED_NAME_EXPERIENCE)
  private String experience;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "customFields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private List<JobCustomFieldDTO> customFields = null;

  public JobDTO() {
  }

  public JobDTO title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public JobDTO description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public JobDTO id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public JobDTO noOfOpenings(String noOfOpenings) {
    
    
    
    
    this.noOfOpenings = noOfOpenings;
    return this;
  }

   /**
   * Get noOfOpenings
   * @return noOfOpenings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNoOfOpenings() {
    return noOfOpenings;
  }


  public void setNoOfOpenings(String noOfOpenings) {
    
    
    
    this.noOfOpenings = noOfOpenings;
  }


  public JobDTO departmentName(String departmentName) {
    
    
    
    
    this.departmentName = departmentName;
    return this;
  }

   /**
   * Get departmentName
   * @return departmentName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDepartmentName() {
    return departmentName;
  }


  public void setDepartmentName(String departmentName) {
    
    
    
    this.departmentName = departmentName;
  }


  public JobDTO jobType(String jobType) {
    
    
    
    
    this.jobType = jobType;
    return this;
  }

   /**
   * Get jobType
   * @return jobType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getJobType() {
    return jobType;
  }


  public void setJobType(String jobType) {
    
    
    
    this.jobType = jobType;
  }


  public JobDTO isReferralEnabled(Boolean isReferralEnabled) {
    
    
    
    
    this.isReferralEnabled = isReferralEnabled;
    return this;
  }

   /**
   * Get isReferralEnabled
   * @return isReferralEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsReferralEnabled() {
    return isReferralEnabled;
  }


  public void setIsReferralEnabled(Boolean isReferralEnabled) {
    
    
    
    this.isReferralEnabled = isReferralEnabled;
  }


  public JobDTO isCreatedFromRequisition(Boolean isCreatedFromRequisition) {
    
    
    
    
    this.isCreatedFromRequisition = isCreatedFromRequisition;
    return this;
  }

   /**
   * Get isCreatedFromRequisition
   * @return isCreatedFromRequisition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsCreatedFromRequisition() {
    return isCreatedFromRequisition;
  }


  public void setIsCreatedFromRequisition(Boolean isCreatedFromRequisition) {
    
    
    
    this.isCreatedFromRequisition = isCreatedFromRequisition;
  }


  public JobDTO requisitionIdentifier(String requisitionIdentifier) {
    
    
    
    
    this.requisitionIdentifier = requisitionIdentifier;
    return this;
  }

   /**
   * Get requisitionIdentifier
   * @return requisitionIdentifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRequisitionIdentifier() {
    return requisitionIdentifier;
  }


  public void setRequisitionIdentifier(String requisitionIdentifier) {
    
    
    
    this.requisitionIdentifier = requisitionIdentifier;
  }


  public JobDTO canAllowInternalEmployees(Boolean canAllowInternalEmployees) {
    
    
    
    
    this.canAllowInternalEmployees = canAllowInternalEmployees;
    return this;
  }

   /**
   * Get canAllowInternalEmployees
   * @return canAllowInternalEmployees
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getCanAllowInternalEmployees() {
    return canAllowInternalEmployees;
  }


  public void setCanAllowInternalEmployees(Boolean canAllowInternalEmployees) {
    
    
    
    this.canAllowInternalEmployees = canAllowInternalEmployees;
  }


  public JobDTO orgJobId(String orgJobId) {
    
    
    
    
    this.orgJobId = orgJobId;
    return this;
  }

   /**
   * Get orgJobId
   * @return orgJobId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOrgJobId() {
    return orgJobId;
  }


  public void setOrgJobId(String orgJobId) {
    
    
    
    this.orgJobId = orgJobId;
  }


  public JobDTO jobLocations(List<LocationDTO> jobLocations) {
    
    
    
    
    this.jobLocations = jobLocations;
    return this;
  }

  public JobDTO addJobLocationsItem(LocationDTO jobLocationsItem) {
    if (this.jobLocations == null) {
      this.jobLocations = new ArrayList<>();
    }
    this.jobLocations.add(jobLocationsItem);
    return this;
  }

   /**
   * Get jobLocations
   * @return jobLocations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<LocationDTO> getJobLocations() {
    return jobLocations;
  }


  public void setJobLocations(List<LocationDTO> jobLocations) {
    
    
    
    this.jobLocations = jobLocations;
  }


  public JobDTO hiringTeam(List<HiringTeamDTO> hiringTeam) {
    
    
    
    
    this.hiringTeam = hiringTeam;
    return this;
  }

  public JobDTO addHiringTeamItem(HiringTeamDTO hiringTeamItem) {
    if (this.hiringTeam == null) {
      this.hiringTeam = new ArrayList<>();
    }
    this.hiringTeam.add(hiringTeamItem);
    return this;
  }

   /**
   * Get hiringTeam
   * @return hiringTeam
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<HiringTeamDTO> getHiringTeam() {
    return hiringTeam;
  }


  public void setHiringTeam(List<HiringTeamDTO> hiringTeam) {
    
    
    
    this.hiringTeam = hiringTeam;
  }


  public JobDTO careerPortalUrl(String careerPortalUrl) {
    
    
    
    
    this.careerPortalUrl = careerPortalUrl;
    return this;
  }

   /**
   * Get careerPortalUrl
   * @return careerPortalUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCareerPortalUrl() {
    return careerPortalUrl;
  }


  public void setCareerPortalUrl(String careerPortalUrl) {
    
    
    
    this.careerPortalUrl = careerPortalUrl;
  }


  public JobDTO targetHireDate(String targetHireDate) {
    
    
    
    
    this.targetHireDate = targetHireDate;
    return this;
  }

   /**
   * Get targetHireDate
   * @return targetHireDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTargetHireDate() {
    return targetHireDate;
  }


  public void setTargetHireDate(String targetHireDate) {
    
    
    
    this.targetHireDate = targetHireDate;
  }


  public JobDTO status(JobStatus status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobStatus getStatus() {
    return status;
  }


  public void setStatus(JobStatus status) {
    
    
    
    this.status = status;
  }


  public JobDTO createdOn(String createdOn) {
    
    
    
    
    this.createdOn = createdOn;
    return this;
  }

   /**
   * Get createdOn
   * @return createdOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCreatedOn() {
    return createdOn;
  }


  public void setCreatedOn(String createdOn) {
    
    
    
    this.createdOn = createdOn;
  }


  public JobDTO publishedOn(String publishedOn) {
    
    
    
    
    this.publishedOn = publishedOn;
    return this;
  }

   /**
   * Get publishedOn
   * @return publishedOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPublishedOn() {
    return publishedOn;
  }


  public void setPublishedOn(String publishedOn) {
    
    
    
    this.publishedOn = publishedOn;
  }


  public JobDTO experience(String experience) {
    
    
    
    
    this.experience = experience;
    return this;
  }

   /**
   * Get experience
   * @return experience
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getExperience() {
    return experience;
  }


  public void setExperience(String experience) {
    
    
    
    this.experience = experience;
  }


  public JobDTO customFields(List<JobCustomFieldDTO> customFields) {
    
    
    
    
    this.customFields = customFields;
    return this;
  }

  public JobDTO addCustomFieldsItem(JobCustomFieldDTO customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new ArrayList<>();
    }
    this.customFields.add(customFieldsItem);
    return this;
  }

   /**
   * Get customFields
   * @return customFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<JobCustomFieldDTO> getCustomFields() {
    return customFields;
  }


  public void setCustomFields(List<JobCustomFieldDTO> customFields) {
    
    
    
    this.customFields = customFields;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the JobDTO instance itself
   */
  public JobDTO putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobDTO jobDTO = (JobDTO) o;
    return Objects.equals(this.title, jobDTO.title) &&
        Objects.equals(this.description, jobDTO.description) &&
        Objects.equals(this.id, jobDTO.id) &&
        Objects.equals(this.noOfOpenings, jobDTO.noOfOpenings) &&
        Objects.equals(this.departmentName, jobDTO.departmentName) &&
        Objects.equals(this.jobType, jobDTO.jobType) &&
        Objects.equals(this.isReferralEnabled, jobDTO.isReferralEnabled) &&
        Objects.equals(this.isCreatedFromRequisition, jobDTO.isCreatedFromRequisition) &&
        Objects.equals(this.requisitionIdentifier, jobDTO.requisitionIdentifier) &&
        Objects.equals(this.canAllowInternalEmployees, jobDTO.canAllowInternalEmployees) &&
        Objects.equals(this.orgJobId, jobDTO.orgJobId) &&
        Objects.equals(this.jobLocations, jobDTO.jobLocations) &&
        Objects.equals(this.hiringTeam, jobDTO.hiringTeam) &&
        Objects.equals(this.careerPortalUrl, jobDTO.careerPortalUrl) &&
        Objects.equals(this.targetHireDate, jobDTO.targetHireDate) &&
        Objects.equals(this.status, jobDTO.status) &&
        Objects.equals(this.createdOn, jobDTO.createdOn) &&
        Objects.equals(this.publishedOn, jobDTO.publishedOn) &&
        Objects.equals(this.experience, jobDTO.experience) &&
        Objects.equals(this.customFields, jobDTO.customFields)&&
        Objects.equals(this.additionalProperties, jobDTO.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, description, id, noOfOpenings, departmentName, jobType, isReferralEnabled, isCreatedFromRequisition, requisitionIdentifier, canAllowInternalEmployees, orgJobId, jobLocations, hiringTeam, careerPortalUrl, targetHireDate, status, createdOn, publishedOn, experience, customFields, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobDTO {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    noOfOpenings: ").append(toIndentedString(noOfOpenings)).append("\n");
    sb.append("    departmentName: ").append(toIndentedString(departmentName)).append("\n");
    sb.append("    jobType: ").append(toIndentedString(jobType)).append("\n");
    sb.append("    isReferralEnabled: ").append(toIndentedString(isReferralEnabled)).append("\n");
    sb.append("    isCreatedFromRequisition: ").append(toIndentedString(isCreatedFromRequisition)).append("\n");
    sb.append("    requisitionIdentifier: ").append(toIndentedString(requisitionIdentifier)).append("\n");
    sb.append("    canAllowInternalEmployees: ").append(toIndentedString(canAllowInternalEmployees)).append("\n");
    sb.append("    orgJobId: ").append(toIndentedString(orgJobId)).append("\n");
    sb.append("    jobLocations: ").append(toIndentedString(jobLocations)).append("\n");
    sb.append("    hiringTeam: ").append(toIndentedString(hiringTeam)).append("\n");
    sb.append("    careerPortalUrl: ").append(toIndentedString(careerPortalUrl)).append("\n");
    sb.append("    targetHireDate: ").append(toIndentedString(targetHireDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    publishedOn: ").append(toIndentedString(publishedOn)).append("\n");
    sb.append("    experience: ").append(toIndentedString(experience)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("noOfOpenings");
    openapiFields.add("departmentName");
    openapiFields.add("jobType");
    openapiFields.add("isReferralEnabled");
    openapiFields.add("isCreatedFromRequisition");
    openapiFields.add("requisitionIdentifier");
    openapiFields.add("canAllowInternalEmployees");
    openapiFields.add("orgJobId");
    openapiFields.add("jobLocations");
    openapiFields.add("hiringTeam");
    openapiFields.add("careerPortalUrl");
    openapiFields.add("targetHireDate");
    openapiFields.add("status");
    openapiFields.add("createdOn");
    openapiFields.add("publishedOn");
    openapiFields.add("experience");
    openapiFields.add("customFields");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to JobDTO
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!JobDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobDTO is not found in the empty JSON string", JobDTO.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("title").isJsonNull() && (jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("description").isJsonNull() && (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("id").isJsonNull() && (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("noOfOpenings").isJsonNull() && (jsonObj.get("noOfOpenings") != null && !jsonObj.get("noOfOpenings").isJsonNull()) && !jsonObj.get("noOfOpenings").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `noOfOpenings` to be a primitive type in the JSON string but got `%s`", jsonObj.get("noOfOpenings").toString()));
      }
      if (!jsonObj.get("departmentName").isJsonNull() && (jsonObj.get("departmentName") != null && !jsonObj.get("departmentName").isJsonNull()) && !jsonObj.get("departmentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `departmentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("departmentName").toString()));
      }
      if (!jsonObj.get("jobType").isJsonNull() && (jsonObj.get("jobType") != null && !jsonObj.get("jobType").isJsonNull()) && !jsonObj.get("jobType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobType").toString()));
      }
      if (!jsonObj.get("requisitionIdentifier").isJsonNull() && (jsonObj.get("requisitionIdentifier") != null && !jsonObj.get("requisitionIdentifier").isJsonNull()) && !jsonObj.get("requisitionIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requisitionIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requisitionIdentifier").toString()));
      }
      if (!jsonObj.get("orgJobId").isJsonNull() && (jsonObj.get("orgJobId") != null && !jsonObj.get("orgJobId").isJsonNull()) && !jsonObj.get("orgJobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgJobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgJobId").toString()));
      }
      if (jsonObj.get("jobLocations") != null && !jsonObj.get("jobLocations").isJsonNull()) {
        JsonArray jsonArrayjobLocations = jsonObj.getAsJsonArray("jobLocations");
        if (jsonArrayjobLocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("jobLocations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `jobLocations` to be an array in the JSON string but got `%s`", jsonObj.get("jobLocations").toString()));
          }

          // validate the optional field `jobLocations` (array)
          for (int i = 0; i < jsonArrayjobLocations.size(); i++) {
            LocationDTO.validateJsonObject(jsonArrayjobLocations.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("hiringTeam") != null && !jsonObj.get("hiringTeam").isJsonNull()) {
        JsonArray jsonArrayhiringTeam = jsonObj.getAsJsonArray("hiringTeam");
        if (jsonArrayhiringTeam != null) {
          // ensure the json data is an array
          if (!jsonObj.get("hiringTeam").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `hiringTeam` to be an array in the JSON string but got `%s`", jsonObj.get("hiringTeam").toString()));
          }

          // validate the optional field `hiringTeam` (array)
          for (int i = 0; i < jsonArrayhiringTeam.size(); i++) {
            HiringTeamDTO.validateJsonObject(jsonArrayhiringTeam.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("careerPortalUrl").isJsonNull() && (jsonObj.get("careerPortalUrl") != null && !jsonObj.get("careerPortalUrl").isJsonNull()) && !jsonObj.get("careerPortalUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `careerPortalUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("careerPortalUrl").toString()));
      }
      if (!jsonObj.get("targetHireDate").isJsonNull() && (jsonObj.get("targetHireDate") != null && !jsonObj.get("targetHireDate").isJsonNull()) && !jsonObj.get("targetHireDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetHireDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetHireDate").toString()));
      }
      if (!jsonObj.get("createdOn").isJsonNull() && (jsonObj.get("createdOn") != null && !jsonObj.get("createdOn").isJsonNull()) && !jsonObj.get("createdOn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdOn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdOn").toString()));
      }
      if (!jsonObj.get("publishedOn").isJsonNull() && (jsonObj.get("publishedOn") != null && !jsonObj.get("publishedOn").isJsonNull()) && !jsonObj.get("publishedOn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publishedOn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publishedOn").toString()));
      }
      if (!jsonObj.get("experience").isJsonNull() && (jsonObj.get("experience") != null && !jsonObj.get("experience").isJsonNull()) && !jsonObj.get("experience").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `experience` to be a primitive type in the JSON string but got `%s`", jsonObj.get("experience").toString()));
      }
      if (jsonObj.get("customFields") != null && !jsonObj.get("customFields").isJsonNull()) {
        JsonArray jsonArraycustomFields = jsonObj.getAsJsonArray("customFields");
        if (jsonArraycustomFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customFields` to be an array in the JSON string but got `%s`", jsonObj.get("customFields").toString()));
          }

          // validate the optional field `customFields` (array)
          for (int i = 0; i < jsonArraycustomFields.size(); i++) {
            JobCustomFieldDTO.validateJsonObject(jsonArraycustomFields.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<JobDTO>() {
           @Override
           public void write(JsonWriter out, JobDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public JobDTO read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             JobDTO instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of JobDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of JobDTO
  * @throws IOException if the JSON string is invalid with respect to JobDTO
  */
  public static JobDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobDTO.class);
  }

 /**
  * Convert an instance of JobDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

