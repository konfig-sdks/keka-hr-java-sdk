/*
 * Requisition
 * Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.TimeDTO;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * InterviewDTO
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class InterviewDTO {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CANDIDATE_ID = "candidateId";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_ID)
  private String candidateId;

  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_INTERVIEW_DATE = "interviewDate";
  @SerializedName(SERIALIZED_NAME_INTERVIEW_DATE)
  private String interviewDate;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private TimeDTO startTime;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private TimeDTO endTime;

  public static final String SERIALIZED_NAME_TIME_ZONE_ID = "timeZoneId";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE_ID)
  private String timeZoneId;

  public static final String SERIALIZED_NAME_SCHEDULED_BY = "scheduledBy";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_BY)
  private String scheduledBy;

  public static final String SERIALIZED_NAME_SCHEDULED_DATE = "scheduledDate";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_DATE)
  private String scheduledDate;

  public static final String SERIALIZED_NAME_INTERVIEW_TYPE = "interviewType";
  @SerializedName(SERIALIZED_NAME_INTERVIEW_TYPE)
  private String interviewType;

  public static final String SERIALIZED_NAME_STAGE_ID = "stageId";
  @SerializedName(SERIALIZED_NAME_STAGE_ID)
  private String stageId;

  public static final String SERIALIZED_NAME_PANEL_MEMBERS = "panelMembers";
  @SerializedName(SERIALIZED_NAME_PANEL_MEMBERS)
  private String panelMembers;

  public InterviewDTO() {
  }

  public InterviewDTO id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public InterviewDTO candidateId(String candidateId) {
    
    
    
    
    this.candidateId = candidateId;
    return this;
  }

   /**
   * Get candidateId
   * @return candidateId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCandidateId() {
    return candidateId;
  }


  public void setCandidateId(String candidateId) {
    
    
    
    this.candidateId = candidateId;
  }


  public InterviewDTO jobId(String jobId) {
    
    
    
    
    this.jobId = jobId;
    return this;
  }

   /**
   * Get jobId
   * @return jobId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getJobId() {
    return jobId;
  }


  public void setJobId(String jobId) {
    
    
    
    this.jobId = jobId;
  }


  public InterviewDTO interviewDate(String interviewDate) {
    
    
    
    
    this.interviewDate = interviewDate;
    return this;
  }

   /**
   * Get interviewDate
   * @return interviewDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getInterviewDate() {
    return interviewDate;
  }


  public void setInterviewDate(String interviewDate) {
    
    
    
    this.interviewDate = interviewDate;
  }


  public InterviewDTO startTime(TimeDTO startTime) {
    
    
    
    
    this.startTime = startTime;
    return this;
  }

   /**
   * Get startTime
   * @return startTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TimeDTO getStartTime() {
    return startTime;
  }


  public void setStartTime(TimeDTO startTime) {
    
    
    
    this.startTime = startTime;
  }


  public InterviewDTO endTime(TimeDTO endTime) {
    
    
    
    
    this.endTime = endTime;
    return this;
  }

   /**
   * Get endTime
   * @return endTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TimeDTO getEndTime() {
    return endTime;
  }


  public void setEndTime(TimeDTO endTime) {
    
    
    
    this.endTime = endTime;
  }


  public InterviewDTO timeZoneId(String timeZoneId) {
    
    
    
    
    this.timeZoneId = timeZoneId;
    return this;
  }

   /**
   * Get timeZoneId
   * @return timeZoneId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTimeZoneId() {
    return timeZoneId;
  }


  public void setTimeZoneId(String timeZoneId) {
    
    
    
    this.timeZoneId = timeZoneId;
  }


  public InterviewDTO scheduledBy(String scheduledBy) {
    
    
    
    
    this.scheduledBy = scheduledBy;
    return this;
  }

   /**
   * Get scheduledBy
   * @return scheduledBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getScheduledBy() {
    return scheduledBy;
  }


  public void setScheduledBy(String scheduledBy) {
    
    
    
    this.scheduledBy = scheduledBy;
  }


  public InterviewDTO scheduledDate(String scheduledDate) {
    
    
    
    
    this.scheduledDate = scheduledDate;
    return this;
  }

   /**
   * Get scheduledDate
   * @return scheduledDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getScheduledDate() {
    return scheduledDate;
  }


  public void setScheduledDate(String scheduledDate) {
    
    
    
    this.scheduledDate = scheduledDate;
  }


  public InterviewDTO interviewType(String interviewType) {
    
    
    
    
    this.interviewType = interviewType;
    return this;
  }

   /**
   * Get interviewType
   * @return interviewType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getInterviewType() {
    return interviewType;
  }


  public void setInterviewType(String interviewType) {
    
    
    
    this.interviewType = interviewType;
  }


  public InterviewDTO stageId(String stageId) {
    
    
    
    
    this.stageId = stageId;
    return this;
  }

   /**
   * Get stageId
   * @return stageId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStageId() {
    return stageId;
  }


  public void setStageId(String stageId) {
    
    
    
    this.stageId = stageId;
  }


  public InterviewDTO panelMembers(String panelMembers) {
    
    
    
    
    this.panelMembers = panelMembers;
    return this;
  }

   /**
   * Get panelMembers
   * @return panelMembers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPanelMembers() {
    return panelMembers;
  }


  public void setPanelMembers(String panelMembers) {
    
    
    
    this.panelMembers = panelMembers;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the InterviewDTO instance itself
   */
  public InterviewDTO putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InterviewDTO interviewDTO = (InterviewDTO) o;
    return Objects.equals(this.id, interviewDTO.id) &&
        Objects.equals(this.candidateId, interviewDTO.candidateId) &&
        Objects.equals(this.jobId, interviewDTO.jobId) &&
        Objects.equals(this.interviewDate, interviewDTO.interviewDate) &&
        Objects.equals(this.startTime, interviewDTO.startTime) &&
        Objects.equals(this.endTime, interviewDTO.endTime) &&
        Objects.equals(this.timeZoneId, interviewDTO.timeZoneId) &&
        Objects.equals(this.scheduledBy, interviewDTO.scheduledBy) &&
        Objects.equals(this.scheduledDate, interviewDTO.scheduledDate) &&
        Objects.equals(this.interviewType, interviewDTO.interviewType) &&
        Objects.equals(this.stageId, interviewDTO.stageId) &&
        Objects.equals(this.panelMembers, interviewDTO.panelMembers)&&
        Objects.equals(this.additionalProperties, interviewDTO.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, candidateId, jobId, interviewDate, startTime, endTime, timeZoneId, scheduledBy, scheduledDate, interviewType, stageId, panelMembers, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InterviewDTO {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    candidateId: ").append(toIndentedString(candidateId)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    interviewDate: ").append(toIndentedString(interviewDate)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    timeZoneId: ").append(toIndentedString(timeZoneId)).append("\n");
    sb.append("    scheduledBy: ").append(toIndentedString(scheduledBy)).append("\n");
    sb.append("    scheduledDate: ").append(toIndentedString(scheduledDate)).append("\n");
    sb.append("    interviewType: ").append(toIndentedString(interviewType)).append("\n");
    sb.append("    stageId: ").append(toIndentedString(stageId)).append("\n");
    sb.append("    panelMembers: ").append(toIndentedString(panelMembers)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("candidateId");
    openapiFields.add("jobId");
    openapiFields.add("interviewDate");
    openapiFields.add("startTime");
    openapiFields.add("endTime");
    openapiFields.add("timeZoneId");
    openapiFields.add("scheduledBy");
    openapiFields.add("scheduledDate");
    openapiFields.add("interviewType");
    openapiFields.add("stageId");
    openapiFields.add("panelMembers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to InterviewDTO
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!InterviewDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InterviewDTO is not found in the empty JSON string", InterviewDTO.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonNull() && (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("candidateId").isJsonNull() && (jsonObj.get("candidateId") != null && !jsonObj.get("candidateId").isJsonNull()) && !jsonObj.get("candidateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `candidateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("candidateId").toString()));
      }
      if (!jsonObj.get("jobId").isJsonNull() && (jsonObj.get("jobId") != null && !jsonObj.get("jobId").isJsonNull()) && !jsonObj.get("jobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobId").toString()));
      }
      if (!jsonObj.get("interviewDate").isJsonNull() && (jsonObj.get("interviewDate") != null && !jsonObj.get("interviewDate").isJsonNull()) && !jsonObj.get("interviewDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interviewDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interviewDate").toString()));
      }
      // validate the optional field `startTime`
      if (jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) {
        TimeDTO.validateJsonObject(jsonObj.getAsJsonObject("startTime"));
      }
      // validate the optional field `endTime`
      if (jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) {
        TimeDTO.validateJsonObject(jsonObj.getAsJsonObject("endTime"));
      }
      if (!jsonObj.get("timeZoneId").isJsonNull() && (jsonObj.get("timeZoneId") != null && !jsonObj.get("timeZoneId").isJsonNull()) && !jsonObj.get("timeZoneId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZoneId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZoneId").toString()));
      }
      if (!jsonObj.get("scheduledBy").isJsonNull() && (jsonObj.get("scheduledBy") != null && !jsonObj.get("scheduledBy").isJsonNull()) && !jsonObj.get("scheduledBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduledBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduledBy").toString()));
      }
      if (!jsonObj.get("scheduledDate").isJsonNull() && (jsonObj.get("scheduledDate") != null && !jsonObj.get("scheduledDate").isJsonNull()) && !jsonObj.get("scheduledDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduledDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduledDate").toString()));
      }
      if (!jsonObj.get("interviewType").isJsonNull() && (jsonObj.get("interviewType") != null && !jsonObj.get("interviewType").isJsonNull()) && !jsonObj.get("interviewType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interviewType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interviewType").toString()));
      }
      if (!jsonObj.get("stageId").isJsonNull() && (jsonObj.get("stageId") != null && !jsonObj.get("stageId").isJsonNull()) && !jsonObj.get("stageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stageId").toString()));
      }
      if (!jsonObj.get("panelMembers").isJsonNull() && (jsonObj.get("panelMembers") != null && !jsonObj.get("panelMembers").isJsonNull()) && !jsonObj.get("panelMembers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `panelMembers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("panelMembers").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InterviewDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InterviewDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InterviewDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InterviewDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<InterviewDTO>() {
           @Override
           public void write(JsonWriter out, InterviewDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public InterviewDTO read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             InterviewDTO instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InterviewDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InterviewDTO
  * @throws IOException if the JSON string is invalid with respect to InterviewDTO
  */
  public static InterviewDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InterviewDTO.class);
  }

 /**
  * Convert an instance of InterviewDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

