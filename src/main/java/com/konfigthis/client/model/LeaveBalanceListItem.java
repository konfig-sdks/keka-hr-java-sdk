/*
 * Requisition
 * Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * LeaveBalanceListItem
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LeaveBalanceListItem {
  public static final String SERIALIZED_NAME_LEAVE_TYPE_ID = "leaveTypeId";
  @SerializedName(SERIALIZED_NAME_LEAVE_TYPE_ID)
  private UUID leaveTypeId;

  public static final String SERIALIZED_NAME_LEAVE_TYPE_NAME = "leaveTypeName";
  @SerializedName(SERIALIZED_NAME_LEAVE_TYPE_NAME)
  private String leaveTypeName;

  public static final String SERIALIZED_NAME_ACCRUED_AMOUNT = "accruedAmount";
  @SerializedName(SERIALIZED_NAME_ACCRUED_AMOUNT)
  private Double accruedAmount;

  public static final String SERIALIZED_NAME_CONSUMED_AMOUNT = "consumedAmount";
  @SerializedName(SERIALIZED_NAME_CONSUMED_AMOUNT)
  private Double consumedAmount;

  public static final String SERIALIZED_NAME_AVAILABLE_BALANCE = "availableBalance";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_BALANCE)
  private Double availableBalance;

  public static final String SERIALIZED_NAME_ANNUAL_QUOTA = "annualQuota";
  @SerializedName(SERIALIZED_NAME_ANNUAL_QUOTA)
  private Double annualQuota;

  public LeaveBalanceListItem() {
  }

  public LeaveBalanceListItem leaveTypeId(UUID leaveTypeId) {
    
    
    
    
    this.leaveTypeId = leaveTypeId;
    return this;
  }

   /**
   * Get leaveTypeId
   * @return leaveTypeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UUID getLeaveTypeId() {
    return leaveTypeId;
  }


  public void setLeaveTypeId(UUID leaveTypeId) {
    
    
    
    this.leaveTypeId = leaveTypeId;
  }


  public LeaveBalanceListItem leaveTypeName(String leaveTypeName) {
    
    
    
    
    this.leaveTypeName = leaveTypeName;
    return this;
  }

   /**
   * Get leaveTypeName
   * @return leaveTypeName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLeaveTypeName() {
    return leaveTypeName;
  }


  public void setLeaveTypeName(String leaveTypeName) {
    
    
    
    this.leaveTypeName = leaveTypeName;
  }


  public LeaveBalanceListItem accruedAmount(Double accruedAmount) {
    
    
    
    
    this.accruedAmount = accruedAmount;
    return this;
  }

   /**
   * Get accruedAmount
   * @return accruedAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getAccruedAmount() {
    return accruedAmount;
  }


  public void setAccruedAmount(Double accruedAmount) {
    
    
    
    this.accruedAmount = accruedAmount;
  }


  public LeaveBalanceListItem consumedAmount(Double consumedAmount) {
    
    
    
    
    this.consumedAmount = consumedAmount;
    return this;
  }

   /**
   * Get consumedAmount
   * @return consumedAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getConsumedAmount() {
    return consumedAmount;
  }


  public void setConsumedAmount(Double consumedAmount) {
    
    
    
    this.consumedAmount = consumedAmount;
  }


  public LeaveBalanceListItem availableBalance(Double availableBalance) {
    
    
    
    
    this.availableBalance = availableBalance;
    return this;
  }

   /**
   * Get availableBalance
   * @return availableBalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getAvailableBalance() {
    return availableBalance;
  }


  public void setAvailableBalance(Double availableBalance) {
    
    
    
    this.availableBalance = availableBalance;
  }


  public LeaveBalanceListItem annualQuota(Double annualQuota) {
    
    
    
    
    this.annualQuota = annualQuota;
    return this;
  }

   /**
   * Get annualQuota
   * @return annualQuota
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getAnnualQuota() {
    return annualQuota;
  }


  public void setAnnualQuota(Double annualQuota) {
    
    
    
    this.annualQuota = annualQuota;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LeaveBalanceListItem instance itself
   */
  public LeaveBalanceListItem putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LeaveBalanceListItem leaveBalanceListItem = (LeaveBalanceListItem) o;
    return Objects.equals(this.leaveTypeId, leaveBalanceListItem.leaveTypeId) &&
        Objects.equals(this.leaveTypeName, leaveBalanceListItem.leaveTypeName) &&
        Objects.equals(this.accruedAmount, leaveBalanceListItem.accruedAmount) &&
        Objects.equals(this.consumedAmount, leaveBalanceListItem.consumedAmount) &&
        Objects.equals(this.availableBalance, leaveBalanceListItem.availableBalance) &&
        Objects.equals(this.annualQuota, leaveBalanceListItem.annualQuota)&&
        Objects.equals(this.additionalProperties, leaveBalanceListItem.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(leaveTypeId, leaveTypeName, accruedAmount, consumedAmount, availableBalance, annualQuota, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LeaveBalanceListItem {\n");
    sb.append("    leaveTypeId: ").append(toIndentedString(leaveTypeId)).append("\n");
    sb.append("    leaveTypeName: ").append(toIndentedString(leaveTypeName)).append("\n");
    sb.append("    accruedAmount: ").append(toIndentedString(accruedAmount)).append("\n");
    sb.append("    consumedAmount: ").append(toIndentedString(consumedAmount)).append("\n");
    sb.append("    availableBalance: ").append(toIndentedString(availableBalance)).append("\n");
    sb.append("    annualQuota: ").append(toIndentedString(annualQuota)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("leaveTypeId");
    openapiFields.add("leaveTypeName");
    openapiFields.add("accruedAmount");
    openapiFields.add("consumedAmount");
    openapiFields.add("availableBalance");
    openapiFields.add("annualQuota");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LeaveBalanceListItem
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LeaveBalanceListItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LeaveBalanceListItem is not found in the empty JSON string", LeaveBalanceListItem.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("leaveTypeId") != null && !jsonObj.get("leaveTypeId").isJsonNull()) && !jsonObj.get("leaveTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leaveTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leaveTypeId").toString()));
      }
      if (!jsonObj.get("leaveTypeName").isJsonNull() && (jsonObj.get("leaveTypeName") != null && !jsonObj.get("leaveTypeName").isJsonNull()) && !jsonObj.get("leaveTypeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leaveTypeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leaveTypeName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LeaveBalanceListItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LeaveBalanceListItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LeaveBalanceListItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LeaveBalanceListItem.class));

       return (TypeAdapter<T>) new TypeAdapter<LeaveBalanceListItem>() {
           @Override
           public void write(JsonWriter out, LeaveBalanceListItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LeaveBalanceListItem read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LeaveBalanceListItem instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LeaveBalanceListItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LeaveBalanceListItem
  * @throws IOException if the JSON string is invalid with respect to LeaveBalanceListItem
  */
  public static LeaveBalanceListItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LeaveBalanceListItem.class);
  }

 /**
  * Convert an instance of LeaveBalanceListItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

