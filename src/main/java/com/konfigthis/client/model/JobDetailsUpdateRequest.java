/*
 * Requisition
 * Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.TimeType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * JobDetailsUpdateRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class JobDetailsUpdateRequest {
  public static final String SERIALIZED_NAME_EMPLOYEE_NUMBER = "employeeNumber";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_NUMBER)
  private String employeeNumber;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_BUSINESS_UNIT = "businessUnit";
  @SerializedName(SERIALIZED_NAME_BUSINESS_UNIT)
  private String businessUnit;

  public static final String SERIALIZED_NAME_DEPARTMENT = "department";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT)
  private String department;

  public static final String SERIALIZED_NAME_JOB_TITLE = "jobTitle";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE)
  private String jobTitle;

  public static final String SERIALIZED_NAME_REPORTING_MANAGER = "reportingManager";
  @SerializedName(SERIALIZED_NAME_REPORTING_MANAGER)
  private String reportingManager;

  public static final String SERIALIZED_NAME_ATTENDANCE_NUMBER = "attendanceNumber";
  @SerializedName(SERIALIZED_NAME_ATTENDANCE_NUMBER)
  private String attendanceNumber;

  public static final String SERIALIZED_NAME_TIME_TYPE = "timeType";
  @SerializedName(SERIALIZED_NAME_TIME_TYPE)
  private TimeType timeType;

  public static final String SERIALIZED_NAME_ATTENDANCE_CAPTURE_SCHEME = "attendanceCaptureScheme";
  @SerializedName(SERIALIZED_NAME_ATTENDANCE_CAPTURE_SCHEME)
  private String attendanceCaptureScheme;

  public static final String SERIALIZED_NAME_EXPENSE_POLICY = "expensePolicy";
  @SerializedName(SERIALIZED_NAME_EXPENSE_POLICY)
  private String expensePolicy;

  public static final String SERIALIZED_NAME_NOTICE_PERIOD = "noticePeriod";
  @SerializedName(SERIALIZED_NAME_NOTICE_PERIOD)
  private String noticePeriod;

  public static final String SERIALIZED_NAME_HOLIDAY_LIST = "holidayList";
  @SerializedName(SERIALIZED_NAME_HOLIDAY_LIST)
  private String holidayList;

  public static final String SERIALIZED_NAME_COST_CENTER = "costCenter";
  @SerializedName(SERIALIZED_NAME_COST_CENTER)
  private String costCenter;

  public static final String SERIALIZED_NAME_PAY_BAND = "payBand";
  @SerializedName(SERIALIZED_NAME_PAY_BAND)
  private String payBand;

  public static final String SERIALIZED_NAME_PAY_GRADE = "payGrade";
  @SerializedName(SERIALIZED_NAME_PAY_GRADE)
  private String payGrade;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "customFields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Map<String, Object> customFields = null;

  public JobDetailsUpdateRequest() {
  }

  public JobDetailsUpdateRequest employeeNumber(String employeeNumber) {
    
    
    
    
    this.employeeNumber = employeeNumber;
    return this;
  }

   /**
   * Get employeeNumber
   * @return employeeNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployeeNumber() {
    return employeeNumber;
  }


  public void setEmployeeNumber(String employeeNumber) {
    
    
    
    this.employeeNumber = employeeNumber;
  }


  public JobDetailsUpdateRequest location(String location) {
    
    
    
    
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLocation() {
    return location;
  }


  public void setLocation(String location) {
    
    
    
    this.location = location;
  }


  public JobDetailsUpdateRequest businessUnit(String businessUnit) {
    
    
    
    
    this.businessUnit = businessUnit;
    return this;
  }

   /**
   * Get businessUnit
   * @return businessUnit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBusinessUnit() {
    return businessUnit;
  }


  public void setBusinessUnit(String businessUnit) {
    
    
    
    this.businessUnit = businessUnit;
  }


  public JobDetailsUpdateRequest department(String department) {
    
    
    
    
    this.department = department;
    return this;
  }

   /**
   * Get department
   * @return department
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDepartment() {
    return department;
  }


  public void setDepartment(String department) {
    
    
    
    this.department = department;
  }


  public JobDetailsUpdateRequest jobTitle(String jobTitle) {
    
    
    
    
    this.jobTitle = jobTitle;
    return this;
  }

   /**
   * Get jobTitle
   * @return jobTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getJobTitle() {
    return jobTitle;
  }


  public void setJobTitle(String jobTitle) {
    
    
    
    this.jobTitle = jobTitle;
  }


  public JobDetailsUpdateRequest reportingManager(String reportingManager) {
    
    
    
    
    this.reportingManager = reportingManager;
    return this;
  }

   /**
   * Get reportingManager
   * @return reportingManager
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getReportingManager() {
    return reportingManager;
  }


  public void setReportingManager(String reportingManager) {
    
    
    
    this.reportingManager = reportingManager;
  }


  public JobDetailsUpdateRequest attendanceNumber(String attendanceNumber) {
    
    
    
    
    this.attendanceNumber = attendanceNumber;
    return this;
  }

   /**
   * Get attendanceNumber
   * @return attendanceNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAttendanceNumber() {
    return attendanceNumber;
  }


  public void setAttendanceNumber(String attendanceNumber) {
    
    
    
    this.attendanceNumber = attendanceNumber;
  }


  public JobDetailsUpdateRequest timeType(TimeType timeType) {
    
    
    
    
    this.timeType = timeType;
    return this;
  }

   /**
   * Get timeType
   * @return timeType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TimeType getTimeType() {
    return timeType;
  }


  public void setTimeType(TimeType timeType) {
    
    
    
    this.timeType = timeType;
  }


  public JobDetailsUpdateRequest attendanceCaptureScheme(String attendanceCaptureScheme) {
    
    
    
    
    this.attendanceCaptureScheme = attendanceCaptureScheme;
    return this;
  }

   /**
   * Get attendanceCaptureScheme
   * @return attendanceCaptureScheme
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAttendanceCaptureScheme() {
    return attendanceCaptureScheme;
  }


  public void setAttendanceCaptureScheme(String attendanceCaptureScheme) {
    
    
    
    this.attendanceCaptureScheme = attendanceCaptureScheme;
  }


  public JobDetailsUpdateRequest expensePolicy(String expensePolicy) {
    
    
    
    
    this.expensePolicy = expensePolicy;
    return this;
  }

   /**
   * Get expensePolicy
   * @return expensePolicy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getExpensePolicy() {
    return expensePolicy;
  }


  public void setExpensePolicy(String expensePolicy) {
    
    
    
    this.expensePolicy = expensePolicy;
  }


  public JobDetailsUpdateRequest noticePeriod(String noticePeriod) {
    
    
    
    
    this.noticePeriod = noticePeriod;
    return this;
  }

   /**
   * Get noticePeriod
   * @return noticePeriod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNoticePeriod() {
    return noticePeriod;
  }


  public void setNoticePeriod(String noticePeriod) {
    
    
    
    this.noticePeriod = noticePeriod;
  }


  public JobDetailsUpdateRequest holidayList(String holidayList) {
    
    
    
    
    this.holidayList = holidayList;
    return this;
  }

   /**
   * Get holidayList
   * @return holidayList
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getHolidayList() {
    return holidayList;
  }


  public void setHolidayList(String holidayList) {
    
    
    
    this.holidayList = holidayList;
  }


  public JobDetailsUpdateRequest costCenter(String costCenter) {
    
    
    
    
    this.costCenter = costCenter;
    return this;
  }

   /**
   * Get costCenter
   * @return costCenter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCostCenter() {
    return costCenter;
  }


  public void setCostCenter(String costCenter) {
    
    
    
    this.costCenter = costCenter;
  }


  public JobDetailsUpdateRequest payBand(String payBand) {
    
    
    
    
    this.payBand = payBand;
    return this;
  }

   /**
   * Get payBand
   * @return payBand
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPayBand() {
    return payBand;
  }


  public void setPayBand(String payBand) {
    
    
    
    this.payBand = payBand;
  }


  public JobDetailsUpdateRequest payGrade(String payGrade) {
    
    
    
    
    this.payGrade = payGrade;
    return this;
  }

   /**
   * Get payGrade
   * @return payGrade
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPayGrade() {
    return payGrade;
  }


  public void setPayGrade(String payGrade) {
    
    
    
    this.payGrade = payGrade;
  }


  public JobDetailsUpdateRequest customFields(Map<String, Object> customFields) {
    
    
    
    
    this.customFields = customFields;
    return this;
  }

  public JobDetailsUpdateRequest putCustomFieldsItem(String key, Object customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new HashMap<>();
    }
    this.customFields.put(key, customFieldsItem);
    return this;
  }

   /**
   * Get customFields
   * @return customFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, Object> getCustomFields() {
    return customFields;
  }


  public void setCustomFields(Map<String, Object> customFields) {
    
    
    
    this.customFields = customFields;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the JobDetailsUpdateRequest instance itself
   */
  public JobDetailsUpdateRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobDetailsUpdateRequest jobDetailsUpdateRequest = (JobDetailsUpdateRequest) o;
    return Objects.equals(this.employeeNumber, jobDetailsUpdateRequest.employeeNumber) &&
        Objects.equals(this.location, jobDetailsUpdateRequest.location) &&
        Objects.equals(this.businessUnit, jobDetailsUpdateRequest.businessUnit) &&
        Objects.equals(this.department, jobDetailsUpdateRequest.department) &&
        Objects.equals(this.jobTitle, jobDetailsUpdateRequest.jobTitle) &&
        Objects.equals(this.reportingManager, jobDetailsUpdateRequest.reportingManager) &&
        Objects.equals(this.attendanceNumber, jobDetailsUpdateRequest.attendanceNumber) &&
        Objects.equals(this.timeType, jobDetailsUpdateRequest.timeType) &&
        Objects.equals(this.attendanceCaptureScheme, jobDetailsUpdateRequest.attendanceCaptureScheme) &&
        Objects.equals(this.expensePolicy, jobDetailsUpdateRequest.expensePolicy) &&
        Objects.equals(this.noticePeriod, jobDetailsUpdateRequest.noticePeriod) &&
        Objects.equals(this.holidayList, jobDetailsUpdateRequest.holidayList) &&
        Objects.equals(this.costCenter, jobDetailsUpdateRequest.costCenter) &&
        Objects.equals(this.payBand, jobDetailsUpdateRequest.payBand) &&
        Objects.equals(this.payGrade, jobDetailsUpdateRequest.payGrade) &&
        Objects.equals(this.customFields, jobDetailsUpdateRequest.customFields)&&
        Objects.equals(this.additionalProperties, jobDetailsUpdateRequest.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(employeeNumber, location, businessUnit, department, jobTitle, reportingManager, attendanceNumber, timeType, attendanceCaptureScheme, expensePolicy, noticePeriod, holidayList, costCenter, payBand, payGrade, customFields, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobDetailsUpdateRequest {\n");
    sb.append("    employeeNumber: ").append(toIndentedString(employeeNumber)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    businessUnit: ").append(toIndentedString(businessUnit)).append("\n");
    sb.append("    department: ").append(toIndentedString(department)).append("\n");
    sb.append("    jobTitle: ").append(toIndentedString(jobTitle)).append("\n");
    sb.append("    reportingManager: ").append(toIndentedString(reportingManager)).append("\n");
    sb.append("    attendanceNumber: ").append(toIndentedString(attendanceNumber)).append("\n");
    sb.append("    timeType: ").append(toIndentedString(timeType)).append("\n");
    sb.append("    attendanceCaptureScheme: ").append(toIndentedString(attendanceCaptureScheme)).append("\n");
    sb.append("    expensePolicy: ").append(toIndentedString(expensePolicy)).append("\n");
    sb.append("    noticePeriod: ").append(toIndentedString(noticePeriod)).append("\n");
    sb.append("    holidayList: ").append(toIndentedString(holidayList)).append("\n");
    sb.append("    costCenter: ").append(toIndentedString(costCenter)).append("\n");
    sb.append("    payBand: ").append(toIndentedString(payBand)).append("\n");
    sb.append("    payGrade: ").append(toIndentedString(payGrade)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("employeeNumber");
    openapiFields.add("location");
    openapiFields.add("businessUnit");
    openapiFields.add("department");
    openapiFields.add("jobTitle");
    openapiFields.add("reportingManager");
    openapiFields.add("attendanceNumber");
    openapiFields.add("timeType");
    openapiFields.add("attendanceCaptureScheme");
    openapiFields.add("expensePolicy");
    openapiFields.add("noticePeriod");
    openapiFields.add("holidayList");
    openapiFields.add("costCenter");
    openapiFields.add("payBand");
    openapiFields.add("payGrade");
    openapiFields.add("customFields");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to JobDetailsUpdateRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!JobDetailsUpdateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobDetailsUpdateRequest is not found in the empty JSON string", JobDetailsUpdateRequest.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("employeeNumber").isJsonNull() && (jsonObj.get("employeeNumber") != null && !jsonObj.get("employeeNumber").isJsonNull()) && !jsonObj.get("employeeNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeNumber").toString()));
      }
      if (!jsonObj.get("location").isJsonNull() && (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if (!jsonObj.get("businessUnit").isJsonNull() && (jsonObj.get("businessUnit") != null && !jsonObj.get("businessUnit").isJsonNull()) && !jsonObj.get("businessUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `businessUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("businessUnit").toString()));
      }
      if (!jsonObj.get("department").isJsonNull() && (jsonObj.get("department") != null && !jsonObj.get("department").isJsonNull()) && !jsonObj.get("department").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `department` to be a primitive type in the JSON string but got `%s`", jsonObj.get("department").toString()));
      }
      if (!jsonObj.get("jobTitle").isJsonNull() && (jsonObj.get("jobTitle") != null && !jsonObj.get("jobTitle").isJsonNull()) && !jsonObj.get("jobTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobTitle").toString()));
      }
      if (!jsonObj.get("reportingManager").isJsonNull() && (jsonObj.get("reportingManager") != null && !jsonObj.get("reportingManager").isJsonNull()) && !jsonObj.get("reportingManager").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportingManager` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportingManager").toString()));
      }
      if (!jsonObj.get("attendanceNumber").isJsonNull() && (jsonObj.get("attendanceNumber") != null && !jsonObj.get("attendanceNumber").isJsonNull()) && !jsonObj.get("attendanceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attendanceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attendanceNumber").toString()));
      }
      if (!jsonObj.get("attendanceCaptureScheme").isJsonNull() && (jsonObj.get("attendanceCaptureScheme") != null && !jsonObj.get("attendanceCaptureScheme").isJsonNull()) && !jsonObj.get("attendanceCaptureScheme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attendanceCaptureScheme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attendanceCaptureScheme").toString()));
      }
      if (!jsonObj.get("expensePolicy").isJsonNull() && (jsonObj.get("expensePolicy") != null && !jsonObj.get("expensePolicy").isJsonNull()) && !jsonObj.get("expensePolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expensePolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expensePolicy").toString()));
      }
      if (!jsonObj.get("noticePeriod").isJsonNull() && (jsonObj.get("noticePeriod") != null && !jsonObj.get("noticePeriod").isJsonNull()) && !jsonObj.get("noticePeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `noticePeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("noticePeriod").toString()));
      }
      if (!jsonObj.get("holidayList").isJsonNull() && (jsonObj.get("holidayList") != null && !jsonObj.get("holidayList").isJsonNull()) && !jsonObj.get("holidayList").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `holidayList` to be a primitive type in the JSON string but got `%s`", jsonObj.get("holidayList").toString()));
      }
      if (!jsonObj.get("costCenter").isJsonNull() && (jsonObj.get("costCenter") != null && !jsonObj.get("costCenter").isJsonNull()) && !jsonObj.get("costCenter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `costCenter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("costCenter").toString()));
      }
      if (!jsonObj.get("payBand").isJsonNull() && (jsonObj.get("payBand") != null && !jsonObj.get("payBand").isJsonNull()) && !jsonObj.get("payBand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payBand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payBand").toString()));
      }
      if (!jsonObj.get("payGrade").isJsonNull() && (jsonObj.get("payGrade") != null && !jsonObj.get("payGrade").isJsonNull()) && !jsonObj.get("payGrade").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payGrade` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payGrade").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobDetailsUpdateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobDetailsUpdateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobDetailsUpdateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobDetailsUpdateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<JobDetailsUpdateRequest>() {
           @Override
           public void write(JsonWriter out, JobDetailsUpdateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public JobDetailsUpdateRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             JobDetailsUpdateRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of JobDetailsUpdateRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of JobDetailsUpdateRequest
  * @throws IOException if the JSON string is invalid with respect to JobDetailsUpdateRequest
  */
  public static JobDetailsUpdateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobDetailsUpdateRequest.class);
  }

 /**
  * Convert an instance of JobDetailsUpdateRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

