/*
 * Requisition
 * Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EducationDTO;
import com.konfigthis.client.model.ExperienceDTO;
import com.konfigthis.client.model.Gender;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TalentPoolCandidateDTO
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TalentPoolCandidateDTO {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_MIDDLE_NAME = "middleName";
  @SerializedName(SERIALIZED_NAME_MIDDLE_NAME)
  private String middleName;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private Gender gender;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_EDUCATION_DETAILS = "educationDetails";
  @SerializedName(SERIALIZED_NAME_EDUCATION_DETAILS)
  private List<EducationDTO> educationDetails = null;

  public static final String SERIALIZED_NAME_EXPERIENCE_DETAILS = "experienceDetails";
  @SerializedName(SERIALIZED_NAME_EXPERIENCE_DETAILS)
  private List<ExperienceDTO> experienceDetails = null;

  public static final String SERIALIZED_NAME_SKILLS = "skills";
  @SerializedName(SERIALIZED_NAME_SKILLS)
  private List<String> skills = null;

  public static final String SERIALIZED_NAME_ADDITIONAL_CANDIDATE_DETAILS = "additionalCandidateDetails";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_CANDIDATE_DETAILS)
  private Map<String, String> additionalCandidateDetails = null;

  public static final String SERIALIZED_NAME_TALENT_POOL_DETAILS = "talentPoolDetails";
  @SerializedName(SERIALIZED_NAME_TALENT_POOL_DETAILS)
  private Map<String, String> talentPoolDetails = null;

  public TalentPoolCandidateDTO() {
  }

  public TalentPoolCandidateDTO id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public TalentPoolCandidateDTO firstName(String firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * Gets or sets the first name.
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Gets or sets the first name.")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    
    this.firstName = firstName;
  }


  public TalentPoolCandidateDTO lastName(String lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Gets or sets the last name.
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Gets or sets the last name.")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    
    this.lastName = lastName;
  }


  public TalentPoolCandidateDTO middleName(String middleName) {
    
    
    
    
    this.middleName = middleName;
    return this;
  }

   /**
   * Gets or sets the middle name.
   * @return middleName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Gets or sets the middle name.")

  public String getMiddleName() {
    return middleName;
  }


  public void setMiddleName(String middleName) {
    
    
    
    this.middleName = middleName;
  }


  public TalentPoolCandidateDTO gender(Gender gender) {
    
    
    
    
    this.gender = gender;
    return this;
  }

   /**
   * Get gender
   * @return gender
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Gender getGender() {
    return gender;
  }


  public void setGender(Gender gender) {
    
    
    
    this.gender = gender;
  }


  public TalentPoolCandidateDTO email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * Gets or sets the email.
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Gets or sets the email.")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public TalentPoolCandidateDTO phone(String phone) {
    
    
    
    
    this.phone = phone;
    return this;
  }

   /**
   * Gets or sets the phone
   * @return phone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Gets or sets the phone")

  public String getPhone() {
    return phone;
  }


  public void setPhone(String phone) {
    
    
    
    this.phone = phone;
  }


  public TalentPoolCandidateDTO educationDetails(List<EducationDTO> educationDetails) {
    
    
    
    
    this.educationDetails = educationDetails;
    return this;
  }

  public TalentPoolCandidateDTO addEducationDetailsItem(EducationDTO educationDetailsItem) {
    if (this.educationDetails == null) {
      this.educationDetails = new ArrayList<>();
    }
    this.educationDetails.add(educationDetailsItem);
    return this;
  }

   /**
   * Gets or sets the education details.
   * @return educationDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Gets or sets the education details.")

  public List<EducationDTO> getEducationDetails() {
    return educationDetails;
  }


  public void setEducationDetails(List<EducationDTO> educationDetails) {
    
    
    
    this.educationDetails = educationDetails;
  }


  public TalentPoolCandidateDTO experienceDetails(List<ExperienceDTO> experienceDetails) {
    
    
    
    
    this.experienceDetails = experienceDetails;
    return this;
  }

  public TalentPoolCandidateDTO addExperienceDetailsItem(ExperienceDTO experienceDetailsItem) {
    if (this.experienceDetails == null) {
      this.experienceDetails = new ArrayList<>();
    }
    this.experienceDetails.add(experienceDetailsItem);
    return this;
  }

   /**
   * Gets or sets the experience details.
   * @return experienceDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Gets or sets the experience details.")

  public List<ExperienceDTO> getExperienceDetails() {
    return experienceDetails;
  }


  public void setExperienceDetails(List<ExperienceDTO> experienceDetails) {
    
    
    
    this.experienceDetails = experienceDetails;
  }


  public TalentPoolCandidateDTO skills(List<String> skills) {
    
    
    
    
    this.skills = skills;
    return this;
  }

  public TalentPoolCandidateDTO addSkillsItem(String skillsItem) {
    if (this.skills == null) {
      this.skills = new ArrayList<>();
    }
    this.skills.add(skillsItem);
    return this;
  }

   /**
   * Gets or sets the skills.
   * @return skills
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Gets or sets the skills.")

  public List<String> getSkills() {
    return skills;
  }


  public void setSkills(List<String> skills) {
    
    
    
    this.skills = skills;
  }


  public TalentPoolCandidateDTO additionalCandidateDetails(Map<String, String> additionalCandidateDetails) {
    
    
    
    
    this.additionalCandidateDetails = additionalCandidateDetails;
    return this;
  }

  public TalentPoolCandidateDTO putAdditionalCandidateDetailsItem(String key, String additionalCandidateDetailsItem) {
    if (this.additionalCandidateDetails == null) {
      this.additionalCandidateDetails = new HashMap<>();
    }
    this.additionalCandidateDetails.put(key, additionalCandidateDetailsItem);
    return this;
  }

   /**
   * Get additionalCandidateDetails
   * @return additionalCandidateDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, String> getAdditionalCandidateDetails() {
    return additionalCandidateDetails;
  }


  public void setAdditionalCandidateDetails(Map<String, String> additionalCandidateDetails) {
    
    
    
    this.additionalCandidateDetails = additionalCandidateDetails;
  }


  public TalentPoolCandidateDTO talentPoolDetails(Map<String, String> talentPoolDetails) {
    
    
    
    
    this.talentPoolDetails = talentPoolDetails;
    return this;
  }

  public TalentPoolCandidateDTO putTalentPoolDetailsItem(String key, String talentPoolDetailsItem) {
    if (this.talentPoolDetails == null) {
      this.talentPoolDetails = new HashMap<>();
    }
    this.talentPoolDetails.put(key, talentPoolDetailsItem);
    return this;
  }

   /**
   * Get talentPoolDetails
   * @return talentPoolDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, String> getTalentPoolDetails() {
    return talentPoolDetails;
  }


  public void setTalentPoolDetails(Map<String, String> talentPoolDetails) {
    
    
    
    this.talentPoolDetails = talentPoolDetails;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TalentPoolCandidateDTO instance itself
   */
  public TalentPoolCandidateDTO putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TalentPoolCandidateDTO talentPoolCandidateDTO = (TalentPoolCandidateDTO) o;
    return Objects.equals(this.id, talentPoolCandidateDTO.id) &&
        Objects.equals(this.firstName, talentPoolCandidateDTO.firstName) &&
        Objects.equals(this.lastName, talentPoolCandidateDTO.lastName) &&
        Objects.equals(this.middleName, talentPoolCandidateDTO.middleName) &&
        Objects.equals(this.gender, talentPoolCandidateDTO.gender) &&
        Objects.equals(this.email, talentPoolCandidateDTO.email) &&
        Objects.equals(this.phone, talentPoolCandidateDTO.phone) &&
        Objects.equals(this.educationDetails, talentPoolCandidateDTO.educationDetails) &&
        Objects.equals(this.experienceDetails, talentPoolCandidateDTO.experienceDetails) &&
        Objects.equals(this.skills, talentPoolCandidateDTO.skills) &&
        Objects.equals(this.additionalCandidateDetails, talentPoolCandidateDTO.additionalCandidateDetails) &&
        Objects.equals(this.talentPoolDetails, talentPoolCandidateDTO.talentPoolDetails)&&
        Objects.equals(this.additionalProperties, talentPoolCandidateDTO.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, firstName, lastName, middleName, gender, email, phone, educationDetails, experienceDetails, skills, additionalCandidateDetails, talentPoolDetails, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TalentPoolCandidateDTO {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    educationDetails: ").append(toIndentedString(educationDetails)).append("\n");
    sb.append("    experienceDetails: ").append(toIndentedString(experienceDetails)).append("\n");
    sb.append("    skills: ").append(toIndentedString(skills)).append("\n");
    sb.append("    additionalCandidateDetails: ").append(toIndentedString(additionalCandidateDetails)).append("\n");
    sb.append("    talentPoolDetails: ").append(toIndentedString(talentPoolDetails)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("middleName");
    openapiFields.add("gender");
    openapiFields.add("email");
    openapiFields.add("phone");
    openapiFields.add("educationDetails");
    openapiFields.add("experienceDetails");
    openapiFields.add("skills");
    openapiFields.add("additionalCandidateDetails");
    openapiFields.add("talentPoolDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TalentPoolCandidateDTO
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TalentPoolCandidateDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TalentPoolCandidateDTO is not found in the empty JSON string", TalentPoolCandidateDTO.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonNull() && (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("firstName").isJsonNull() && (jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if (!jsonObj.get("lastName").isJsonNull() && (jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if (!jsonObj.get("middleName").isJsonNull() && (jsonObj.get("middleName") != null && !jsonObj.get("middleName").isJsonNull()) && !jsonObj.get("middleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `middleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("middleName").toString()));
      }
      if (!jsonObj.get("email").isJsonNull() && (jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("phone").isJsonNull() && (jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if (jsonObj.get("educationDetails") != null && !jsonObj.get("educationDetails").isJsonNull()) {
        JsonArray jsonArrayeducationDetails = jsonObj.getAsJsonArray("educationDetails");
        if (jsonArrayeducationDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("educationDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `educationDetails` to be an array in the JSON string but got `%s`", jsonObj.get("educationDetails").toString()));
          }

          // validate the optional field `educationDetails` (array)
          for (int i = 0; i < jsonArrayeducationDetails.size(); i++) {
            EducationDTO.validateJsonObject(jsonArrayeducationDetails.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("experienceDetails") != null && !jsonObj.get("experienceDetails").isJsonNull()) {
        JsonArray jsonArrayexperienceDetails = jsonObj.getAsJsonArray("experienceDetails");
        if (jsonArrayexperienceDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("experienceDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `experienceDetails` to be an array in the JSON string but got `%s`", jsonObj.get("experienceDetails").toString()));
          }

          // validate the optional field `experienceDetails` (array)
          for (int i = 0; i < jsonArrayexperienceDetails.size(); i++) {
            ExperienceDTO.validateJsonObject(jsonArrayexperienceDetails.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("skills") != null && !jsonObj.get("skills").isJsonNull() && !jsonObj.get("skills").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `skills` to be an array in the JSON string or null but got `%s`", jsonObj.get("skills").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TalentPoolCandidateDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TalentPoolCandidateDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TalentPoolCandidateDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TalentPoolCandidateDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<TalentPoolCandidateDTO>() {
           @Override
           public void write(JsonWriter out, TalentPoolCandidateDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TalentPoolCandidateDTO read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TalentPoolCandidateDTO instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TalentPoolCandidateDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TalentPoolCandidateDTO
  * @throws IOException if the JSON string is invalid with respect to TalentPoolCandidateDTO
  */
  public static TalentPoolCandidateDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TalentPoolCandidateDTO.class);
  }

 /**
  * Convert an instance of TalentPoolCandidateDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

