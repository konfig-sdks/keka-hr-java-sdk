/*
 * Requisition
 * Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import com.konfigthis.client.model.TalentPoolApplicationFieldsDTO;
import com.konfigthis.client.model.TalentPoolCandidateDTO;
import com.konfigthis.client.model.TalentPoolDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TalentPoolApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TalentPoolApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TalentPoolApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addCandidateCall(String talentPoolId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/hire/talentpool/{talentPoolId}/candidate"
            .replace("{" + "talentPoolId" + "}", localVarApiClient.escapeString(talentPoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/json-patch+json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCandidateValidateBeforeCall(String talentPoolId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'talentPoolId' is set
        if (talentPoolId == null) {
            throw new ApiException("Missing the required parameter 'talentPoolId' when calling addCandidate(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling addCandidate(Async)");
        }

        return addCandidateCall(talentPoolId, requestBody, _callback);

    }


    private ApiResponse<String> addCandidateWithHttpInfo(String talentPoolId, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = addCandidateValidateBeforeCall(talentPoolId, requestBody, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addCandidateAsync(String talentPoolId, Map<String, Object> requestBody, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCandidateValidateBeforeCall(talentPoolId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddCandidateRequestBuilder {
        private final String talentPoolId;

        private AddCandidateRequestBuilder(String talentPoolId) {
            this.talentPoolId = talentPoolId;
        }

        /**
         * Build call for addCandidate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return addCandidateCall(talentPoolId, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            return requestBody;
        }

        /**
         * Execute addCandidate request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<String> localVarResp = addCandidateWithHttpInfo(talentPoolId, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addCandidate request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return addCandidateWithHttpInfo(talentPoolId, requestBody);
        }

        /**
         * Execute addCandidate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return addCandidateAsync(talentPoolId, requestBody, _callback);
        }
    }

    /**
     * Post a candidate to a talent pool
     * Post a candidate to a specified talent pool
     * @param talentPoolId  (required)
     * @param requestBody  (required)
     * @return AddCandidateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public AddCandidateRequestBuilder addCandidate(String talentPoolId) throws IllegalArgumentException {
        if (talentPoolId == null) throw new IllegalArgumentException("\"talentPoolId\" is required but got null");
            

        return new AddCandidateRequestBuilder(talentPoolId);
    }
    private okhttp3.Call getAllCall(OffsetDateTime lastModified, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/hire/talentpool";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lastModified != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastModified", lastModified));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(OffsetDateTime lastModified, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return getAllCall(lastModified, pageNumber, pageSize, _callback);

    }


    private ApiResponse<List<TalentPoolDTO>> getAllWithHttpInfo(OffsetDateTime lastModified, Integer pageNumber, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(lastModified, pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<List<TalentPoolDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(OffsetDateTime lastModified, Integer pageNumber, Integer pageSize, final ApiCallback<List<TalentPoolDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(lastModified, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<List<TalentPoolDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {
        private OffsetDateTime lastModified;
        private Integer pageNumber;
        private Integer pageSize;

        private GetAllRequestBuilder() {
        }

        /**
         * Set lastModified
         * @param lastModified  (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder lastModified(OffsetDateTime lastModified) {
            this.lastModified = lastModified;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber  (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Represents how many results you&#39;d like to retrieve per request (page). Default is 100. Max is 200 (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(lastModified, pageNumber, pageSize, _callback);
        }


        /**
         * Execute getAll request
         * @return List&lt;TalentPoolDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public List<TalentPoolDTO> execute() throws ApiException {
            ApiResponse<List<TalentPoolDTO>> localVarResp = getAllWithHttpInfo(lastModified, pageNumber, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;List&lt;TalentPoolDTO&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<TalentPoolDTO>> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo(lastModified, pageNumber, pageSize);
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<TalentPoolDTO>> _callback) throws ApiException {
            return getAllAsync(lastModified, pageNumber, pageSize, _callback);
        }
    }

    /**
     * Get all Talent pools
     * Get all active talent pools
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll() throws IllegalArgumentException {
        return new GetAllRequestBuilder();
    }
    private okhttp3.Call getApplicationFieldsCall(String talentPoolId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/hire/talentpool/{talentPoolId}/applicationfields"
            .replace("{" + "talentPoolId" + "}", localVarApiClient.escapeString(talentPoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApplicationFieldsValidateBeforeCall(String talentPoolId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'talentPoolId' is set
        if (talentPoolId == null) {
            throw new ApiException("Missing the required parameter 'talentPoolId' when calling getApplicationFields(Async)");
        }

        return getApplicationFieldsCall(talentPoolId, _callback);

    }


    private ApiResponse<List<TalentPoolApplicationFieldsDTO>> getApplicationFieldsWithHttpInfo(String talentPoolId) throws ApiException {
        okhttp3.Call localVarCall = getApplicationFieldsValidateBeforeCall(talentPoolId, null);
        Type localVarReturnType = new TypeToken<List<TalentPoolApplicationFieldsDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getApplicationFieldsAsync(String talentPoolId, final ApiCallback<List<TalentPoolApplicationFieldsDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApplicationFieldsValidateBeforeCall(talentPoolId, _callback);
        Type localVarReturnType = new TypeToken<List<TalentPoolApplicationFieldsDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetApplicationFieldsRequestBuilder {
        private final String talentPoolId;

        private GetApplicationFieldsRequestBuilder(String talentPoolId) {
            this.talentPoolId = talentPoolId;
        }

        /**
         * Build call for getApplicationFields
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getApplicationFieldsCall(talentPoolId, _callback);
        }


        /**
         * Execute getApplicationFields request
         * @return List&lt;TalentPoolApplicationFieldsDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public List<TalentPoolApplicationFieldsDTO> execute() throws ApiException {
            ApiResponse<List<TalentPoolApplicationFieldsDTO>> localVarResp = getApplicationFieldsWithHttpInfo(talentPoolId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getApplicationFields request with HTTP info returned
         * @return ApiResponse&lt;List&lt;TalentPoolApplicationFieldsDTO&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<TalentPoolApplicationFieldsDTO>> executeWithHttpInfo() throws ApiException {
            return getApplicationFieldsWithHttpInfo(talentPoolId);
        }

        /**
         * Execute getApplicationFields request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<TalentPoolApplicationFieldsDTO>> _callback) throws ApiException {
            return getApplicationFieldsAsync(talentPoolId, _callback);
        }
    }

    /**
     * Get Talent pool application fields
     * Get application fields of a specified talent pool
     * @param talentPoolId  (required)
     * @return GetApplicationFieldsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public GetApplicationFieldsRequestBuilder getApplicationFields(String talentPoolId) throws IllegalArgumentException {
        if (talentPoolId == null) throw new IllegalArgumentException("\"talentPoolId\" is required but got null");
            

        return new GetApplicationFieldsRequestBuilder(talentPoolId);
    }
    private okhttp3.Call getCandidatesCall(String talentPoolId, OffsetDateTime lastModified, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/hire/talentpool/{talentPoolId}/candidates"
            .replace("{" + "talentPoolId" + "}", localVarApiClient.escapeString(talentPoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lastModified != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastModified", lastModified));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCandidatesValidateBeforeCall(String talentPoolId, OffsetDateTime lastModified, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'talentPoolId' is set
        if (talentPoolId == null) {
            throw new ApiException("Missing the required parameter 'talentPoolId' when calling getCandidates(Async)");
        }

        return getCandidatesCall(talentPoolId, lastModified, pageNumber, pageSize, _callback);

    }


    private ApiResponse<List<TalentPoolCandidateDTO>> getCandidatesWithHttpInfo(String talentPoolId, OffsetDateTime lastModified, Integer pageNumber, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getCandidatesValidateBeforeCall(talentPoolId, lastModified, pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<List<TalentPoolCandidateDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCandidatesAsync(String talentPoolId, OffsetDateTime lastModified, Integer pageNumber, Integer pageSize, final ApiCallback<List<TalentPoolCandidateDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCandidatesValidateBeforeCall(talentPoolId, lastModified, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<List<TalentPoolCandidateDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCandidatesRequestBuilder {
        private final String talentPoolId;
        private OffsetDateTime lastModified;
        private Integer pageNumber;
        private Integer pageSize;

        private GetCandidatesRequestBuilder(String talentPoolId) {
            this.talentPoolId = talentPoolId;
        }

        /**
         * Set lastModified
         * @param lastModified  (optional)
         * @return GetCandidatesRequestBuilder
         */
        public GetCandidatesRequestBuilder lastModified(OffsetDateTime lastModified) {
            this.lastModified = lastModified;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber  (optional)
         * @return GetCandidatesRequestBuilder
         */
        public GetCandidatesRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Represents how many results you&#39;d like to retrieve per request (page). Default is 100. Max is 200 (optional)
         * @return GetCandidatesRequestBuilder
         */
        public GetCandidatesRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for getCandidates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCandidatesCall(talentPoolId, lastModified, pageNumber, pageSize, _callback);
        }


        /**
         * Execute getCandidates request
         * @return List&lt;TalentPoolCandidateDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public List<TalentPoolCandidateDTO> execute() throws ApiException {
            ApiResponse<List<TalentPoolCandidateDTO>> localVarResp = getCandidatesWithHttpInfo(talentPoolId, lastModified, pageNumber, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCandidates request with HTTP info returned
         * @return ApiResponse&lt;List&lt;TalentPoolCandidateDTO&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<TalentPoolCandidateDTO>> executeWithHttpInfo() throws ApiException {
            return getCandidatesWithHttpInfo(talentPoolId, lastModified, pageNumber, pageSize);
        }

        /**
         * Execute getCandidates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<TalentPoolCandidateDTO>> _callback) throws ApiException {
            return getCandidatesAsync(talentPoolId, lastModified, pageNumber, pageSize, _callback);
        }
    }

    /**
     * Get Talent pool candidates
     * Get candidates in a specified talent pool
     * @param talentPoolId  (required)
     * @return GetCandidatesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public GetCandidatesRequestBuilder getCandidates(String talentPoolId) throws IllegalArgumentException {
        if (talentPoolId == null) throw new IllegalArgumentException("\"talentPoolId\" is required but got null");
            

        return new GetCandidatesRequestBuilder(talentPoolId);
    }
}
