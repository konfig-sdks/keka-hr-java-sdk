/*
 * Requisition
 * Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Address;
import com.konfigthis.client.model.BloodGroup;
import com.konfigthis.client.model.BooleanResponse;
import com.konfigthis.client.model.Employee;
import com.konfigthis.client.model.EmployeeFieldResponse;
import com.konfigthis.client.model.EmployeeProfilePagedResponse;
import com.konfigthis.client.model.EmployeeProfileResponse;
import com.konfigthis.client.model.Gender;
import com.konfigthis.client.model.JobDetailsUpdateRequest;
import com.konfigthis.client.model.MaritalStatus;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.PersonalDetailsUpdateRequest;
import com.konfigthis.client.model.Relation;
import com.konfigthis.client.model.StringResponse;
import com.konfigthis.client.model.TimeType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createEmployeeCall(Employee employee, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employee;

        // create path and map variables
        String localVarPath = "/hris/employees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/json-patch+json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEmployeeValidateBeforeCall(Employee employee, final ApiCallback _callback) throws ApiException {
        return createEmployeeCall(employee, _callback);

    }


    private ApiResponse<StringResponse> createEmployeeWithHttpInfo(Employee employee) throws ApiException {
        okhttp3.Call localVarCall = createEmployeeValidateBeforeCall(employee, null);
        Type localVarReturnType = new TypeToken<StringResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createEmployeeAsync(Employee employee, final ApiCallback<StringResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEmployeeValidateBeforeCall(employee, _callback);
        Type localVarReturnType = new TypeToken<StringResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateEmployeeRequestBuilder {
        private final String displayName;
        private final String firstName;
        private final String lastName;
        private final String email;
        private final Gender gender;
        private final OffsetDateTime dateOfBirth;
        private final OffsetDateTime dateJoined;
        private final String department;
        private final String businessUnit;
        private final String jobTitle;
        private final String location;
        private String employeeNumber;
        private String middleName;
        private String mobileNumber;
        private String secondaryJobTitle;

        private CreateEmployeeRequestBuilder(String displayName, String firstName, String lastName, String email, Gender gender, OffsetDateTime dateOfBirth, OffsetDateTime dateJoined, String department, String businessUnit, String jobTitle, String location) {
            this.displayName = displayName;
            this.firstName = firstName;
            this.lastName = lastName;
            this.email = email;
            this.gender = gender;
            this.dateOfBirth = dateOfBirth;
            this.dateJoined = dateJoined;
            this.department = department;
            this.businessUnit = businessUnit;
            this.jobTitle = jobTitle;
            this.location = location;
        }

        /**
         * Set employeeNumber
         * @param employeeNumber  (optional)
         * @return CreateEmployeeRequestBuilder
         */
        public CreateEmployeeRequestBuilder employeeNumber(String employeeNumber) {
            this.employeeNumber = employeeNumber;
            return this;
        }
        
        /**
         * Set middleName
         * @param middleName  (optional)
         * @return CreateEmployeeRequestBuilder
         */
        public CreateEmployeeRequestBuilder middleName(String middleName) {
            this.middleName = middleName;
            return this;
        }
        
        /**
         * Set mobileNumber
         * @param mobileNumber  (optional)
         * @return CreateEmployeeRequestBuilder
         */
        public CreateEmployeeRequestBuilder mobileNumber(String mobileNumber) {
            this.mobileNumber = mobileNumber;
            return this;
        }
        
        /**
         * Set secondaryJobTitle
         * @param secondaryJobTitle  (optional)
         * @return CreateEmployeeRequestBuilder
         */
        public CreateEmployeeRequestBuilder secondaryJobTitle(String secondaryJobTitle) {
            this.secondaryJobTitle = secondaryJobTitle;
            return this;
        }
        
        /**
         * Build call for createEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Employee employee = buildBodyParams();
            return createEmployeeCall(employee, _callback);
        }

        private Employee buildBodyParams() {
            Employee employee = new Employee();
            employee.employeeNumber(this.employeeNumber);
            employee.displayName(this.displayName);
            employee.firstName(this.firstName);
            employee.middleName(this.middleName);
            employee.lastName(this.lastName);
            employee.email(this.email);
            employee.mobileNumber(this.mobileNumber);
            employee.gender(this.gender);
            employee.dateOfBirth(this.dateOfBirth);
            employee.dateJoined(this.dateJoined);
            employee.department(this.department);
            employee.businessUnit(this.businessUnit);
            employee.jobTitle(this.jobTitle);
            employee.secondaryJobTitle(this.secondaryJobTitle);
            employee.location(this.location);
            return employee;
        }

        /**
         * Execute createEmployee request
         * @return StringResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public StringResponse execute() throws ApiException {
            Employee employee = buildBodyParams();
            ApiResponse<StringResponse> localVarResp = createEmployeeWithHttpInfo(employee);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createEmployee request with HTTP info returned
         * @return ApiResponse&lt;StringResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StringResponse> executeWithHttpInfo() throws ApiException {
            Employee employee = buildBodyParams();
            return createEmployeeWithHttpInfo(employee);
        }

        /**
         * Execute createEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StringResponse> _callback) throws ApiException {
            Employee employee = buildBodyParams();
            return createEmployeeAsync(employee, _callback);
        }
    }

    /**
     * Create an Employee
     * Create an Employee and returns created employee identifier.
     * @return CreateEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public CreateEmployeeRequestBuilder createEmployee(String displayName, String firstName, String lastName, String email, Gender gender, OffsetDateTime dateOfBirth, OffsetDateTime dateJoined, String department, String businessUnit, String jobTitle, String location) throws IllegalArgumentException {
        if (displayName == null) throw new IllegalArgumentException("\"displayName\" is required but got null");
            

        if (firstName == null) throw new IllegalArgumentException("\"firstName\" is required but got null");
            

        if (lastName == null) throw new IllegalArgumentException("\"lastName\" is required but got null");
            

        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (gender == null) throw new IllegalArgumentException("\"gender\" is required but got null");
        if (dateOfBirth == null) throw new IllegalArgumentException("\"dateOfBirth\" is required but got null");
        if (dateJoined == null) throw new IllegalArgumentException("\"dateJoined\" is required but got null");
        if (department == null) throw new IllegalArgumentException("\"department\" is required but got null");
            

        if (businessUnit == null) throw new IllegalArgumentException("\"businessUnit\" is required but got null");
            

        if (jobTitle == null) throw new IllegalArgumentException("\"jobTitle\" is required but got null");
            

        if (location == null) throw new IllegalArgumentException("\"location\" is required but got null");
            

        return new CreateEmployeeRequestBuilder(displayName, firstName, lastName, email, gender, dateOfBirth, dateJoined, department, businessUnit, jobTitle, location);
    }
    private okhttp3.Call getAllCall(String employeeIds, String employeeNumbers, String employmentStatus, Boolean inProbation, Boolean inNoticePeriod, OffsetDateTime lastModified, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hris/employees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employeeIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeIds", employeeIds));
        }

        if (employeeNumbers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeNumbers", employeeNumbers));
        }

        if (employmentStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employmentStatus", employmentStatus));
        }

        if (inProbation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inProbation", inProbation));
        }

        if (inNoticePeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inNoticePeriod", inNoticePeriod));
        }

        if (lastModified != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastModified", lastModified));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(String employeeIds, String employeeNumbers, String employmentStatus, Boolean inProbation, Boolean inNoticePeriod, OffsetDateTime lastModified, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return getAllCall(employeeIds, employeeNumbers, employmentStatus, inProbation, inNoticePeriod, lastModified, pageNumber, pageSize, _callback);

    }


    private ApiResponse<EmployeeProfilePagedResponse> getAllWithHttpInfo(String employeeIds, String employeeNumbers, String employmentStatus, Boolean inProbation, Boolean inNoticePeriod, OffsetDateTime lastModified, Integer pageNumber, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(employeeIds, employeeNumbers, employmentStatus, inProbation, inNoticePeriod, lastModified, pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<EmployeeProfilePagedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(String employeeIds, String employeeNumbers, String employmentStatus, Boolean inProbation, Boolean inNoticePeriod, OffsetDateTime lastModified, Integer pageNumber, Integer pageSize, final ApiCallback<EmployeeProfilePagedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(employeeIds, employeeNumbers, employmentStatus, inProbation, inNoticePeriod, lastModified, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<EmployeeProfilePagedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {
        private String employeeIds;
        private String employeeNumbers;
        private String employmentStatus;
        private Boolean inProbation;
        private Boolean inNoticePeriod;
        private OffsetDateTime lastModified;
        private Integer pageNumber;
        private Integer pageSize;

        private GetAllRequestBuilder() {
        }

        /**
         * Set employeeIds
         * @param employeeIds Comma separated list of one or more Employee ids you&#39;d like to filter on. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder employeeIds(String employeeIds) {
            this.employeeIds = employeeIds;
            return this;
        }
        
        /**
         * Set employeeNumbers
         * @param employeeNumbers Comma separated list of one or more Employee numbers you&#39;d like to filter on. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder employeeNumbers(String employeeNumbers) {
            this.employeeNumbers = employeeNumbers;
            return this;
        }
        
        /**
         * Set employmentStatus
         * @param employmentStatus Comma separated list of one or more Employment Status you&#39;d like to filter on, allowed values are Working, Relieved. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder employmentStatus(String employmentStatus) {
            this.employmentStatus = employmentStatus;
            return this;
        }
        
        /**
         * Set inProbation
         * @param inProbation Fetches employees who are in probation. The allowed value is true or false. (optional, default to false)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder inProbation(Boolean inProbation) {
            this.inProbation = inProbation;
            return this;
        }
        
        /**
         * Set inNoticePeriod
         * @param inNoticePeriod Fetches employees who are in notice period. The allowed value is true or false. (optional, default to false)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder inNoticePeriod(Boolean inNoticePeriod) {
            this.inNoticePeriod = inNoticePeriod;
            return this;
        }
        
        /**
         * Set lastModified
         * @param lastModified Date/time when this time off request was last modified, in ISO 8601 format (YYYY-MM-DDThh:mm:ss±hh:mm). (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder lastModified(OffsetDateTime lastModified) {
            this.lastModified = lastModified;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber  (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Represents how many results you&#39;d like to retrieve per request (page). Default is 100. Max is 200 (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(employeeIds, employeeNumbers, employmentStatus, inProbation, inNoticePeriod, lastModified, pageNumber, pageSize, _callback);
        }


        /**
         * Execute getAll request
         * @return EmployeeProfilePagedResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeProfilePagedResponse execute() throws ApiException {
            ApiResponse<EmployeeProfilePagedResponse> localVarResp = getAllWithHttpInfo(employeeIds, employeeNumbers, employmentStatus, inProbation, inNoticePeriod, lastModified, pageNumber, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;EmployeeProfilePagedResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeProfilePagedResponse> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo(employeeIds, employeeNumbers, employmentStatus, inProbation, inNoticePeriod, lastModified, pageNumber, pageSize);
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeProfilePagedResponse> _callback) throws ApiException {
            return getAllAsync(employeeIds, employeeNumbers, employmentStatus, inProbation, inNoticePeriod, lastModified, pageNumber, pageSize, _callback);
        }
    }

    /**
     * Get all Employees
     * Gets all employees / the specified employees based on employee search parameters.
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll() throws IllegalArgumentException {
        return new GetAllRequestBuilder();
    }
    private okhttp3.Call getAllUpdateFieldsCall(Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hris/employees/updatefields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllUpdateFieldsValidateBeforeCall(Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return getAllUpdateFieldsCall(pageNumber, pageSize, _callback);

    }


    private ApiResponse<EmployeeFieldResponse> getAllUpdateFieldsWithHttpInfo(Integer pageNumber, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getAllUpdateFieldsValidateBeforeCall(pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<EmployeeFieldResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllUpdateFieldsAsync(Integer pageNumber, Integer pageSize, final ApiCallback<EmployeeFieldResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllUpdateFieldsValidateBeforeCall(pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<EmployeeFieldResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllUpdateFieldsRequestBuilder {
        private Integer pageNumber;
        private Integer pageSize;

        private GetAllUpdateFieldsRequestBuilder() {
        }

        /**
         * Set pageNumber
         * @param pageNumber  (optional)
         * @return GetAllUpdateFieldsRequestBuilder
         */
        public GetAllUpdateFieldsRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Represents how many results you&#39;d like to retrieve per request (page). Default is 100. Max is 200 (optional)
         * @return GetAllUpdateFieldsRequestBuilder
         */
        public GetAllUpdateFieldsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for getAllUpdateFields
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllUpdateFieldsCall(pageNumber, pageSize, _callback);
        }


        /**
         * Execute getAllUpdateFields request
         * @return EmployeeFieldResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeFieldResponse execute() throws ApiException {
            ApiResponse<EmployeeFieldResponse> localVarResp = getAllUpdateFieldsWithHttpInfo(pageNumber, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllUpdateFields request with HTTP info returned
         * @return ApiResponse&lt;EmployeeFieldResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeFieldResponse> executeWithHttpInfo() throws ApiException {
            return getAllUpdateFieldsWithHttpInfo(pageNumber, pageSize);
        }

        /**
         * Execute getAllUpdateFields request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeFieldResponse> _callback) throws ApiException {
            return getAllUpdateFieldsAsync(pageNumber, pageSize, _callback);
        }
    }

    /**
     * Get all update fields
     * 
     * @return GetAllUpdateFieldsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public GetAllUpdateFieldsRequestBuilder getAllUpdateFields() throws IllegalArgumentException {
        return new GetAllUpdateFieldsRequestBuilder();
    }
    private okhttp3.Call getByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hris/employees/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getById(Async)");
        }

        return getByIdCall(id, _callback);

    }


    private ApiResponse<EmployeeProfileResponse> getByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<EmployeeProfileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String id, final ApiCallback<EmployeeProfileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<EmployeeProfileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String id;

        private GetByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(id, _callback);
        }


        /**
         * Execute getById request
         * @return EmployeeProfileResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeProfileResponse execute() throws ApiException {
            ApiResponse<EmployeeProfileResponse> localVarResp = getByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;EmployeeProfileResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeProfileResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(id);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeProfileResponse> _callback) throws ApiException {
            return getByIdAsync(id, _callback);
        }
    }

    /**
     * Get an Employee
     * Get an employee with specified identifier.
     * @param id The identifier. (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetByIdRequestBuilder(id);
    }
    private okhttp3.Call updateJobDetailsCall(String id, JobDetailsUpdateRequest jobDetailsUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jobDetailsUpdateRequest;

        // create path and map variables
        String localVarPath = "/hris/employees/{id}/jobdetails"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/json-patch+json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateJobDetailsValidateBeforeCall(String id, JobDetailsUpdateRequest jobDetailsUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateJobDetails(Async)");
        }

        return updateJobDetailsCall(id, jobDetailsUpdateRequest, _callback);

    }


    private ApiResponse<BooleanResponse> updateJobDetailsWithHttpInfo(String id, JobDetailsUpdateRequest jobDetailsUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateJobDetailsValidateBeforeCall(id, jobDetailsUpdateRequest, null);
        Type localVarReturnType = new TypeToken<BooleanResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateJobDetailsAsync(String id, JobDetailsUpdateRequest jobDetailsUpdateRequest, final ApiCallback<BooleanResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateJobDetailsValidateBeforeCall(id, jobDetailsUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<BooleanResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateJobDetailsRequestBuilder {
        private final String id;
        private String employeeNumber;
        private String location;
        private String businessUnit;
        private String department;
        private String jobTitle;
        private String reportingManager;
        private String attendanceNumber;
        private TimeType timeType;
        private String attendanceCaptureScheme;
        private String expensePolicy;
        private String noticePeriod;
        private String holidayList;
        private String costCenter;
        private String payBand;
        private String payGrade;
        private Map<String, Object> customFields;

        private UpdateJobDetailsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set employeeNumber
         * @param employeeNumber  (optional)
         * @return UpdateJobDetailsRequestBuilder
         */
        public UpdateJobDetailsRequestBuilder employeeNumber(String employeeNumber) {
            this.employeeNumber = employeeNumber;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return UpdateJobDetailsRequestBuilder
         */
        public UpdateJobDetailsRequestBuilder location(String location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set businessUnit
         * @param businessUnit  (optional)
         * @return UpdateJobDetailsRequestBuilder
         */
        public UpdateJobDetailsRequestBuilder businessUnit(String businessUnit) {
            this.businessUnit = businessUnit;
            return this;
        }
        
        /**
         * Set department
         * @param department  (optional)
         * @return UpdateJobDetailsRequestBuilder
         */
        public UpdateJobDetailsRequestBuilder department(String department) {
            this.department = department;
            return this;
        }
        
        /**
         * Set jobTitle
         * @param jobTitle  (optional)
         * @return UpdateJobDetailsRequestBuilder
         */
        public UpdateJobDetailsRequestBuilder jobTitle(String jobTitle) {
            this.jobTitle = jobTitle;
            return this;
        }
        
        /**
         * Set reportingManager
         * @param reportingManager  (optional)
         * @return UpdateJobDetailsRequestBuilder
         */
        public UpdateJobDetailsRequestBuilder reportingManager(String reportingManager) {
            this.reportingManager = reportingManager;
            return this;
        }
        
        /**
         * Set attendanceNumber
         * @param attendanceNumber  (optional)
         * @return UpdateJobDetailsRequestBuilder
         */
        public UpdateJobDetailsRequestBuilder attendanceNumber(String attendanceNumber) {
            this.attendanceNumber = attendanceNumber;
            return this;
        }
        
        /**
         * Set timeType
         * @param timeType  (optional)
         * @return UpdateJobDetailsRequestBuilder
         */
        public UpdateJobDetailsRequestBuilder timeType(TimeType timeType) {
            this.timeType = timeType;
            return this;
        }
        
        /**
         * Set attendanceCaptureScheme
         * @param attendanceCaptureScheme  (optional)
         * @return UpdateJobDetailsRequestBuilder
         */
        public UpdateJobDetailsRequestBuilder attendanceCaptureScheme(String attendanceCaptureScheme) {
            this.attendanceCaptureScheme = attendanceCaptureScheme;
            return this;
        }
        
        /**
         * Set expensePolicy
         * @param expensePolicy  (optional)
         * @return UpdateJobDetailsRequestBuilder
         */
        public UpdateJobDetailsRequestBuilder expensePolicy(String expensePolicy) {
            this.expensePolicy = expensePolicy;
            return this;
        }
        
        /**
         * Set noticePeriod
         * @param noticePeriod  (optional)
         * @return UpdateJobDetailsRequestBuilder
         */
        public UpdateJobDetailsRequestBuilder noticePeriod(String noticePeriod) {
            this.noticePeriod = noticePeriod;
            return this;
        }
        
        /**
         * Set holidayList
         * @param holidayList  (optional)
         * @return UpdateJobDetailsRequestBuilder
         */
        public UpdateJobDetailsRequestBuilder holidayList(String holidayList) {
            this.holidayList = holidayList;
            return this;
        }
        
        /**
         * Set costCenter
         * @param costCenter  (optional)
         * @return UpdateJobDetailsRequestBuilder
         */
        public UpdateJobDetailsRequestBuilder costCenter(String costCenter) {
            this.costCenter = costCenter;
            return this;
        }
        
        /**
         * Set payBand
         * @param payBand  (optional)
         * @return UpdateJobDetailsRequestBuilder
         */
        public UpdateJobDetailsRequestBuilder payBand(String payBand) {
            this.payBand = payBand;
            return this;
        }
        
        /**
         * Set payGrade
         * @param payGrade  (optional)
         * @return UpdateJobDetailsRequestBuilder
         */
        public UpdateJobDetailsRequestBuilder payGrade(String payGrade) {
            this.payGrade = payGrade;
            return this;
        }
        
        /**
         * Set customFields
         * @param customFields  (optional)
         * @return UpdateJobDetailsRequestBuilder
         */
        public UpdateJobDetailsRequestBuilder customFields(Map<String, Object> customFields) {
            this.customFields = customFields;
            return this;
        }
        
        /**
         * Build call for updateJobDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            JobDetailsUpdateRequest jobDetailsUpdateRequest = buildBodyParams();
            return updateJobDetailsCall(id, jobDetailsUpdateRequest, _callback);
        }

        private JobDetailsUpdateRequest buildBodyParams() {
            JobDetailsUpdateRequest jobDetailsUpdateRequest = new JobDetailsUpdateRequest();
            jobDetailsUpdateRequest.employeeNumber(this.employeeNumber);
            jobDetailsUpdateRequest.location(this.location);
            jobDetailsUpdateRequest.businessUnit(this.businessUnit);
            jobDetailsUpdateRequest.department(this.department);
            jobDetailsUpdateRequest.jobTitle(this.jobTitle);
            jobDetailsUpdateRequest.reportingManager(this.reportingManager);
            jobDetailsUpdateRequest.attendanceNumber(this.attendanceNumber);
            jobDetailsUpdateRequest.timeType(this.timeType);
            jobDetailsUpdateRequest.attendanceCaptureScheme(this.attendanceCaptureScheme);
            jobDetailsUpdateRequest.expensePolicy(this.expensePolicy);
            jobDetailsUpdateRequest.noticePeriod(this.noticePeriod);
            jobDetailsUpdateRequest.holidayList(this.holidayList);
            jobDetailsUpdateRequest.costCenter(this.costCenter);
            jobDetailsUpdateRequest.payBand(this.payBand);
            jobDetailsUpdateRequest.payGrade(this.payGrade);
            jobDetailsUpdateRequest.customFields(this.customFields);
            return jobDetailsUpdateRequest;
        }

        /**
         * Execute updateJobDetails request
         * @return BooleanResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public BooleanResponse execute() throws ApiException {
            JobDetailsUpdateRequest jobDetailsUpdateRequest = buildBodyParams();
            ApiResponse<BooleanResponse> localVarResp = updateJobDetailsWithHttpInfo(id, jobDetailsUpdateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateJobDetails request with HTTP info returned
         * @return ApiResponse&lt;BooleanResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BooleanResponse> executeWithHttpInfo() throws ApiException {
            JobDetailsUpdateRequest jobDetailsUpdateRequest = buildBodyParams();
            return updateJobDetailsWithHttpInfo(id, jobDetailsUpdateRequest);
        }

        /**
         * Execute updateJobDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BooleanResponse> _callback) throws ApiException {
            JobDetailsUpdateRequest jobDetailsUpdateRequest = buildBodyParams();
            return updateJobDetailsAsync(id, jobDetailsUpdateRequest, _callback);
        }
    }

    /**
     * Update employee job details
     * Update employee job details.
     * @param id The identifier. (required)
     * @return UpdateJobDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public UpdateJobDetailsRequestBuilder updateJobDetails(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateJobDetailsRequestBuilder(id);
    }
    private okhttp3.Call updatePersonalDetailsCall(String id, PersonalDetailsUpdateRequest personalDetailsUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = personalDetailsUpdateRequest;

        // create path and map variables
        String localVarPath = "/hris/employees/{id}/personaldetails"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/json-patch+json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePersonalDetailsValidateBeforeCall(String id, PersonalDetailsUpdateRequest personalDetailsUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updatePersonalDetails(Async)");
        }

        return updatePersonalDetailsCall(id, personalDetailsUpdateRequest, _callback);

    }


    private ApiResponse<BooleanResponse> updatePersonalDetailsWithHttpInfo(String id, PersonalDetailsUpdateRequest personalDetailsUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePersonalDetailsValidateBeforeCall(id, personalDetailsUpdateRequest, null);
        Type localVarReturnType = new TypeToken<BooleanResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePersonalDetailsAsync(String id, PersonalDetailsUpdateRequest personalDetailsUpdateRequest, final ApiCallback<BooleanResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePersonalDetailsValidateBeforeCall(id, personalDetailsUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<BooleanResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePersonalDetailsRequestBuilder {
        private final String id;
        private String displayName;
        private String firstName;
        private String middleName;
        private String lastName;
        private Gender gender;
        private OffsetDateTime dateOfBirth;
        private String workPhone;
        private String homePhone;
        private String personalEmail;
        private String skypeId;
        private MaritalStatus maritalStatus;
        private OffsetDateTime marriageDate;
        private List<Relation> relations;
        private BloodGroup bloodGroup;
        private Address currentAddress;
        private Address permanentAddress;
        private String professionalSummary;
        private Map<String, Object> customFields;

        private UpdatePersonalDetailsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set displayName
         * @param displayName  (optional)
         * @return UpdatePersonalDetailsRequestBuilder
         */
        public UpdatePersonalDetailsRequestBuilder displayName(String displayName) {
            this.displayName = displayName;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName  (optional)
         * @return UpdatePersonalDetailsRequestBuilder
         */
        public UpdatePersonalDetailsRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set middleName
         * @param middleName  (optional)
         * @return UpdatePersonalDetailsRequestBuilder
         */
        public UpdatePersonalDetailsRequestBuilder middleName(String middleName) {
            this.middleName = middleName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName  (optional)
         * @return UpdatePersonalDetailsRequestBuilder
         */
        public UpdatePersonalDetailsRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set gender
         * @param gender  (optional)
         * @return UpdatePersonalDetailsRequestBuilder
         */
        public UpdatePersonalDetailsRequestBuilder gender(Gender gender) {
            this.gender = gender;
            return this;
        }
        
        /**
         * Set dateOfBirth
         * @param dateOfBirth  (optional)
         * @return UpdatePersonalDetailsRequestBuilder
         */
        public UpdatePersonalDetailsRequestBuilder dateOfBirth(OffsetDateTime dateOfBirth) {
            this.dateOfBirth = dateOfBirth;
            return this;
        }
        
        /**
         * Set workPhone
         * @param workPhone  (optional)
         * @return UpdatePersonalDetailsRequestBuilder
         */
        public UpdatePersonalDetailsRequestBuilder workPhone(String workPhone) {
            this.workPhone = workPhone;
            return this;
        }
        
        /**
         * Set homePhone
         * @param homePhone  (optional)
         * @return UpdatePersonalDetailsRequestBuilder
         */
        public UpdatePersonalDetailsRequestBuilder homePhone(String homePhone) {
            this.homePhone = homePhone;
            return this;
        }
        
        /**
         * Set personalEmail
         * @param personalEmail  (optional)
         * @return UpdatePersonalDetailsRequestBuilder
         */
        public UpdatePersonalDetailsRequestBuilder personalEmail(String personalEmail) {
            this.personalEmail = personalEmail;
            return this;
        }
        
        /**
         * Set skypeId
         * @param skypeId  (optional)
         * @return UpdatePersonalDetailsRequestBuilder
         */
        public UpdatePersonalDetailsRequestBuilder skypeId(String skypeId) {
            this.skypeId = skypeId;
            return this;
        }
        
        /**
         * Set maritalStatus
         * @param maritalStatus  (optional)
         * @return UpdatePersonalDetailsRequestBuilder
         */
        public UpdatePersonalDetailsRequestBuilder maritalStatus(MaritalStatus maritalStatus) {
            this.maritalStatus = maritalStatus;
            return this;
        }
        
        /**
         * Set marriageDate
         * @param marriageDate  (optional)
         * @return UpdatePersonalDetailsRequestBuilder
         */
        public UpdatePersonalDetailsRequestBuilder marriageDate(OffsetDateTime marriageDate) {
            this.marriageDate = marriageDate;
            return this;
        }
        
        /**
         * Set relations
         * @param relations  (optional)
         * @return UpdatePersonalDetailsRequestBuilder
         */
        public UpdatePersonalDetailsRequestBuilder relations(List<Relation> relations) {
            this.relations = relations;
            return this;
        }
        
        /**
         * Set bloodGroup
         * @param bloodGroup  (optional)
         * @return UpdatePersonalDetailsRequestBuilder
         */
        public UpdatePersonalDetailsRequestBuilder bloodGroup(BloodGroup bloodGroup) {
            this.bloodGroup = bloodGroup;
            return this;
        }
        
        /**
         * Set currentAddress
         * @param currentAddress  (optional)
         * @return UpdatePersonalDetailsRequestBuilder
         */
        public UpdatePersonalDetailsRequestBuilder currentAddress(Address currentAddress) {
            this.currentAddress = currentAddress;
            return this;
        }
        
        /**
         * Set permanentAddress
         * @param permanentAddress  (optional)
         * @return UpdatePersonalDetailsRequestBuilder
         */
        public UpdatePersonalDetailsRequestBuilder permanentAddress(Address permanentAddress) {
            this.permanentAddress = permanentAddress;
            return this;
        }
        
        /**
         * Set professionalSummary
         * @param professionalSummary  (optional)
         * @return UpdatePersonalDetailsRequestBuilder
         */
        public UpdatePersonalDetailsRequestBuilder professionalSummary(String professionalSummary) {
            this.professionalSummary = professionalSummary;
            return this;
        }
        
        /**
         * Set customFields
         * @param customFields  (optional)
         * @return UpdatePersonalDetailsRequestBuilder
         */
        public UpdatePersonalDetailsRequestBuilder customFields(Map<String, Object> customFields) {
            this.customFields = customFields;
            return this;
        }
        
        /**
         * Build call for updatePersonalDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PersonalDetailsUpdateRequest personalDetailsUpdateRequest = buildBodyParams();
            return updatePersonalDetailsCall(id, personalDetailsUpdateRequest, _callback);
        }

        private PersonalDetailsUpdateRequest buildBodyParams() {
            PersonalDetailsUpdateRequest personalDetailsUpdateRequest = new PersonalDetailsUpdateRequest();
            personalDetailsUpdateRequest.displayName(this.displayName);
            personalDetailsUpdateRequest.firstName(this.firstName);
            personalDetailsUpdateRequest.middleName(this.middleName);
            personalDetailsUpdateRequest.lastName(this.lastName);
            personalDetailsUpdateRequest.gender(this.gender);
            personalDetailsUpdateRequest.dateOfBirth(this.dateOfBirth);
            personalDetailsUpdateRequest.workPhone(this.workPhone);
            personalDetailsUpdateRequest.homePhone(this.homePhone);
            personalDetailsUpdateRequest.personalEmail(this.personalEmail);
            personalDetailsUpdateRequest.skypeId(this.skypeId);
            personalDetailsUpdateRequest.maritalStatus(this.maritalStatus);
            personalDetailsUpdateRequest.marriageDate(this.marriageDate);
            personalDetailsUpdateRequest.relations(this.relations);
            personalDetailsUpdateRequest.bloodGroup(this.bloodGroup);
            personalDetailsUpdateRequest.currentAddress(this.currentAddress);
            personalDetailsUpdateRequest.permanentAddress(this.permanentAddress);
            personalDetailsUpdateRequest.professionalSummary(this.professionalSummary);
            personalDetailsUpdateRequest.customFields(this.customFields);
            return personalDetailsUpdateRequest;
        }

        /**
         * Execute updatePersonalDetails request
         * @return BooleanResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public BooleanResponse execute() throws ApiException {
            PersonalDetailsUpdateRequest personalDetailsUpdateRequest = buildBodyParams();
            ApiResponse<BooleanResponse> localVarResp = updatePersonalDetailsWithHttpInfo(id, personalDetailsUpdateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePersonalDetails request with HTTP info returned
         * @return ApiResponse&lt;BooleanResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BooleanResponse> executeWithHttpInfo() throws ApiException {
            PersonalDetailsUpdateRequest personalDetailsUpdateRequest = buildBodyParams();
            return updatePersonalDetailsWithHttpInfo(id, personalDetailsUpdateRequest);
        }

        /**
         * Execute updatePersonalDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BooleanResponse> _callback) throws ApiException {
            PersonalDetailsUpdateRequest personalDetailsUpdateRequest = buildBodyParams();
            return updatePersonalDetailsAsync(id, personalDetailsUpdateRequest, _callback);
        }
    }

    /**
     * Update Employee personal details
     * Update Employee personal details.
     * @param id The identifier. (required)
     * @return UpdatePersonalDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePersonalDetailsRequestBuilder updatePersonalDetails(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdatePersonalDetailsRequestBuilder(id);
    }
}
