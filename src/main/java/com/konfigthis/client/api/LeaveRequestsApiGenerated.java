/*
 * Requisition
 * Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.LeaveRequestPagedResponse;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.PostLeaveRequest;
import com.konfigthis.client.model.SessionType;
import com.konfigthis.client.model.StringResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LeaveRequestsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LeaveRequestsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LeaveRequestsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createRequestIdentifierCall(PostLeaveRequest postLeaveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postLeaveRequest;

        // create path and map variables
        String localVarPath = "/time/leaverequests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/json-patch+json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRequestIdentifierValidateBeforeCall(PostLeaveRequest postLeaveRequest, final ApiCallback _callback) throws ApiException {
        return createRequestIdentifierCall(postLeaveRequest, _callback);

    }


    private ApiResponse<StringResponse> createRequestIdentifierWithHttpInfo(PostLeaveRequest postLeaveRequest) throws ApiException {
        okhttp3.Call localVarCall = createRequestIdentifierValidateBeforeCall(postLeaveRequest, null);
        Type localVarReturnType = new TypeToken<StringResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createRequestIdentifierAsync(PostLeaveRequest postLeaveRequest, final ApiCallback<StringResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRequestIdentifierValidateBeforeCall(postLeaveRequest, _callback);
        Type localVarReturnType = new TypeToken<StringResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRequestIdentifierRequestBuilder {
        private final String employeeId;
        private final String requestedBy;
        private final OffsetDateTime fromDate;
        private final OffsetDateTime toDate;
        private final String leaveTypeId;
        private final String reason;
        private SessionType fromSession;
        private SessionType toSession;
        private String note;

        private CreateRequestIdentifierRequestBuilder(String employeeId, String requestedBy, OffsetDateTime fromDate, OffsetDateTime toDate, String leaveTypeId, String reason) {
            this.employeeId = employeeId;
            this.requestedBy = requestedBy;
            this.fromDate = fromDate;
            this.toDate = toDate;
            this.leaveTypeId = leaveTypeId;
            this.reason = reason;
        }

        /**
         * Set fromSession
         * @param fromSession  (optional)
         * @return CreateRequestIdentifierRequestBuilder
         */
        public CreateRequestIdentifierRequestBuilder fromSession(SessionType fromSession) {
            this.fromSession = fromSession;
            return this;
        }
        
        /**
         * Set toSession
         * @param toSession  (optional)
         * @return CreateRequestIdentifierRequestBuilder
         */
        public CreateRequestIdentifierRequestBuilder toSession(SessionType toSession) {
            this.toSession = toSession;
            return this;
        }
        
        /**
         * Set note
         * @param note  (optional)
         * @return CreateRequestIdentifierRequestBuilder
         */
        public CreateRequestIdentifierRequestBuilder note(String note) {
            this.note = note;
            return this;
        }
        
        /**
         * Build call for createRequestIdentifier
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PostLeaveRequest postLeaveRequest = buildBodyParams();
            return createRequestIdentifierCall(postLeaveRequest, _callback);
        }

        private PostLeaveRequest buildBodyParams() {
            PostLeaveRequest postLeaveRequest = new PostLeaveRequest();
            postLeaveRequest.employeeId(this.employeeId);
            postLeaveRequest.requestedBy(this.requestedBy);
            postLeaveRequest.fromDate(this.fromDate);
            postLeaveRequest.toDate(this.toDate);
            postLeaveRequest.fromSession(this.fromSession);
            postLeaveRequest.toSession(this.toSession);
            postLeaveRequest.leaveTypeId(this.leaveTypeId);
            postLeaveRequest.reason(this.reason);
            postLeaveRequest.note(this.note);
            return postLeaveRequest;
        }

        /**
         * Execute createRequestIdentifier request
         * @return StringResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public StringResponse execute() throws ApiException {
            PostLeaveRequest postLeaveRequest = buildBodyParams();
            ApiResponse<StringResponse> localVarResp = createRequestIdentifierWithHttpInfo(postLeaveRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createRequestIdentifier request with HTTP info returned
         * @return ApiResponse&lt;StringResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StringResponse> executeWithHttpInfo() throws ApiException {
            PostLeaveRequest postLeaveRequest = buildBodyParams();
            return createRequestIdentifierWithHttpInfo(postLeaveRequest);
        }

        /**
         * Execute createRequestIdentifier request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StringResponse> _callback) throws ApiException {
            PostLeaveRequest postLeaveRequest = buildBodyParams();
            return createRequestIdentifierAsync(postLeaveRequest, _callback);
        }
    }

    /**
     * Create an Leave Request
     * Create an leave request and returns leave request identifier.
     * @return CreateRequestIdentifierRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public CreateRequestIdentifierRequestBuilder createRequestIdentifier(String employeeId, String requestedBy, OffsetDateTime fromDate, OffsetDateTime toDate, String leaveTypeId, String reason) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (requestedBy == null) throw new IllegalArgumentException("\"requestedBy\" is required but got null");
            

        if (fromDate == null) throw new IllegalArgumentException("\"fromDate\" is required but got null");
        if (toDate == null) throw new IllegalArgumentException("\"toDate\" is required but got null");
        if (leaveTypeId == null) throw new IllegalArgumentException("\"leaveTypeId\" is required but got null");
            

        if (reason == null) throw new IllegalArgumentException("\"reason\" is required but got null");
            

        return new CreateRequestIdentifierRequestBuilder(employeeId, requestedBy, fromDate, toDate, leaveTypeId, reason);
    }
    private okhttp3.Call getAllBetweenDatesCall(String employeeIds, OffsetDateTime from, OffsetDateTime to, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/time/leaverequests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employeeIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeIds", employeeIds));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllBetweenDatesValidateBeforeCall(String employeeIds, OffsetDateTime from, OffsetDateTime to, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return getAllBetweenDatesCall(employeeIds, from, to, pageNumber, pageSize, _callback);

    }


    private ApiResponse<LeaveRequestPagedResponse> getAllBetweenDatesWithHttpInfo(String employeeIds, OffsetDateTime from, OffsetDateTime to, Integer pageNumber, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getAllBetweenDatesValidateBeforeCall(employeeIds, from, to, pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<LeaveRequestPagedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllBetweenDatesAsync(String employeeIds, OffsetDateTime from, OffsetDateTime to, Integer pageNumber, Integer pageSize, final ApiCallback<LeaveRequestPagedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllBetweenDatesValidateBeforeCall(employeeIds, from, to, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<LeaveRequestPagedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllBetweenDatesRequestBuilder {
        private String employeeIds;
        private OffsetDateTime from;
        private OffsetDateTime to;
        private Integer pageNumber;
        private Integer pageSize;

        private GetAllBetweenDatesRequestBuilder() {
        }

        /**
         * Set employeeIds
         * @param employeeIds Comma separated list of one or more Employee ids you&#39;d like to filter on. (optional)
         * @return GetAllBetweenDatesRequestBuilder
         */
        public GetAllBetweenDatesRequestBuilder employeeIds(String employeeIds) {
            this.employeeIds = employeeIds;
            return this;
        }
        
        /**
         * Set from
         * @param from From date. (optional)
         * @return GetAllBetweenDatesRequestBuilder
         */
        public GetAllBetweenDatesRequestBuilder from(OffsetDateTime from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set to
         * @param to To date. (optional)
         * @return GetAllBetweenDatesRequestBuilder
         */
        public GetAllBetweenDatesRequestBuilder to(OffsetDateTime to) {
            this.to = to;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber  (optional)
         * @return GetAllBetweenDatesRequestBuilder
         */
        public GetAllBetweenDatesRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Represents how many results you&#39;d like to retrieve per request (page). Default is 100. Max is 200 (optional)
         * @return GetAllBetweenDatesRequestBuilder
         */
        public GetAllBetweenDatesRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for getAllBetweenDates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllBetweenDatesCall(employeeIds, from, to, pageNumber, pageSize, _callback);
        }


        /**
         * Execute getAllBetweenDates request
         * @return LeaveRequestPagedResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public LeaveRequestPagedResponse execute() throws ApiException {
            ApiResponse<LeaveRequestPagedResponse> localVarResp = getAllBetweenDatesWithHttpInfo(employeeIds, from, to, pageNumber, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllBetweenDates request with HTTP info returned
         * @return ApiResponse&lt;LeaveRequestPagedResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LeaveRequestPagedResponse> executeWithHttpInfo() throws ApiException {
            return getAllBetweenDatesWithHttpInfo(employeeIds, from, to, pageNumber, pageSize);
        }

        /**
         * Execute getAllBetweenDates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LeaveRequestPagedResponse> _callback) throws ApiException {
            return getAllBetweenDatesAsync(employeeIds, from, to, pageNumber, pageSize, _callback);
        }
    }

    /**
     * Get all Leave Requests
     * Get all the leaves in the organization between &#x60;from&#x60; and &#x60;to&#x60; date.If both &#x60;from&#x60; and &#x60;to&#x60; are not specified, last 30 days records are returned.&#x60;from&#x60; date should be before &#x60;to&#x60; date.The difference between &#x60;from&#x60; and &#x60;to&#x60; date cannot be more than **90** days.
     * @return GetAllBetweenDatesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public GetAllBetweenDatesRequestBuilder getAllBetweenDates() throws IllegalArgumentException {
        return new GetAllBetweenDatesRequestBuilder();
    }
}
