/*
 * Requisition
 * Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.APIPraisePagedResponse;
import com.konfigthis.client.model.AddPraise;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.StringResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PraiseApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PraiseApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PraiseApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createPraiseIdentifierCall(AddPraise addPraise, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addPraise;

        // create path and map variables
        String localVarPath = "/pms/praise";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/json-patch+json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPraiseIdentifierValidateBeforeCall(AddPraise addPraise, final ApiCallback _callback) throws ApiException {
        return createPraiseIdentifierCall(addPraise, _callback);

    }


    private ApiResponse<StringResponse> createPraiseIdentifierWithHttpInfo(AddPraise addPraise) throws ApiException {
        okhttp3.Call localVarCall = createPraiseIdentifierValidateBeforeCall(addPraise, null);
        Type localVarReturnType = new TypeToken<StringResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPraiseIdentifierAsync(AddPraise addPraise, final ApiCallback<StringResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPraiseIdentifierValidateBeforeCall(addPraise, _callback);
        Type localVarReturnType = new TypeToken<StringResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePraiseIdentifierRequestBuilder {
        private final List<String> employeeIds;
        private final String feedback;
        private final String badgeId;
        private final String givenBy;

        private CreatePraiseIdentifierRequestBuilder(List<String> employeeIds, String feedback, String badgeId, String givenBy) {
            this.employeeIds = employeeIds;
            this.feedback = feedback;
            this.badgeId = badgeId;
            this.givenBy = givenBy;
        }

        /**
         * Build call for createPraiseIdentifier
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddPraise addPraise = buildBodyParams();
            return createPraiseIdentifierCall(addPraise, _callback);
        }

        private AddPraise buildBodyParams() {
            AddPraise addPraise = new AddPraise();
            addPraise.employeeIds(this.employeeIds);
            addPraise.feedback(this.feedback);
            addPraise.badgeId(this.badgeId);
            addPraise.givenBy(this.givenBy);
            return addPraise;
        }

        /**
         * Execute createPraiseIdentifier request
         * @return StringResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public StringResponse execute() throws ApiException {
            AddPraise addPraise = buildBodyParams();
            ApiResponse<StringResponse> localVarResp = createPraiseIdentifierWithHttpInfo(addPraise);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPraiseIdentifier request with HTTP info returned
         * @return ApiResponse&lt;StringResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StringResponse> executeWithHttpInfo() throws ApiException {
            AddPraise addPraise = buildBodyParams();
            return createPraiseIdentifierWithHttpInfo(addPraise);
        }

        /**
         * Execute createPraiseIdentifier request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StringResponse> _callback) throws ApiException {
            AddPraise addPraise = buildBodyParams();
            return createPraiseIdentifierAsync(addPraise, _callback);
        }
    }

    /**
     * Add Praise
     * Add an praise and returns created praise identifier.
     * @return CreatePraiseIdentifierRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public CreatePraiseIdentifierRequestBuilder createPraiseIdentifier(List<String> employeeIds, String feedback, String badgeId, String givenBy) throws IllegalArgumentException {
        if (employeeIds == null) throw new IllegalArgumentException("\"employeeIds\" is required but got null");
        if (feedback == null) throw new IllegalArgumentException("\"feedback\" is required but got null");
            

        if (badgeId == null) throw new IllegalArgumentException("\"badgeId\" is required but got null");
            

        if (givenBy == null) throw new IllegalArgumentException("\"givenBy\" is required but got null");
            

        return new CreatePraiseIdentifierRequestBuilder(employeeIds, feedback, badgeId, givenBy);
    }
    private okhttp3.Call listEmployeesPraisesCall(String praiseIds, OffsetDateTime from, OffsetDateTime to, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pms/praise";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (praiseIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("praiseIds", praiseIds));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEmployeesPraisesValidateBeforeCall(String praiseIds, OffsetDateTime from, OffsetDateTime to, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return listEmployeesPraisesCall(praiseIds, from, to, pageNumber, pageSize, _callback);

    }


    private ApiResponse<APIPraisePagedResponse> listEmployeesPraisesWithHttpInfo(String praiseIds, OffsetDateTime from, OffsetDateTime to, Integer pageNumber, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listEmployeesPraisesValidateBeforeCall(praiseIds, from, to, pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<APIPraisePagedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listEmployeesPraisesAsync(String praiseIds, OffsetDateTime from, OffsetDateTime to, Integer pageNumber, Integer pageSize, final ApiCallback<APIPraisePagedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEmployeesPraisesValidateBeforeCall(praiseIds, from, to, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<APIPraisePagedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListEmployeesPraisesRequestBuilder {
        private String praiseIds;
        private OffsetDateTime from;
        private OffsetDateTime to;
        private Integer pageNumber;
        private Integer pageSize;

        private ListEmployeesPraisesRequestBuilder() {
        }

        /**
         * Set praiseIds
         * @param praiseIds Comma separated list of one or more praise ids you&#39;d like to filter on. (optional)
         * @return ListEmployeesPraisesRequestBuilder
         */
        public ListEmployeesPraisesRequestBuilder praiseIds(String praiseIds) {
            this.praiseIds = praiseIds;
            return this;
        }
        
        /**
         * Set from
         * @param from Date/time from records to retrieve, in ISO 8601 format (YYYY-MM-DDThh:mm:ss±hh). If not specified defaults to &#x60;to - 30&#x60; days. (optional)
         * @return ListEmployeesPraisesRequestBuilder
         */
        public ListEmployeesPraisesRequestBuilder from(OffsetDateTime from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set to
         * @param to Date/time to records to retrieve, in ISO 8601 format (YYYY-MM-DDThh:mm:ss±hh). If not specified defaults to &#x60;today&#x60;. (optional)
         * @return ListEmployeesPraisesRequestBuilder
         */
        public ListEmployeesPraisesRequestBuilder to(OffsetDateTime to) {
            this.to = to;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber  (optional)
         * @return ListEmployeesPraisesRequestBuilder
         */
        public ListEmployeesPraisesRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Represents how many results you&#39;d like to retrieve per request (page). Default is 100. Max is 200 (optional)
         * @return ListEmployeesPraisesRequestBuilder
         */
        public ListEmployeesPraisesRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for listEmployeesPraises
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listEmployeesPraisesCall(praiseIds, from, to, pageNumber, pageSize, _callback);
        }


        /**
         * Execute listEmployeesPraises request
         * @return APIPraisePagedResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public APIPraisePagedResponse execute() throws ApiException {
            ApiResponse<APIPraisePagedResponse> localVarResp = listEmployeesPraisesWithHttpInfo(praiseIds, from, to, pageNumber, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listEmployeesPraises request with HTTP info returned
         * @return ApiResponse&lt;APIPraisePagedResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIPraisePagedResponse> executeWithHttpInfo() throws ApiException {
            return listEmployeesPraisesWithHttpInfo(praiseIds, from, to, pageNumber, pageSize);
        }

        /**
         * Execute listEmployeesPraises request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIPraisePagedResponse> _callback) throws ApiException {
            return listEmployeesPraisesAsync(praiseIds, from, to, pageNumber, pageSize, _callback);
        }
    }

    /**
     * Gets praise list.
     * Gets all employees praises
     * @return ListEmployeesPraisesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListEmployeesPraisesRequestBuilder listEmployeesPraises() throws IllegalArgumentException {
        return new ListEmployeesPraisesRequestBuilder();
    }
}
