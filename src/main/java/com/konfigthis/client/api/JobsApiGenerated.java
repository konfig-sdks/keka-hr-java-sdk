/*
 * Requisition
 * Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CandidateNoteDTO;
import com.konfigthis.client.model.InterviewDTO;
import com.konfigthis.client.model.JobApplicationFieldsDTO;
import com.konfigthis.client.model.JobCandidateDetailsDTO;
import com.konfigthis.client.model.JobDTO;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.ScoreCardDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class JobsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public JobsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public JobsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addCandidateNoteCall(String candidateId, String jobId, CandidateNoteDTO candidateNoteDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = candidateNoteDTO;

        // create path and map variables
        String localVarPath = "/v1/hire/jobs/{jobId}/candidate/{candidateId}/notes"
            .replace("{" + "candidateId" + "}", localVarApiClient.escapeString(candidateId.toString()))
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/json-patch+json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCandidateNoteValidateBeforeCall(String candidateId, String jobId, CandidateNoteDTO candidateNoteDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'candidateId' is set
        if (candidateId == null) {
            throw new ApiException("Missing the required parameter 'candidateId' when calling addCandidateNote(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling addCandidateNote(Async)");
        }

        return addCandidateNoteCall(candidateId, jobId, candidateNoteDTO, _callback);

    }


    private ApiResponse<String> addCandidateNoteWithHttpInfo(String candidateId, String jobId, CandidateNoteDTO candidateNoteDTO) throws ApiException {
        okhttp3.Call localVarCall = addCandidateNoteValidateBeforeCall(candidateId, jobId, candidateNoteDTO, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addCandidateNoteAsync(String candidateId, String jobId, CandidateNoteDTO candidateNoteDTO, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCandidateNoteValidateBeforeCall(candidateId, jobId, candidateNoteDTO, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddCandidateNoteRequestBuilder {
        private final String candidateId;
        private final String jobId;
        private List<String> tags;
        private String comments;

        private AddCandidateNoteRequestBuilder(String candidateId, String jobId) {
            this.candidateId = candidateId;
            this.jobId = jobId;
        }

        /**
         * Set tags
         * @param tags Gets or sets the candidate tags (optional)
         * @return AddCandidateNoteRequestBuilder
         */
        public AddCandidateNoteRequestBuilder tags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set comments
         * @param comments Gets or sets the commnet (optional)
         * @return AddCandidateNoteRequestBuilder
         */
        public AddCandidateNoteRequestBuilder comments(String comments) {
            this.comments = comments;
            return this;
        }
        
        /**
         * Build call for addCandidateNote
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CandidateNoteDTO candidateNoteDTO = buildBodyParams();
            return addCandidateNoteCall(candidateId, jobId, candidateNoteDTO, _callback);
        }

        private CandidateNoteDTO buildBodyParams() {
            CandidateNoteDTO candidateNoteDTO = new CandidateNoteDTO();
            candidateNoteDTO.tags(this.tags);
            candidateNoteDTO.comments(this.comments);
            return candidateNoteDTO;
        }

        /**
         * Execute addCandidateNote request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            CandidateNoteDTO candidateNoteDTO = buildBodyParams();
            ApiResponse<String> localVarResp = addCandidateNoteWithHttpInfo(candidateId, jobId, candidateNoteDTO);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addCandidateNote request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            CandidateNoteDTO candidateNoteDTO = buildBodyParams();
            return addCandidateNoteWithHttpInfo(candidateId, jobId, candidateNoteDTO);
        }

        /**
         * Execute addCandidateNote request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            CandidateNoteDTO candidateNoteDTO = buildBodyParams();
            return addCandidateNoteAsync(candidateId, jobId, candidateNoteDTO, _callback);
        }
    }

    /**
     * Adds candidate note
     * Updated the candidate
     * @param candidateId  (required)
     * @param jobId  (required)
     * @return AddCandidateNoteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public AddCandidateNoteRequestBuilder addCandidateNote(String candidateId, String jobId) throws IllegalArgumentException {
        if (candidateId == null) throw new IllegalArgumentException("\"candidateId\" is required but got null");
            

        if (jobId == null) throw new IllegalArgumentException("\"jobId\" is required but got null");
            

        return new AddCandidateNoteRequestBuilder(candidateId, jobId);
    }
    private okhttp3.Call getAllPublishedJobsCall(OffsetDateTime lastModified, Integer jobStatus, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/hire/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lastModified != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastModified", lastModified));
        }

        if (jobStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("JobStatus", jobStatus));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPublishedJobsValidateBeforeCall(OffsetDateTime lastModified, Integer jobStatus, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return getAllPublishedJobsCall(lastModified, jobStatus, pageNumber, pageSize, _callback);

    }


    private ApiResponse<List<JobDTO>> getAllPublishedJobsWithHttpInfo(OffsetDateTime lastModified, Integer jobStatus, Integer pageNumber, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getAllPublishedJobsValidateBeforeCall(lastModified, jobStatus, pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<List<JobDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllPublishedJobsAsync(OffsetDateTime lastModified, Integer jobStatus, Integer pageNumber, Integer pageSize, final ApiCallback<List<JobDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPublishedJobsValidateBeforeCall(lastModified, jobStatus, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<List<JobDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllPublishedJobsRequestBuilder {
        private OffsetDateTime lastModified;
        private Integer jobStatus;
        private Integer pageNumber;
        private Integer pageSize;

        private GetAllPublishedJobsRequestBuilder() {
        }

        /**
         * Set lastModified
         * @param lastModified  (optional)
         * @return GetAllPublishedJobsRequestBuilder
         */
        public GetAllPublishedJobsRequestBuilder lastModified(OffsetDateTime lastModified) {
            this.lastModified = lastModified;
            return this;
        }
        
        /**
         * Set jobStatus
         * @param jobStatus  (optional)
         * @return GetAllPublishedJobsRequestBuilder
         */
        public GetAllPublishedJobsRequestBuilder jobStatus(Integer jobStatus) {
            this.jobStatus = jobStatus;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber  (optional)
         * @return GetAllPublishedJobsRequestBuilder
         */
        public GetAllPublishedJobsRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Represents how many results you&#39;d like to retrieve per request (page). Default is 100. Max is 200 (optional)
         * @return GetAllPublishedJobsRequestBuilder
         */
        public GetAllPublishedJobsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for getAllPublishedJobs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllPublishedJobsCall(lastModified, jobStatus, pageNumber, pageSize, _callback);
        }


        /**
         * Execute getAllPublishedJobs request
         * @return List&lt;JobDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public List<JobDTO> execute() throws ApiException {
            ApiResponse<List<JobDTO>> localVarResp = getAllPublishedJobsWithHttpInfo(lastModified, jobStatus, pageNumber, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllPublishedJobs request with HTTP info returned
         * @return ApiResponse&lt;List&lt;JobDTO&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<JobDTO>> executeWithHttpInfo() throws ApiException {
            return getAllPublishedJobsWithHttpInfo(lastModified, jobStatus, pageNumber, pageSize);
        }

        /**
         * Execute getAllPublishedJobs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<JobDTO>> _callback) throws ApiException {
            return getAllPublishedJobsAsync(lastModified, jobStatus, pageNumber, pageSize, _callback);
        }
    }

    /**
     * Get all jobs
     * Get all Published, Confidential and Archived jobs
     * @return GetAllPublishedJobsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public GetAllPublishedJobsRequestBuilder getAllPublishedJobs() throws IllegalArgumentException {
        return new GetAllPublishedJobsRequestBuilder();
    }
    private okhttp3.Call getApplicationFieldsCall(String jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/hire/jobs/{jobId}/applicationfields"
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApplicationFieldsValidateBeforeCall(String jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling getApplicationFields(Async)");
        }

        return getApplicationFieldsCall(jobId, _callback);

    }


    private ApiResponse<List<JobApplicationFieldsDTO>> getApplicationFieldsWithHttpInfo(String jobId) throws ApiException {
        okhttp3.Call localVarCall = getApplicationFieldsValidateBeforeCall(jobId, null);
        Type localVarReturnType = new TypeToken<List<JobApplicationFieldsDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getApplicationFieldsAsync(String jobId, final ApiCallback<List<JobApplicationFieldsDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApplicationFieldsValidateBeforeCall(jobId, _callback);
        Type localVarReturnType = new TypeToken<List<JobApplicationFieldsDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetApplicationFieldsRequestBuilder {
        private final String jobId;

        private GetApplicationFieldsRequestBuilder(String jobId) {
            this.jobId = jobId;
        }

        /**
         * Build call for getApplicationFields
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getApplicationFieldsCall(jobId, _callback);
        }


        /**
         * Execute getApplicationFields request
         * @return List&lt;JobApplicationFieldsDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public List<JobApplicationFieldsDTO> execute() throws ApiException {
            ApiResponse<List<JobApplicationFieldsDTO>> localVarResp = getApplicationFieldsWithHttpInfo(jobId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getApplicationFields request with HTTP info returned
         * @return ApiResponse&lt;List&lt;JobApplicationFieldsDTO&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<JobApplicationFieldsDTO>> executeWithHttpInfo() throws ApiException {
            return getApplicationFieldsWithHttpInfo(jobId);
        }

        /**
         * Execute getApplicationFields request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<JobApplicationFieldsDTO>> _callback) throws ApiException {
            return getApplicationFieldsAsync(jobId, _callback);
        }
    }

    /**
     * Get application fields
     * Get job application fields
     * @param jobId  (required)
     * @return GetApplicationFieldsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public GetApplicationFieldsRequestBuilder getApplicationFields(String jobId) throws IllegalArgumentException {
        if (jobId == null) throw new IllegalArgumentException("\"jobId\" is required but got null");
            

        return new GetApplicationFieldsRequestBuilder(jobId);
    }
    private okhttp3.Call getCandidateInterviewsCall(String candidateId, String jobId, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/hire/jobs/{jobId}/candidate/{candidateId}/interviews"
            .replace("{" + "candidateId" + "}", localVarApiClient.escapeString(candidateId.toString()))
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCandidateInterviewsValidateBeforeCall(String candidateId, String jobId, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'candidateId' is set
        if (candidateId == null) {
            throw new ApiException("Missing the required parameter 'candidateId' when calling getCandidateInterviews(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling getCandidateInterviews(Async)");
        }

        return getCandidateInterviewsCall(candidateId, jobId, pageNumber, pageSize, _callback);

    }


    private ApiResponse<List<InterviewDTO>> getCandidateInterviewsWithHttpInfo(String candidateId, String jobId, Integer pageNumber, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getCandidateInterviewsValidateBeforeCall(candidateId, jobId, pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<List<InterviewDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCandidateInterviewsAsync(String candidateId, String jobId, Integer pageNumber, Integer pageSize, final ApiCallback<List<InterviewDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCandidateInterviewsValidateBeforeCall(candidateId, jobId, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<List<InterviewDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCandidateInterviewsRequestBuilder {
        private final String candidateId;
        private final String jobId;
        private Integer pageNumber;
        private Integer pageSize;

        private GetCandidateInterviewsRequestBuilder(String candidateId, String jobId) {
            this.candidateId = candidateId;
            this.jobId = jobId;
        }

        /**
         * Set pageNumber
         * @param pageNumber  (optional)
         * @return GetCandidateInterviewsRequestBuilder
         */
        public GetCandidateInterviewsRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Represents how many results you&#39;d like to retrieve per request (page). Default is 100. Max is 200 (optional)
         * @return GetCandidateInterviewsRequestBuilder
         */
        public GetCandidateInterviewsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for getCandidateInterviews
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCandidateInterviewsCall(candidateId, jobId, pageNumber, pageSize, _callback);
        }


        /**
         * Execute getCandidateInterviews request
         * @return List&lt;InterviewDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public List<InterviewDTO> execute() throws ApiException {
            ApiResponse<List<InterviewDTO>> localVarResp = getCandidateInterviewsWithHttpInfo(candidateId, jobId, pageNumber, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCandidateInterviews request with HTTP info returned
         * @return ApiResponse&lt;List&lt;InterviewDTO&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<InterviewDTO>> executeWithHttpInfo() throws ApiException {
            return getCandidateInterviewsWithHttpInfo(candidateId, jobId, pageNumber, pageSize);
        }

        /**
         * Execute getCandidateInterviews request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<InterviewDTO>> _callback) throws ApiException {
            return getCandidateInterviewsAsync(candidateId, jobId, pageNumber, pageSize, _callback);
        }
    }

    /**
     * Get interview scheduled and completed for a job candidate
     * Get interview scheduled and completed for a job and a candidate
     * @param candidateId  (required)
     * @param jobId  (required)
     * @return GetCandidateInterviewsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public GetCandidateInterviewsRequestBuilder getCandidateInterviews(String candidateId, String jobId) throws IllegalArgumentException {
        if (candidateId == null) throw new IllegalArgumentException("\"candidateId\" is required but got null");
            

        if (jobId == null) throw new IllegalArgumentException("\"jobId\" is required but got null");
            

        return new GetCandidateInterviewsRequestBuilder(candidateId, jobId);
    }
    private okhttp3.Call getCandidateScorecardsCall(String candidateId, String jobId, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/hire/jobs/{jobId}/candidate/{candidateId}/scorecards"
            .replace("{" + "candidateId" + "}", localVarApiClient.escapeString(candidateId.toString()))
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCandidateScorecardsValidateBeforeCall(String candidateId, String jobId, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'candidateId' is set
        if (candidateId == null) {
            throw new ApiException("Missing the required parameter 'candidateId' when calling getCandidateScorecards(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling getCandidateScorecards(Async)");
        }

        return getCandidateScorecardsCall(candidateId, jobId, pageNumber, pageSize, _callback);

    }


    private ApiResponse<List<ScoreCardDTO>> getCandidateScorecardsWithHttpInfo(String candidateId, String jobId, Integer pageNumber, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getCandidateScorecardsValidateBeforeCall(candidateId, jobId, pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<List<ScoreCardDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCandidateScorecardsAsync(String candidateId, String jobId, Integer pageNumber, Integer pageSize, final ApiCallback<List<ScoreCardDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCandidateScorecardsValidateBeforeCall(candidateId, jobId, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<List<ScoreCardDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCandidateScorecardsRequestBuilder {
        private final String candidateId;
        private final String jobId;
        private Integer pageNumber;
        private Integer pageSize;

        private GetCandidateScorecardsRequestBuilder(String candidateId, String jobId) {
            this.candidateId = candidateId;
            this.jobId = jobId;
        }

        /**
         * Set pageNumber
         * @param pageNumber  (optional)
         * @return GetCandidateScorecardsRequestBuilder
         */
        public GetCandidateScorecardsRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Represents how many results you&#39;d like to retrieve per request (page). Default is 100. Max is 200 (optional)
         * @return GetCandidateScorecardsRequestBuilder
         */
        public GetCandidateScorecardsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for getCandidateScorecards
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCandidateScorecardsCall(candidateId, jobId, pageNumber, pageSize, _callback);
        }


        /**
         * Execute getCandidateScorecards request
         * @return List&lt;ScoreCardDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public List<ScoreCardDTO> execute() throws ApiException {
            ApiResponse<List<ScoreCardDTO>> localVarResp = getCandidateScorecardsWithHttpInfo(candidateId, jobId, pageNumber, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCandidateScorecards request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ScoreCardDTO&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ScoreCardDTO>> executeWithHttpInfo() throws ApiException {
            return getCandidateScorecardsWithHttpInfo(candidateId, jobId, pageNumber, pageSize);
        }

        /**
         * Execute getCandidateScorecards request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ScoreCardDTO>> _callback) throws ApiException {
            return getCandidateScorecardsAsync(candidateId, jobId, pageNumber, pageSize, _callback);
        }
    }

    /**
     * Get scorecard of a specified candidate for a job candidate
     * Get the scorecards which are submitted for a specified job candidate
     * @param candidateId  (required)
     * @param jobId  (required)
     * @return GetCandidateScorecardsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public GetCandidateScorecardsRequestBuilder getCandidateScorecards(String candidateId, String jobId) throws IllegalArgumentException {
        if (candidateId == null) throw new IllegalArgumentException("\"candidateId\" is required but got null");
            

        if (jobId == null) throw new IllegalArgumentException("\"jobId\" is required but got null");
            

        return new GetCandidateScorecardsRequestBuilder(candidateId, jobId);
    }
    private okhttp3.Call getCandidatesCall(String jobId, Boolean isArchived, OffsetDateTime lastModified, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/hire/jobs/{jobId}/candidates"
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isArchived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isArchived", isArchived));
        }

        if (lastModified != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastModified", lastModified));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCandidatesValidateBeforeCall(String jobId, Boolean isArchived, OffsetDateTime lastModified, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling getCandidates(Async)");
        }

        return getCandidatesCall(jobId, isArchived, lastModified, pageNumber, pageSize, _callback);

    }


    private ApiResponse<List<JobCandidateDetailsDTO>> getCandidatesWithHttpInfo(String jobId, Boolean isArchived, OffsetDateTime lastModified, Integer pageNumber, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getCandidatesValidateBeforeCall(jobId, isArchived, lastModified, pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<List<JobCandidateDetailsDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCandidatesAsync(String jobId, Boolean isArchived, OffsetDateTime lastModified, Integer pageNumber, Integer pageSize, final ApiCallback<List<JobCandidateDetailsDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCandidatesValidateBeforeCall(jobId, isArchived, lastModified, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<List<JobCandidateDetailsDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCandidatesRequestBuilder {
        private final String jobId;
        private Boolean isArchived;
        private OffsetDateTime lastModified;
        private Integer pageNumber;
        private Integer pageSize;

        private GetCandidatesRequestBuilder(String jobId) {
            this.jobId = jobId;
        }

        /**
         * Set isArchived
         * @param isArchived  (optional, default to false)
         * @return GetCandidatesRequestBuilder
         */
        public GetCandidatesRequestBuilder isArchived(Boolean isArchived) {
            this.isArchived = isArchived;
            return this;
        }
        
        /**
         * Set lastModified
         * @param lastModified  (optional)
         * @return GetCandidatesRequestBuilder
         */
        public GetCandidatesRequestBuilder lastModified(OffsetDateTime lastModified) {
            this.lastModified = lastModified;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber  (optional)
         * @return GetCandidatesRequestBuilder
         */
        public GetCandidatesRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Represents how many results you&#39;d like to retrieve per request (page). Default is 100. Max is 200 (optional)
         * @return GetCandidatesRequestBuilder
         */
        public GetCandidatesRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for getCandidates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCandidatesCall(jobId, isArchived, lastModified, pageNumber, pageSize, _callback);
        }


        /**
         * Execute getCandidates request
         * @return List&lt;JobCandidateDetailsDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public List<JobCandidateDetailsDTO> execute() throws ApiException {
            ApiResponse<List<JobCandidateDetailsDTO>> localVarResp = getCandidatesWithHttpInfo(jobId, isArchived, lastModified, pageNumber, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCandidates request with HTTP info returned
         * @return ApiResponse&lt;List&lt;JobCandidateDetailsDTO&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<JobCandidateDetailsDTO>> executeWithHttpInfo() throws ApiException {
            return getCandidatesWithHttpInfo(jobId, isArchived, lastModified, pageNumber, pageSize);
        }

        /**
         * Execute getCandidates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<JobCandidateDetailsDTO>> _callback) throws ApiException {
            return getCandidatesAsync(jobId, isArchived, lastModified, pageNumber, pageSize, _callback);
        }
    }

    /**
     * Get job candidates
     * Get active or archived candidates in a specified job
     * @param jobId  (required)
     * @return GetCandidatesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public GetCandidatesRequestBuilder getCandidates(String jobId) throws IllegalArgumentException {
        if (jobId == null) throw new IllegalArgumentException("\"jobId\" is required but got null");
            

        return new GetCandidatesRequestBuilder(jobId);
    }
    private okhttp3.Call postCandidateCall(String jobId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/hire/jobs/{jobId}/candidate"
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/json-patch+json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postCandidateValidateBeforeCall(String jobId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling postCandidate(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling postCandidate(Async)");
        }

        return postCandidateCall(jobId, requestBody, _callback);

    }


    private ApiResponse<String> postCandidateWithHttpInfo(String jobId, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = postCandidateValidateBeforeCall(jobId, requestBody, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call postCandidateAsync(String jobId, Map<String, Object> requestBody, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = postCandidateValidateBeforeCall(jobId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PostCandidateRequestBuilder {
        private final String jobId;

        private PostCandidateRequestBuilder(String jobId) {
            this.jobId = jobId;
        }

        /**
         * Build call for postCandidate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return postCandidateCall(jobId, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            return requestBody;
        }

        /**
         * Execute postCandidate request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<String> localVarResp = postCandidateWithHttpInfo(jobId, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute postCandidate request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return postCandidateWithHttpInfo(jobId, requestBody);
        }

        /**
         * Execute postCandidate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return postCandidateAsync(jobId, requestBody, _callback);
        }
    }

    /**
     * Post a job candidate
     * Post a candidate to a specified job
     * @param jobId  (required)
     * @param requestBody  (required)
     * @return PostCandidateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public PostCandidateRequestBuilder postCandidate(String jobId) throws IllegalArgumentException {
        if (jobId == null) throw new IllegalArgumentException("\"jobId\" is required but got null");
            

        return new PostCandidateRequestBuilder(jobId);
    }
    private okhttp3.Call updateCandidateCall(String candidateId, String jobId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/hire/jobs/{jobId}/candidate/{candidateId}"
            .replace("{" + "candidateId" + "}", localVarApiClient.escapeString(candidateId.toString()))
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/json-patch+json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCandidateValidateBeforeCall(String candidateId, String jobId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'candidateId' is set
        if (candidateId == null) {
            throw new ApiException("Missing the required parameter 'candidateId' when calling updateCandidate(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling updateCandidate(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling updateCandidate(Async)");
        }

        return updateCandidateCall(candidateId, jobId, requestBody, _callback);

    }


    private ApiResponse<String> updateCandidateWithHttpInfo(String candidateId, String jobId, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = updateCandidateValidateBeforeCall(candidateId, jobId, requestBody, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCandidateAsync(String candidateId, String jobId, Map<String, Object> requestBody, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCandidateValidateBeforeCall(candidateId, jobId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCandidateRequestBuilder {
        private final String candidateId;
        private final String jobId;

        private UpdateCandidateRequestBuilder(String candidateId, String jobId) {
            this.candidateId = candidateId;
            this.jobId = jobId;
        }

        /**
         * Build call for updateCandidate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateCandidateCall(candidateId, jobId, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            return requestBody;
        }

        /**
         * Execute updateCandidate request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<String> localVarResp = updateCandidateWithHttpInfo(candidateId, jobId, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCandidate request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateCandidateWithHttpInfo(candidateId, jobId, requestBody);
        }

        /**
         * Execute updateCandidate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateCandidateAsync(candidateId, jobId, requestBody, _callback);
        }
    }

    /**
     * Updated a candidate
     * Updated the candidate
     * @param candidateId  (required)
     * @param jobId  (required)
     * @param requestBody  (required)
     * @return UpdateCandidateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCandidateRequestBuilder updateCandidate(String candidateId, String jobId) throws IllegalArgumentException {
        if (candidateId == null) throw new IllegalArgumentException("\"candidateId\" is required but got null");
            

        if (jobId == null) throw new IllegalArgumentException("\"jobId\" is required but got null");
            

        return new UpdateCandidateRequestBuilder(candidateId, jobId);
    }
}
