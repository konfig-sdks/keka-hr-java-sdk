/*
 * Requisition
 * Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.APIGoalPagedResponse;
import com.konfigthis.client.model.APIUpdateGoalProgress;
import com.konfigthis.client.model.BooleanResponse;
import com.konfigthis.client.model.GoalStatus;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class GoalApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GoalApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public GoalApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call listWithHierarchyCall(String goalIds, String timeFrameIds, String employeeIds, OffsetDateTime from, OffsetDateTime to, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pms/goals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (goalIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("goalIds", goalIds));
        }

        if (timeFrameIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeFrameIds", timeFrameIds));
        }

        if (employeeIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeIds", employeeIds));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWithHierarchyValidateBeforeCall(String goalIds, String timeFrameIds, String employeeIds, OffsetDateTime from, OffsetDateTime to, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return listWithHierarchyCall(goalIds, timeFrameIds, employeeIds, from, to, pageNumber, pageSize, _callback);

    }


    private ApiResponse<APIGoalPagedResponse> listWithHierarchyWithHttpInfo(String goalIds, String timeFrameIds, String employeeIds, OffsetDateTime from, OffsetDateTime to, Integer pageNumber, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listWithHierarchyValidateBeforeCall(goalIds, timeFrameIds, employeeIds, from, to, pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<APIGoalPagedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listWithHierarchyAsync(String goalIds, String timeFrameIds, String employeeIds, OffsetDateTime from, OffsetDateTime to, Integer pageNumber, Integer pageSize, final ApiCallback<APIGoalPagedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWithHierarchyValidateBeforeCall(goalIds, timeFrameIds, employeeIds, from, to, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<APIGoalPagedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListWithHierarchyRequestBuilder {
        private String goalIds;
        private String timeFrameIds;
        private String employeeIds;
        private OffsetDateTime from;
        private OffsetDateTime to;
        private Integer pageNumber;
        private Integer pageSize;

        private ListWithHierarchyRequestBuilder() {
        }

        /**
         * Set goalIds
         * @param goalIds Comma separated list of one or more Goal ids you&#39;d like to filter on. (optional)
         * @return ListWithHierarchyRequestBuilder
         */
        public ListWithHierarchyRequestBuilder goalIds(String goalIds) {
            this.goalIds = goalIds;
            return this;
        }
        
        /**
         * Set timeFrameIds
         * @param timeFrameIds Comma separated list of one or more Time Frame ids you&#39;d like to filter on. (optional)
         * @return ListWithHierarchyRequestBuilder
         */
        public ListWithHierarchyRequestBuilder timeFrameIds(String timeFrameIds) {
            this.timeFrameIds = timeFrameIds;
            return this;
        }
        
        /**
         * Set employeeIds
         * @param employeeIds Comma separated list of one or more Employee ids you&#39;d like to filter on. (optional)
         * @return ListWithHierarchyRequestBuilder
         */
        public ListWithHierarchyRequestBuilder employeeIds(String employeeIds) {
            this.employeeIds = employeeIds;
            return this;
        }
        
        /**
         * Set from
         * @param from Date/time when goal time period will start, in ISO 8601 format (YYYY-MM-DDThh:mm:ss±hh). If not specified  defaults &#x60;to&#x60; - 60 days. (optional)
         * @return ListWithHierarchyRequestBuilder
         */
        public ListWithHierarchyRequestBuilder from(OffsetDateTime from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set to
         * @param to Date/time when goal time period will end, in ISO 8601 format (YYYY-MM-DDThh:mm:ss±hh). If not specified  defaults &#x60;from&#x60; + 60 days. (optional)
         * @return ListWithHierarchyRequestBuilder
         */
        public ListWithHierarchyRequestBuilder to(OffsetDateTime to) {
            this.to = to;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber  (optional)
         * @return ListWithHierarchyRequestBuilder
         */
        public ListWithHierarchyRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Represents how many results you&#39;d like to retrieve per request (page). Default is 100. Max is 200 (optional)
         * @return ListWithHierarchyRequestBuilder
         */
        public ListWithHierarchyRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for listWithHierarchy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listWithHierarchyCall(goalIds, timeFrameIds, employeeIds, from, to, pageNumber, pageSize, _callback);
        }


        /**
         * Execute listWithHierarchy request
         * @return APIGoalPagedResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public APIGoalPagedResponse execute() throws ApiException {
            ApiResponse<APIGoalPagedResponse> localVarResp = listWithHierarchyWithHttpInfo(goalIds, timeFrameIds, employeeIds, from, to, pageNumber, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listWithHierarchy request with HTTP info returned
         * @return ApiResponse&lt;APIGoalPagedResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIGoalPagedResponse> executeWithHttpInfo() throws ApiException {
            return listWithHierarchyWithHttpInfo(goalIds, timeFrameIds, employeeIds, from, to, pageNumber, pageSize);
        }

        /**
         * Execute listWithHierarchy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIGoalPagedResponse> _callback) throws ApiException {
            return listWithHierarchyAsync(goalIds, timeFrameIds, employeeIds, from, to, pageNumber, pageSize, _callback);
        }
    }

    /**
     * Gets goal list.
     * Gets all goals along with parent goal and child goals
     * @return ListWithHierarchyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListWithHierarchyRequestBuilder listWithHierarchy() throws IllegalArgumentException {
        return new ListWithHierarchyRequestBuilder();
    }
    private okhttp3.Call updateProgressCall(String goalId, APIUpdateGoalProgress apIUpdateGoalProgress, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apIUpdateGoalProgress;

        // create path and map variables
        String localVarPath = "/pms/goals/{goalId}/progress"
            .replace("{" + "goalId" + "}", localVarApiClient.escapeString(goalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/json-patch+json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProgressValidateBeforeCall(String goalId, APIUpdateGoalProgress apIUpdateGoalProgress, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'goalId' is set
        if (goalId == null) {
            throw new ApiException("Missing the required parameter 'goalId' when calling updateProgress(Async)");
        }

        return updateProgressCall(goalId, apIUpdateGoalProgress, _callback);

    }


    private ApiResponse<BooleanResponse> updateProgressWithHttpInfo(String goalId, APIUpdateGoalProgress apIUpdateGoalProgress) throws ApiException {
        okhttp3.Call localVarCall = updateProgressValidateBeforeCall(goalId, apIUpdateGoalProgress, null);
        Type localVarReturnType = new TypeToken<BooleanResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateProgressAsync(String goalId, APIUpdateGoalProgress apIUpdateGoalProgress, final ApiCallback<BooleanResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProgressValidateBeforeCall(goalId, apIUpdateGoalProgress, _callback);
        Type localVarReturnType = new TypeToken<BooleanResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateProgressRequestBuilder {
        private final Double currentValue;
        private final GoalStatus status;
        private final String updatedBy;
        private final String goalId;
        private String note;

        private UpdateProgressRequestBuilder(Double currentValue, GoalStatus status, String updatedBy, String goalId) {
            this.currentValue = currentValue;
            this.status = status;
            this.updatedBy = updatedBy;
            this.goalId = goalId;
        }

        /**
         * Set note
         * @param note  (optional)
         * @return UpdateProgressRequestBuilder
         */
        public UpdateProgressRequestBuilder note(String note) {
            this.note = note;
            return this;
        }
        
        /**
         * Build call for updateProgress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            APIUpdateGoalProgress apIUpdateGoalProgress = buildBodyParams();
            return updateProgressCall(goalId, apIUpdateGoalProgress, _callback);
        }

        private APIUpdateGoalProgress buildBodyParams() {
            APIUpdateGoalProgress apIUpdateGoalProgress = new APIUpdateGoalProgress();
            apIUpdateGoalProgress.currentValue(this.currentValue);
            apIUpdateGoalProgress.status(this.status);
            apIUpdateGoalProgress.updatedBy(this.updatedBy);
            apIUpdateGoalProgress.note(this.note);
            return apIUpdateGoalProgress;
        }

        /**
         * Execute updateProgress request
         * @return BooleanResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public BooleanResponse execute() throws ApiException {
            APIUpdateGoalProgress apIUpdateGoalProgress = buildBodyParams();
            ApiResponse<BooleanResponse> localVarResp = updateProgressWithHttpInfo(goalId, apIUpdateGoalProgress);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateProgress request with HTTP info returned
         * @return ApiResponse&lt;BooleanResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BooleanResponse> executeWithHttpInfo() throws ApiException {
            APIUpdateGoalProgress apIUpdateGoalProgress = buildBodyParams();
            return updateProgressWithHttpInfo(goalId, apIUpdateGoalProgress);
        }

        /**
         * Execute updateProgress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BooleanResponse> _callback) throws ApiException {
            APIUpdateGoalProgress apIUpdateGoalProgress = buildBodyParams();
            return updateProgressAsync(goalId, apIUpdateGoalProgress, _callback);
        }
    }

    /**
     * Update goal progress
     * Update the goal progress
     * @param goalId The goal identifier. (required)
     * @return UpdateProgressRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public UpdateProgressRequestBuilder updateProgress(Double currentValue, GoalStatus status, String updatedBy, String goalId) throws IllegalArgumentException {
        if (currentValue == null) throw new IllegalArgumentException("\"currentValue\" is required but got null");
        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
        if (updatedBy == null) throw new IllegalArgumentException("\"updatedBy\" is required but got null");
            

        if (goalId == null) throw new IllegalArgumentException("\"goalId\" is required but got null");
            

        return new UpdateProgressRequestBuilder(currentValue, status, updatedBy, goalId);
    }
}
