/*
 * Requisition
 * Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.APIPayCycleViewPagedResponse;
import com.konfigthis.client.model.APIPayRegisterViewPagedResponse;
import com.konfigthis.client.model.BatchPagedResponse;
import com.konfigthis.client.model.BooleanResponse;
import com.konfigthis.client.model.EmployeePaymentPagedResponse;
import com.konfigthis.client.model.PaymentTransaction;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PayCyclesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PayCyclesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PayCyclesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAllCall(String payGroupId, String runStatus, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payroll/paygroups/{payGroupId}/paycycles"
            .replace("{" + "payGroupId" + "}", localVarApiClient.escapeString(payGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (runStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("runStatus", runStatus));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(String payGroupId, String runStatus, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payGroupId' is set
        if (payGroupId == null) {
            throw new ApiException("Missing the required parameter 'payGroupId' when calling getAll(Async)");
        }

        return getAllCall(payGroupId, runStatus, pageNumber, pageSize, _callback);

    }


    private ApiResponse<APIPayCycleViewPagedResponse> getAllWithHttpInfo(String payGroupId, String runStatus, Integer pageNumber, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(payGroupId, runStatus, pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<APIPayCycleViewPagedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(String payGroupId, String runStatus, Integer pageNumber, Integer pageSize, final ApiCallback<APIPayCycleViewPagedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(payGroupId, runStatus, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<APIPayCycleViewPagedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {
        private final String payGroupId;
        private String runStatus;
        private Integer pageNumber;
        private Integer pageSize;

        private GetAllRequestBuilder(String payGroupId) {
            this.payGroupId = payGroupId;
        }

        /**
         * Set runStatus
         * @param runStatus Comma separated list of one or more run Status you&#39;d like to filter on, allowed values are Pending, Finalized, Partial. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder runStatus(String runStatus) {
            this.runStatus = runStatus;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber  (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Represents how many results you&#39;d like to retrieve per request (page). Default is 100. Max is 200 (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(payGroupId, runStatus, pageNumber, pageSize, _callback);
        }


        /**
         * Execute getAll request
         * @return APIPayCycleViewPagedResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public APIPayCycleViewPagedResponse execute() throws ApiException {
            ApiResponse<APIPayCycleViewPagedResponse> localVarResp = getAllWithHttpInfo(payGroupId, runStatus, pageNumber, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;APIPayCycleViewPagedResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIPayCycleViewPagedResponse> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo(payGroupId, runStatus, pageNumber, pageSize);
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIPayCycleViewPagedResponse> _callback) throws ApiException {
            return getAllAsync(payGroupId, runStatus, pageNumber, pageSize, _callback);
        }
    }

    /**
     * Get all Pay Cycles
     * 
     * @param payGroupId The Pay Group Id (required)
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll(String payGroupId) throws IllegalArgumentException {
        if (payGroupId == null) throw new IllegalArgumentException("\"payGroupId\" is required but got null");
            

        return new GetAllRequestBuilder(payGroupId);
    }
    private okhttp3.Call getBatchPaymentsCall(String payGroupId, String payCycleId, String payBatchId, String status, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payroll/paygroups/{payGroupId}/paycycles/{payCycleId}/paybatches/{payBatchId}/payments"
            .replace("{" + "payGroupId" + "}", localVarApiClient.escapeString(payGroupId.toString()))
            .replace("{" + "payCycleId" + "}", localVarApiClient.escapeString(payCycleId.toString()))
            .replace("{" + "payBatchId" + "}", localVarApiClient.escapeString(payBatchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBatchPaymentsValidateBeforeCall(String payGroupId, String payCycleId, String payBatchId, String status, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payGroupId' is set
        if (payGroupId == null) {
            throw new ApiException("Missing the required parameter 'payGroupId' when calling getBatchPayments(Async)");
        }

        // verify the required parameter 'payCycleId' is set
        if (payCycleId == null) {
            throw new ApiException("Missing the required parameter 'payCycleId' when calling getBatchPayments(Async)");
        }

        // verify the required parameter 'payBatchId' is set
        if (payBatchId == null) {
            throw new ApiException("Missing the required parameter 'payBatchId' when calling getBatchPayments(Async)");
        }

        return getBatchPaymentsCall(payGroupId, payCycleId, payBatchId, status, pageNumber, pageSize, _callback);

    }


    private ApiResponse<EmployeePaymentPagedResponse> getBatchPaymentsWithHttpInfo(String payGroupId, String payCycleId, String payBatchId, String status, Integer pageNumber, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getBatchPaymentsValidateBeforeCall(payGroupId, payCycleId, payBatchId, status, pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<EmployeePaymentPagedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBatchPaymentsAsync(String payGroupId, String payCycleId, String payBatchId, String status, Integer pageNumber, Integer pageSize, final ApiCallback<EmployeePaymentPagedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBatchPaymentsValidateBeforeCall(payGroupId, payCycleId, payBatchId, status, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<EmployeePaymentPagedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBatchPaymentsRequestBuilder {
        private final String payGroupId;
        private final String payCycleId;
        private final String payBatchId;
        private String status;
        private Integer pageNumber;
        private Integer pageSize;

        private GetBatchPaymentsRequestBuilder(String payGroupId, String payCycleId, String payBatchId) {
            this.payGroupId = payGroupId;
            this.payCycleId = payCycleId;
            this.payBatchId = payBatchId;
        }

        /**
         * Set status
         * @param status Comma separated list of one or more payment Status you&#39;d like to filter on, allowed values are UnPaid, Paid. (optional)
         * @return GetBatchPaymentsRequestBuilder
         */
        public GetBatchPaymentsRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber  (optional)
         * @return GetBatchPaymentsRequestBuilder
         */
        public GetBatchPaymentsRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Represents how many results you&#39;d like to retrieve per request (page). Default is 100. Max is 200 (optional)
         * @return GetBatchPaymentsRequestBuilder
         */
        public GetBatchPaymentsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for getBatchPayments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBatchPaymentsCall(payGroupId, payCycleId, payBatchId, status, pageNumber, pageSize, _callback);
        }


        /**
         * Execute getBatchPayments request
         * @return EmployeePaymentPagedResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public EmployeePaymentPagedResponse execute() throws ApiException {
            ApiResponse<EmployeePaymentPagedResponse> localVarResp = getBatchPaymentsWithHttpInfo(payGroupId, payCycleId, payBatchId, status, pageNumber, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBatchPayments request with HTTP info returned
         * @return ApiResponse&lt;EmployeePaymentPagedResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeePaymentPagedResponse> executeWithHttpInfo() throws ApiException {
            return getBatchPaymentsWithHttpInfo(payGroupId, payCycleId, payBatchId, status, pageNumber, pageSize);
        }

        /**
         * Execute getBatchPayments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeePaymentPagedResponse> _callback) throws ApiException {
            return getBatchPaymentsAsync(payGroupId, payCycleId, payBatchId, status, pageNumber, pageSize, _callback);
        }
    }

    /**
     * Get all Batch Payments
     * Gets all payments for the specified pay group Id and pay cycle Id and pay batch Id / specified pay group id and pay cycle Id and pay batch Id and payment status filter
     * @param payGroupId The Pay Group Id (required)
     * @param payCycleId The Pay cycle Id (required)
     * @param payBatchId The Pay Batch Id (required)
     * @return GetBatchPaymentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public GetBatchPaymentsRequestBuilder getBatchPayments(String payGroupId, String payCycleId, String payBatchId) throws IllegalArgumentException {
        if (payGroupId == null) throw new IllegalArgumentException("\"payGroupId\" is required but got null");
            

        if (payCycleId == null) throw new IllegalArgumentException("\"payCycleId\" is required but got null");
            

        if (payBatchId == null) throw new IllegalArgumentException("\"payBatchId\" is required but got null");
            

        return new GetBatchPaymentsRequestBuilder(payGroupId, payCycleId, payBatchId);
    }
    private okhttp3.Call getPayBatchesCall(String payGroupId, String payCycleId, String status, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payroll/paygroups/{payGroupId}/paycycles/{payCycleId}/paybatches"
            .replace("{" + "payGroupId" + "}", localVarApiClient.escapeString(payGroupId.toString()))
            .replace("{" + "payCycleId" + "}", localVarApiClient.escapeString(payCycleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayBatchesValidateBeforeCall(String payGroupId, String payCycleId, String status, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payGroupId' is set
        if (payGroupId == null) {
            throw new ApiException("Missing the required parameter 'payGroupId' when calling getPayBatches(Async)");
        }

        // verify the required parameter 'payCycleId' is set
        if (payCycleId == null) {
            throw new ApiException("Missing the required parameter 'payCycleId' when calling getPayBatches(Async)");
        }

        return getPayBatchesCall(payGroupId, payCycleId, status, pageNumber, pageSize, _callback);

    }


    private ApiResponse<BatchPagedResponse> getPayBatchesWithHttpInfo(String payGroupId, String payCycleId, String status, Integer pageNumber, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getPayBatchesValidateBeforeCall(payGroupId, payCycleId, status, pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<BatchPagedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPayBatchesAsync(String payGroupId, String payCycleId, String status, Integer pageNumber, Integer pageSize, final ApiCallback<BatchPagedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayBatchesValidateBeforeCall(payGroupId, payCycleId, status, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<BatchPagedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPayBatchesRequestBuilder {
        private final String payGroupId;
        private final String payCycleId;
        private String status;
        private Integer pageNumber;
        private Integer pageSize;

        private GetPayBatchesRequestBuilder(String payGroupId, String payCycleId) {
            this.payGroupId = payGroupId;
            this.payCycleId = payCycleId;
        }

        /**
         * Set status
         * @param status Comma separated list of one or more payment Status you&#39;d like to filter on, allowed values are UnPaid, Paid. (optional)
         * @return GetPayBatchesRequestBuilder
         */
        public GetPayBatchesRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber  (optional)
         * @return GetPayBatchesRequestBuilder
         */
        public GetPayBatchesRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Represents how many results you&#39;d like to retrieve per request (page). Default is 100. Max is 200 (optional)
         * @return GetPayBatchesRequestBuilder
         */
        public GetPayBatchesRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for getPayBatches
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPayBatchesCall(payGroupId, payCycleId, status, pageNumber, pageSize, _callback);
        }


        /**
         * Execute getPayBatches request
         * @return BatchPagedResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public BatchPagedResponse execute() throws ApiException {
            ApiResponse<BatchPagedResponse> localVarResp = getPayBatchesWithHttpInfo(payGroupId, payCycleId, status, pageNumber, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPayBatches request with HTTP info returned
         * @return ApiResponse&lt;BatchPagedResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BatchPagedResponse> executeWithHttpInfo() throws ApiException {
            return getPayBatchesWithHttpInfo(payGroupId, payCycleId, status, pageNumber, pageSize);
        }

        /**
         * Execute getPayBatches request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BatchPagedResponse> _callback) throws ApiException {
            return getPayBatchesAsync(payGroupId, payCycleId, status, pageNumber, pageSize, _callback);
        }
    }

    /**
     * Get all Pay Batches
     * 
     * @param payGroupId The Pay Group Id (required)
     * @param payCycleId The Pay cycle Id (required)
     * @return GetPayBatchesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public GetPayBatchesRequestBuilder getPayBatches(String payGroupId, String payCycleId) throws IllegalArgumentException {
        if (payGroupId == null) throw new IllegalArgumentException("\"payGroupId\" is required but got null");
            

        if (payCycleId == null) throw new IllegalArgumentException("\"payCycleId\" is required but got null");
            

        return new GetPayBatchesRequestBuilder(payGroupId, payCycleId);
    }
    private okhttp3.Call getPayRegisterCall(String payGroupId, String payCycleId, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payroll/paygroups/{payGroupId}/paycycles/{payCycleId}/payregister"
            .replace("{" + "payGroupId" + "}", localVarApiClient.escapeString(payGroupId.toString()))
            .replace("{" + "payCycleId" + "}", localVarApiClient.escapeString(payCycleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayRegisterValidateBeforeCall(String payGroupId, String payCycleId, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payGroupId' is set
        if (payGroupId == null) {
            throw new ApiException("Missing the required parameter 'payGroupId' when calling getPayRegister(Async)");
        }

        // verify the required parameter 'payCycleId' is set
        if (payCycleId == null) {
            throw new ApiException("Missing the required parameter 'payCycleId' when calling getPayRegister(Async)");
        }

        return getPayRegisterCall(payGroupId, payCycleId, pageNumber, pageSize, _callback);

    }


    private ApiResponse<APIPayRegisterViewPagedResponse> getPayRegisterWithHttpInfo(String payGroupId, String payCycleId, Integer pageNumber, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getPayRegisterValidateBeforeCall(payGroupId, payCycleId, pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<APIPayRegisterViewPagedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPayRegisterAsync(String payGroupId, String payCycleId, Integer pageNumber, Integer pageSize, final ApiCallback<APIPayRegisterViewPagedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayRegisterValidateBeforeCall(payGroupId, payCycleId, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<APIPayRegisterViewPagedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPayRegisterRequestBuilder {
        private final String payGroupId;
        private final String payCycleId;
        private Integer pageNumber;
        private Integer pageSize;

        private GetPayRegisterRequestBuilder(String payGroupId, String payCycleId) {
            this.payGroupId = payGroupId;
            this.payCycleId = payCycleId;
        }

        /**
         * Set pageNumber
         * @param pageNumber  (optional)
         * @return GetPayRegisterRequestBuilder
         */
        public GetPayRegisterRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Represents how many results you&#39;d like to retrieve per request (page). Default is 100. Max is 200 (optional)
         * @return GetPayRegisterRequestBuilder
         */
        public GetPayRegisterRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for getPayRegister
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPayRegisterCall(payGroupId, payCycleId, pageNumber, pageSize, _callback);
        }


        /**
         * Execute getPayRegister request
         * @return APIPayRegisterViewPagedResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public APIPayRegisterViewPagedResponse execute() throws ApiException {
            ApiResponse<APIPayRegisterViewPagedResponse> localVarResp = getPayRegisterWithHttpInfo(payGroupId, payCycleId, pageNumber, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPayRegister request with HTTP info returned
         * @return ApiResponse&lt;APIPayRegisterViewPagedResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIPayRegisterViewPagedResponse> executeWithHttpInfo() throws ApiException {
            return getPayRegisterWithHttpInfo(payGroupId, payCycleId, pageNumber, pageSize);
        }

        /**
         * Execute getPayRegister request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIPayRegisterViewPagedResponse> _callback) throws ApiException {
            return getPayRegisterAsync(payGroupId, payCycleId, pageNumber, pageSize, _callback);
        }
    }

    /**
     * Get Pay Register
     * 
     * @param payGroupId The Pay Group Id (required)
     * @param payCycleId The Pay cycle Id (required)
     * @return GetPayRegisterRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public GetPayRegisterRequestBuilder getPayRegister(String payGroupId, String payCycleId) throws IllegalArgumentException {
        if (payGroupId == null) throw new IllegalArgumentException("\"payGroupId\" is required but got null");
            

        if (payCycleId == null) throw new IllegalArgumentException("\"payCycleId\" is required but got null");
            

        return new GetPayRegisterRequestBuilder(payGroupId, payCycleId);
    }
    private okhttp3.Call updatePaymentsStatusCall(String payGroupId, String payCycleId, String payBatchId, List<PaymentTransaction> paymentTransaction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentTransaction;

        // create path and map variables
        String localVarPath = "/payroll/paygroups/{payGroupId}/paycycles/{payCycleId}/paybatches/{payBatchId}/payments"
            .replace("{" + "payGroupId" + "}", localVarApiClient.escapeString(payGroupId.toString()))
            .replace("{" + "payCycleId" + "}", localVarApiClient.escapeString(payCycleId.toString()))
            .replace("{" + "payBatchId" + "}", localVarApiClient.escapeString(payBatchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/json-patch+json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePaymentsStatusValidateBeforeCall(String payGroupId, String payCycleId, String payBatchId, List<PaymentTransaction> paymentTransaction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payGroupId' is set
        if (payGroupId == null) {
            throw new ApiException("Missing the required parameter 'payGroupId' when calling updatePaymentsStatus(Async)");
        }

        // verify the required parameter 'payCycleId' is set
        if (payCycleId == null) {
            throw new ApiException("Missing the required parameter 'payCycleId' when calling updatePaymentsStatus(Async)");
        }

        // verify the required parameter 'payBatchId' is set
        if (payBatchId == null) {
            throw new ApiException("Missing the required parameter 'payBatchId' when calling updatePaymentsStatus(Async)");
        }

        return updatePaymentsStatusCall(payGroupId, payCycleId, payBatchId, paymentTransaction, _callback);

    }


    private ApiResponse<BooleanResponse> updatePaymentsStatusWithHttpInfo(String payGroupId, String payCycleId, String payBatchId, List<PaymentTransaction> paymentTransaction) throws ApiException {
        okhttp3.Call localVarCall = updatePaymentsStatusValidateBeforeCall(payGroupId, payCycleId, payBatchId, paymentTransaction, null);
        Type localVarReturnType = new TypeToken<BooleanResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePaymentsStatusAsync(String payGroupId, String payCycleId, String payBatchId, List<PaymentTransaction> paymentTransaction, final ApiCallback<BooleanResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePaymentsStatusValidateBeforeCall(payGroupId, payCycleId, payBatchId, paymentTransaction, _callback);
        Type localVarReturnType = new TypeToken<BooleanResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePaymentsStatusRequestBuilder {
        private final String payGroupId;
        private final String payCycleId;
        private final String payBatchId;
        private List<PaymentTransaction> paymentTransaction;

        private UpdatePaymentsStatusRequestBuilder(String payGroupId, String payCycleId, String payBatchId) {
            this.payGroupId = payGroupId;
            this.payCycleId = payCycleId;
            this.payBatchId = payBatchId;
        }

        /**
         * Set paymentTransaction
         * @param paymentTransaction The Payment Transactions. (optional)
         * @return UpdatePaymentsStatusRequestBuilder
         */
        public UpdatePaymentsStatusRequestBuilder paymentTransaction(List<PaymentTransaction> paymentTransaction) {
            this.paymentTransaction = paymentTransaction;
            return this;
        }

        /**
         * Build call for updatePaymentsStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<PaymentTransaction> paymentTransaction = buildBodyParams();
            return updatePaymentsStatusCall(payGroupId, payCycleId, payBatchId, paymentTransaction, _callback);
        }

        private List<PaymentTransaction> buildBodyParams() {
            return this.paymentTransaction;
        }

        /**
         * Execute updatePaymentsStatus request
         * @return BooleanResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public BooleanResponse execute() throws ApiException {
            List<PaymentTransaction> paymentTransaction = buildBodyParams();
            ApiResponse<BooleanResponse> localVarResp = updatePaymentsStatusWithHttpInfo(payGroupId, payCycleId, payBatchId, paymentTransaction);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePaymentsStatus request with HTTP info returned
         * @return ApiResponse&lt;BooleanResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BooleanResponse> executeWithHttpInfo() throws ApiException {
            List<PaymentTransaction> paymentTransaction = buildBodyParams();
            return updatePaymentsStatusWithHttpInfo(payGroupId, payCycleId, payBatchId, paymentTransaction);
        }

        /**
         * Execute updatePaymentsStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BooleanResponse> _callback) throws ApiException {
            List<PaymentTransaction> paymentTransaction = buildBodyParams();
            return updatePaymentsStatusAsync(payGroupId, payCycleId, payBatchId, paymentTransaction, _callback);
        }
    }

    /**
     * Update the Payments status
     * Update the Payments status.It will allow only 100 bulk transactions from that particular batch.
     * @param payGroupId The Pay Group Id (required)
     * @param payCycleId The Pay cycle Id (required)
     * @param payBatchId The Pay Batch Id (required)
     * @return UpdatePaymentsStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePaymentsStatusRequestBuilder updatePaymentsStatus(String payGroupId, String payCycleId, String payBatchId) throws IllegalArgumentException {
        if (payGroupId == null) throw new IllegalArgumentException("\"payGroupId\" is required but got null");
            

        if (payCycleId == null) throw new IllegalArgumentException("\"payCycleId\" is required but got null");
            

        if (payBatchId == null) throw new IllegalArgumentException("\"payBatchId\" is required but got null");
            

        return new UpdatePaymentsStatusRequestBuilder(payGroupId, payCycleId, payBatchId);
    }
}
