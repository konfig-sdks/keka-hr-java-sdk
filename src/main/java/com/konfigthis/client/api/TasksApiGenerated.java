/*
 * Requisition
 * Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.APIProjectTaskPagedResponse;
import com.konfigthis.client.model.APITimesheetEntryPagedResponse;
import com.konfigthis.client.model.BooleanResponse;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.ProjectTask;
import com.konfigthis.client.model.StringResponse;
import com.konfigthis.client.model.TaskBillingType;
import com.konfigthis.client.model.UpdateProjectTask;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TasksApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TasksApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TasksApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createTaskIdentifierCall(String projectId, ProjectTask projectTask, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectTask;

        // create path and map variables
        String localVarPath = "/psa/projects/{projectId}/tasks"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/json-patch+json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTaskIdentifierValidateBeforeCall(String projectId, ProjectTask projectTask, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createTaskIdentifier(Async)");
        }

        return createTaskIdentifierCall(projectId, projectTask, _callback);

    }


    private ApiResponse<StringResponse> createTaskIdentifierWithHttpInfo(String projectId, ProjectTask projectTask) throws ApiException {
        okhttp3.Call localVarCall = createTaskIdentifierValidateBeforeCall(projectId, projectTask, null);
        Type localVarReturnType = new TypeToken<StringResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTaskIdentifierAsync(String projectId, ProjectTask projectTask, final ApiCallback<StringResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTaskIdentifierValidateBeforeCall(projectId, projectTask, _callback);
        Type localVarReturnType = new TypeToken<StringResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateTaskIdentifierRequestBuilder {
        private final String projectId;
        private final String name;
        private final OffsetDateTime startDate;
        private final OffsetDateTime endDate;
        private final String projectId;
        private String description;
        private TaskBillingType taskBillingType;
        private List<String> assignedTo;
        private Double estimatedHours;
        private String phaseId;

        private CreateTaskIdentifierRequestBuilder(String projectId, String name, OffsetDateTime startDate, OffsetDateTime endDate, String projectId) {
            this.projectId = projectId;
            this.name = name;
            this.startDate = startDate;
            this.endDate = endDate;
            this.projectId = projectId;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return CreateTaskIdentifierRequestBuilder
         */
        public CreateTaskIdentifierRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set taskBillingType
         * @param taskBillingType  (optional)
         * @return CreateTaskIdentifierRequestBuilder
         */
        public CreateTaskIdentifierRequestBuilder taskBillingType(TaskBillingType taskBillingType) {
            this.taskBillingType = taskBillingType;
            return this;
        }
        
        /**
         * Set assignedTo
         * @param assignedTo  (optional)
         * @return CreateTaskIdentifierRequestBuilder
         */
        public CreateTaskIdentifierRequestBuilder assignedTo(List<String> assignedTo) {
            this.assignedTo = assignedTo;
            return this;
        }
        
        /**
         * Set estimatedHours
         * @param estimatedHours  (optional)
         * @return CreateTaskIdentifierRequestBuilder
         */
        public CreateTaskIdentifierRequestBuilder estimatedHours(Double estimatedHours) {
            this.estimatedHours = estimatedHours;
            return this;
        }
        
        /**
         * Set phaseId
         * @param phaseId  (optional)
         * @return CreateTaskIdentifierRequestBuilder
         */
        public CreateTaskIdentifierRequestBuilder phaseId(String phaseId) {
            this.phaseId = phaseId;
            return this;
        }
        
        /**
         * Build call for createTaskIdentifier
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProjectTask projectTask = buildBodyParams();
            return createTaskIdentifierCall(projectId, projectTask, _callback);
        }

        private ProjectTask buildBodyParams() {
            ProjectTask projectTask = new ProjectTask();
            projectTask.description(this.description);
            projectTask.projectId(this.projectId);
            projectTask.name(this.name);
            projectTask.taskBillingType(this.taskBillingType);
            projectTask.assignedTo(this.assignedTo);
            projectTask.startDate(this.startDate);
            projectTask.endDate(this.endDate);
            projectTask.estimatedHours(this.estimatedHours);
            projectTask.phaseId(this.phaseId);
            return projectTask;
        }

        /**
         * Execute createTaskIdentifier request
         * @return StringResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public StringResponse execute() throws ApiException {
            ProjectTask projectTask = buildBodyParams();
            ApiResponse<StringResponse> localVarResp = createTaskIdentifierWithHttpInfo(projectId, projectTask);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createTaskIdentifier request with HTTP info returned
         * @return ApiResponse&lt;StringResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StringResponse> executeWithHttpInfo() throws ApiException {
            ProjectTask projectTask = buildBodyParams();
            return createTaskIdentifierWithHttpInfo(projectId, projectTask);
        }

        /**
         * Execute createTaskIdentifier request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StringResponse> _callback) throws ApiException {
            ProjectTask projectTask = buildBodyParams();
            return createTaskIdentifierAsync(projectId, projectTask, _callback);
        }
    }

    /**
     * Create a task
     * Create project task and returns created task identifier.
     * @param projectId The project identifier. (required)
     * @return CreateTaskIdentifierRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public CreateTaskIdentifierRequestBuilder createTaskIdentifier(String projectId, String name, OffsetDateTime startDate, OffsetDateTime endDate, String projectId) throws IllegalArgumentException {
        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
        if (endDate == null) throw new IllegalArgumentException("\"endDate\" is required but got null");
        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
            

        return new CreateTaskIdentifierRequestBuilder(projectId, name, startDate, endDate, projectId);
    }
    private okhttp3.Call getAllCall(String projectId, OffsetDateTime lastModified, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/psa/projects/{projectId}/tasks"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lastModified != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastModified", lastModified));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(String projectId, OffsetDateTime lastModified, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getAll(Async)");
        }

        return getAllCall(projectId, lastModified, pageNumber, pageSize, _callback);

    }


    private ApiResponse<APIProjectTaskPagedResponse> getAllWithHttpInfo(String projectId, OffsetDateTime lastModified, Integer pageNumber, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(projectId, lastModified, pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<APIProjectTaskPagedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(String projectId, OffsetDateTime lastModified, Integer pageNumber, Integer pageSize, final ApiCallback<APIProjectTaskPagedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(projectId, lastModified, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<APIProjectTaskPagedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {
        private final String projectId;
        private OffsetDateTime lastModified;
        private Integer pageNumber;
        private Integer pageSize;

        private GetAllRequestBuilder(String projectId) {
            this.projectId = projectId;
        }

        /**
         * Set lastModified
         * @param lastModified Date/time when this time off request was last modified, in ISO 8601 format (YYYY-MM-DDThh:mm:ss±hh:mm). (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder lastModified(OffsetDateTime lastModified) {
            this.lastModified = lastModified;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber  (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Represents how many results you&#39;d like to retrieve per request (page). Default is 100. Max is 200 (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(projectId, lastModified, pageNumber, pageSize, _callback);
        }


        /**
         * Execute getAll request
         * @return APIProjectTaskPagedResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public APIProjectTaskPagedResponse execute() throws ApiException {
            ApiResponse<APIProjectTaskPagedResponse> localVarResp = getAllWithHttpInfo(projectId, lastModified, pageNumber, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;APIProjectTaskPagedResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIProjectTaskPagedResponse> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo(projectId, lastModified, pageNumber, pageSize);
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIProjectTaskPagedResponse> _callback) throws ApiException {
            return getAllAsync(projectId, lastModified, pageNumber, pageSize, _callback);
        }
    }

    /**
     * Get project tasks.
     * Gets the project tasks.
     * @param projectId The project identifier. (required)
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll(String projectId) throws IllegalArgumentException {
        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
            

        return new GetAllRequestBuilder(projectId);
    }
    private okhttp3.Call listTimeEntriesBetweenDatesCall(String projectId, String taskId, OffsetDateTime from, OffsetDateTime to, String employeeIds, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/psa/projects/{projectId}/tasks/{taskId}/timeentries"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (employeeIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeIds", employeeIds));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTimeEntriesBetweenDatesValidateBeforeCall(String projectId, String taskId, OffsetDateTime from, OffsetDateTime to, String employeeIds, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling listTimeEntriesBetweenDates(Async)");
        }

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling listTimeEntriesBetweenDates(Async)");
        }

        return listTimeEntriesBetweenDatesCall(projectId, taskId, from, to, employeeIds, pageNumber, pageSize, _callback);

    }


    private ApiResponse<APITimesheetEntryPagedResponse> listTimeEntriesBetweenDatesWithHttpInfo(String projectId, String taskId, OffsetDateTime from, OffsetDateTime to, String employeeIds, Integer pageNumber, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listTimeEntriesBetweenDatesValidateBeforeCall(projectId, taskId, from, to, employeeIds, pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<APITimesheetEntryPagedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTimeEntriesBetweenDatesAsync(String projectId, String taskId, OffsetDateTime from, OffsetDateTime to, String employeeIds, Integer pageNumber, Integer pageSize, final ApiCallback<APITimesheetEntryPagedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTimeEntriesBetweenDatesValidateBeforeCall(projectId, taskId, from, to, employeeIds, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<APITimesheetEntryPagedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTimeEntriesBetweenDatesRequestBuilder {
        private final String projectId;
        private final String taskId;
        private OffsetDateTime from;
        private OffsetDateTime to;
        private String employeeIds;
        private Integer pageNumber;
        private Integer pageSize;

        private ListTimeEntriesBetweenDatesRequestBuilder(String projectId, String taskId) {
            this.projectId = projectId;
            this.taskId = taskId;
        }

        /**
         * Set from
         * @param from Date from records to retrieve. If not specified defaults to &#x60;to - 30&#x60; days. (optional)
         * @return ListTimeEntriesBetweenDatesRequestBuilder
         */
        public ListTimeEntriesBetweenDatesRequestBuilder from(OffsetDateTime from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set to
         * @param to Date to records can be retrieved. If not specified defaults to &#x60;today&#x60;. (optional)
         * @return ListTimeEntriesBetweenDatesRequestBuilder
         */
        public ListTimeEntriesBetweenDatesRequestBuilder to(OffsetDateTime to) {
            this.to = to;
            return this;
        }
        
        /**
         * Set employeeIds
         * @param employeeIds Comma separated list of one or more Employee ids you&#39;d like to filter on. (optional)
         * @return ListTimeEntriesBetweenDatesRequestBuilder
         */
        public ListTimeEntriesBetweenDatesRequestBuilder employeeIds(String employeeIds) {
            this.employeeIds = employeeIds;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber  (optional)
         * @return ListTimeEntriesBetweenDatesRequestBuilder
         */
        public ListTimeEntriesBetweenDatesRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Represents how many results you&#39;d like to retrieve per request (page). Default is 100. Max is 200 (optional)
         * @return ListTimeEntriesBetweenDatesRequestBuilder
         */
        public ListTimeEntriesBetweenDatesRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for listTimeEntriesBetweenDates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTimeEntriesBetweenDatesCall(projectId, taskId, from, to, employeeIds, pageNumber, pageSize, _callback);
        }


        /**
         * Execute listTimeEntriesBetweenDates request
         * @return APITimesheetEntryPagedResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public APITimesheetEntryPagedResponse execute() throws ApiException {
            ApiResponse<APITimesheetEntryPagedResponse> localVarResp = listTimeEntriesBetweenDatesWithHttpInfo(projectId, taskId, from, to, employeeIds, pageNumber, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTimeEntriesBetweenDates request with HTTP info returned
         * @return ApiResponse&lt;APITimesheetEntryPagedResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APITimesheetEntryPagedResponse> executeWithHttpInfo() throws ApiException {
            return listTimeEntriesBetweenDatesWithHttpInfo(projectId, taskId, from, to, employeeIds, pageNumber, pageSize);
        }

        /**
         * Execute listTimeEntriesBetweenDates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APITimesheetEntryPagedResponse> _callback) throws ApiException {
            return listTimeEntriesBetweenDatesAsync(projectId, taskId, from, to, employeeIds, pageNumber, pageSize, _callback);
        }
    }

    /**
     * Get project task time entries.
     * Gets the project task time entries between selected from and to date range.If both &#x60;from&#x60; and &#x60;to&#x60; are not specified, last 30 days records are returned.From &#x60;date&#x60; should be before &#x60;to&#x60; date.The difference between &#x60;from&#x60; and &#x60;to&#x60; date cannot be more than **90** days.
     * @param projectId The project identifier. (required)
     * @param taskId The task identifier. (required)
     * @return ListTimeEntriesBetweenDatesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListTimeEntriesBetweenDatesRequestBuilder listTimeEntriesBetweenDates(String projectId, String taskId) throws IllegalArgumentException {
        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
            

        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
            

        return new ListTimeEntriesBetweenDatesRequestBuilder(projectId, taskId);
    }
    private okhttp3.Call updateTaskCall(String projectId, String taskId, UpdateProjectTask updateProjectTask, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateProjectTask;

        // create path and map variables
        String localVarPath = "/psa/projects/{projectId}/tasks/{taskId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/json-patch+json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTaskValidateBeforeCall(String projectId, String taskId, UpdateProjectTask updateProjectTask, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateTask(Async)");
        }

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling updateTask(Async)");
        }

        return updateTaskCall(projectId, taskId, updateProjectTask, _callback);

    }


    private ApiResponse<BooleanResponse> updateTaskWithHttpInfo(String projectId, String taskId, UpdateProjectTask updateProjectTask) throws ApiException {
        okhttp3.Call localVarCall = updateTaskValidateBeforeCall(projectId, taskId, updateProjectTask, null);
        Type localVarReturnType = new TypeToken<BooleanResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTaskAsync(String projectId, String taskId, UpdateProjectTask updateProjectTask, final ApiCallback<BooleanResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTaskValidateBeforeCall(projectId, taskId, updateProjectTask, _callback);
        Type localVarReturnType = new TypeToken<BooleanResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateTaskRequestBuilder {
        private final String projectId;
        private final String taskId;
        private String description;
        private String name;
        private TaskBillingType taskBillingType;
        private List<String> assignedTo;
        private OffsetDateTime startDate;
        private OffsetDateTime endDate;
        private Double estimatedHours;
        private String phaseId;

        private UpdateTaskRequestBuilder(String projectId, String taskId) {
            this.projectId = projectId;
            this.taskId = taskId;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return UpdateTaskRequestBuilder
         */
        public UpdateTaskRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return UpdateTaskRequestBuilder
         */
        public UpdateTaskRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set taskBillingType
         * @param taskBillingType  (optional)
         * @return UpdateTaskRequestBuilder
         */
        public UpdateTaskRequestBuilder taskBillingType(TaskBillingType taskBillingType) {
            this.taskBillingType = taskBillingType;
            return this;
        }
        
        /**
         * Set assignedTo
         * @param assignedTo  (optional)
         * @return UpdateTaskRequestBuilder
         */
        public UpdateTaskRequestBuilder assignedTo(List<String> assignedTo) {
            this.assignedTo = assignedTo;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate  (optional)
         * @return UpdateTaskRequestBuilder
         */
        public UpdateTaskRequestBuilder startDate(OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate  (optional)
         * @return UpdateTaskRequestBuilder
         */
        public UpdateTaskRequestBuilder endDate(OffsetDateTime endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set estimatedHours
         * @param estimatedHours  (optional)
         * @return UpdateTaskRequestBuilder
         */
        public UpdateTaskRequestBuilder estimatedHours(Double estimatedHours) {
            this.estimatedHours = estimatedHours;
            return this;
        }
        
        /**
         * Set phaseId
         * @param phaseId  (optional)
         * @return UpdateTaskRequestBuilder
         */
        public UpdateTaskRequestBuilder phaseId(String phaseId) {
            this.phaseId = phaseId;
            return this;
        }
        
        /**
         * Build call for updateTask
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateProjectTask updateProjectTask = buildBodyParams();
            return updateTaskCall(projectId, taskId, updateProjectTask, _callback);
        }

        private UpdateProjectTask buildBodyParams() {
            UpdateProjectTask updateProjectTask = new UpdateProjectTask();
            updateProjectTask.description(this.description);
            updateProjectTask.name(this.name);
            updateProjectTask.taskBillingType(this.taskBillingType);
            updateProjectTask.assignedTo(this.assignedTo);
            updateProjectTask.startDate(this.startDate);
            updateProjectTask.endDate(this.endDate);
            updateProjectTask.estimatedHours(this.estimatedHours);
            updateProjectTask.phaseId(this.phaseId);
            return updateProjectTask;
        }

        /**
         * Execute updateTask request
         * @return BooleanResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public BooleanResponse execute() throws ApiException {
            UpdateProjectTask updateProjectTask = buildBodyParams();
            ApiResponse<BooleanResponse> localVarResp = updateTaskWithHttpInfo(projectId, taskId, updateProjectTask);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateTask request with HTTP info returned
         * @return ApiResponse&lt;BooleanResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BooleanResponse> executeWithHttpInfo() throws ApiException {
            UpdateProjectTask updateProjectTask = buildBodyParams();
            return updateTaskWithHttpInfo(projectId, taskId, updateProjectTask);
        }

        /**
         * Execute updateTask request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BooleanResponse> _callback) throws ApiException {
            UpdateProjectTask updateProjectTask = buildBodyParams();
            return updateTaskAsync(projectId, taskId, updateProjectTask, _callback);
        }
    }

    /**
     * Update a task
     * Update project task.
     * @param projectId The project identifier. (required)
     * @param taskId The task identifier. (required)
     * @return UpdateTaskRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTaskRequestBuilder updateTask(String projectId, String taskId) throws IllegalArgumentException {
        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
            

        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
            

        return new UpdateTaskRequestBuilder(projectId, taskId);
    }
}
